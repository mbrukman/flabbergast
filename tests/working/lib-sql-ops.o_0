sql_lib : From lib:sql
utils_lib : From lib:utils

test_query : Template sql_lib.offline_query {
	table : { t : sql_lib.offline_table_tmpl { table_schema : "Z"  table_name : "XXX" columns +: { x : column_tmpl { column_name : $x } } } }
	columns : {
		a : expr.add {
			left : 3
			right : 4
		}
		b : expr.str_slice {
			input : "foo"
			start : 1
			length : 2
		}
		y : column.t.x
	}
}

sql_stmts : {
	mssql : "SELECT (3+4) AS [a], SUBSTRING(('foo'), 1, 2) AS [b], [Z].[XXX].[x] AS [y] FROM [Z].[XXX]"
	mysql : "SELECT (3+4) AS `a`, SUBSTRING('foo' FROM 1 FOR 2) AS `b`, `Z`.`XXX`.`x` AS `y` FROM `Z`.`XXX`"
	oracle : "SELECT (3+4) AS \"a\", SUBSTR('foo', 1, 2) AS \"b\", \"Z\".\"XXX\".\"x\" AS \"y\" FROM \"Z\".\"XXX\""
	postgresql : "SELECT (3+4) AS \"a\", SUBSTRING(E'foo' FROM 1 FOR 2) AS \"b\", \"Z\".\"XXX\".\"x\" AS \"y\" FROM \"Z\".\"XXX\""
	sqlite : "SELECT (3+4) AS \"a\", SUBSTR('foo', 1, 2) AS \"b\", \"Z\".\"XXX\".\"x\" AS \"y\" FROM \"Z\".\"XXX\""
}

results : For provider : sql_lib.sql_providers, stmt : sql_stmts, name : Name
	Select name : stmt Is Null || test_query(provider : provider) == stmt

value : utils_lib.all(args : results)
