sql_lib : From lib:sql
test_query : Template sql_lib.offline_query {
	columns : {
		x : column.foo.a
		y : expr.mul { left : column.blah.a  right : column.foo.z }
	}
	table : {
		blah : sql_literal_table_tmpl {
			rows : [ { a : 5 }, { a : 3  b : "x" } ]
			table_name : "lit"
		}
		foo : offline_table_tmpl {
			table_name : "hi"
			table_schema : "ho"
			columns +: {
				a : column_tmpl { column_name : $a }
				z : column_tmpl { column_name : $z  sql_type : sql_types.int }
			}
		}
	}
}

sql_stmts : {
	mssql : "SELECT [ho].[hi].[a] AS [x], ([lit].[a]*[ho].[hi].[z]) AS [y] FROM (VALUES (5,NULL),(3,('x'))) AS [lit]([a],[b]), [ho].[hi]"
	mysql : "SELECT `ho`.`hi`.`a` AS `x`, (`lit`.`a`*`ho`.`hi`.`z`) AS `y` FROM (SELECT 5 AS `a`,NULL AS `b` UNION SELECT 3 AS `a`,'x' AS `b`) AS `lit`, `ho`.`hi`"
	postgresql : "SELECT \"ho\".\"hi\".\"a\" AS \"x\", (\"lit\".\"a\"*\"ho\".\"hi\".\"z\") AS \"y\" FROM (VALUES (5,NULL),(3,E'x')) AS \"lit\"(\"a\",\"b\"), \"ho\".\"hi\""
	sqlite : "SELECT \"ho\".\"hi\".\"a\" AS \"x\", (\"lit\".\"a\"*\"ho\".\"hi\".\"z\") AS \"y\" FROM (SELECT 5 AS \"a\",NULL AS \"b\" UNION SELECT 3 AS \"a\",'x' AS \"b\") AS \"lit\", \"ho\".\"hi\""
}

checks : For provider : sql_lib.sql_providers, stmt : sql_stmts, name : Name
	Select name : stmt Is Null || test_query(provider : provider) == stmt

value : For check : checks
	Reduce acc && check
	With acc : True
