sql_lib : From lib:sql

test_query : Template sql_lib.offline_query {
	tables : [ { sql_from : "XXX" }, { sql_from : "YYY" } ]
	columns : {
		a : expr.and {
			args : [
				expr.not {
					arg : expr.is_null {
						arg : expr.base_expr_tmpl {
							sql_expr : "AAA"
							sql_type : sql_types.str
						}
					}
				},
				expr.le {
					left : expr.cast {
						sql_type : sql_types.int
						arg : expr.base_expr_tmpl {
							sql_type : sql_types.str
							sql_expr : "BBB"
						}
					}
					right : 5
				}
			]
		}
		b : expr.avg {
			args : [
				expr.negate {
					arg : expr.base_expr_tmpl {
						sql_expr : "CCC"
						sql_type : sql_types.int
					}
				},
				expr.base_expr_tmpl {
					sql_expr : "DDD"
					sql_type : sql_types.float
				}
			]
		}
	}

	where +: {
		x : expr.case_bool {
			cases : [
				when {
					test : True
					result : 5
				}
			]
			else : 5
		}
		y : expr.like {
			left : expr.case_input {
				input : 3
				cases : [
					when {
						test : 2
						result : "foo"
					}
				]
			}
			right : "foo%"
		}
	}
}

sql_stmts : {
	mysql : "SELECT ((NOT (AAA IS NULL))AND((CAST(BBB AS INTEGER)) <= 5)) AS a, AVG((- CCC), DDD) AS b FROM XXX, YYY WHERE (CASE  WHEN TRUE THEN 5 ELSE 5 END) AND ((CASE 3 WHEN 2 THEN 'foo' END) LIKE 'foo%')"
	postgresql : "SELECT ((NOT (AAA IS NULL))AND((CAST(BBB AS INTEGER)) <= 5)) AS a, AVG((- CCC), DDD) AS b FROM XXX, YYY WHERE (CASE  WHEN TRUE THEN 5 ELSE 5 END) AND ((CASE 3 WHEN 2 THEN E'foo' END) LIKE E'foo%')"
	sqlite : "SELECT ((NOT (AAA IS NULL))AND((CAST(BBB AS INTEGER)) <= 5)) AS a, AVG((- CCC), DDD) AS b FROM XXX, YYY WHERE (CASE  WHEN TRUE THEN 5 ELSE 5 END) AND ((CASE 3 WHEN 2 THEN 'foo' END) LIKE 'foo%')"
}

value : For provider : sql_lib.sql_providers, stmt : sql_stmts
	Reduce acc && (stmt Is Null || test_query(provider : provider) == stmt)
	With acc : True
