int_to_str_list : Template {
	value :
		Let
			format_code :
				(If hex Then "X" Else "D") &
				(If digits Enforce Int >= 0 Then digits Else Error "The number of digits must be positive.")
		In
			For arg : args, arg_name : Name
			Select arg_name : XInvoke System.Int64 ToString (arg Enforce Int, format_code Enforce Str)
}
float_to_str_list : Template {
	value :
		Let
			format_code :
				If digits Enforce Int < 0
					Then Error "The number of digits must be non-negative."
					Else
						(For x : 1 Through digits Reduce acc & "0" With acc : "0.") &
						(If exponential Then "E0" Else "")
		In
			For arg : args, arg_name : Name
			Select arg_name : XInvoke System.Double ToString (arg To Float, format_code Enforce Str)
}
str_categories_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XFuture Flabbergast.CharacterCategory,Flabbergast.Runtime
}
str_codepoints_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XFuture Flabbergast.StringToCodepoints,Flabbergast.Runtime
}


str_escape_list : Template {
	value : XFuture Flabbergast.Escape,Flabbergast.Runtime
}
str_transform : {
	char_tmpl : Template {
		type : 0
	}
	range_tmpl : Template {
		type : 1
		mode_hex_upper : { four : "X8"  two : "X4"  one : "X2" }
		mode_hex_lower : { four : "x8"  two : "x4"  one : "x2" }
		mode_decimal : { four : "D"  two : "D"  one : "D" }

		utf32 : { value : "{0:\(mode.four)}" }
		utf16_0 : { value : "{1:\(mode.two)}" }
		utf16_1 : { value : "{2:\(mode.two)}" }
		utf8_0 : { value : "{3:\(mode.one)}" }
		utf8_1 : { value : "{4:\(mode.one)}" }
		utf8_2 : { value : "{5:\(mode.one)}" }
		utf8_3 : { value : "{6:\(mode.one)}" }

		format_str :
			For part : replacement
				Reduce
					acc &
					(If part Is Frame
							Then part.value Enforce Str
							Else XInvoke Flabbergast.Escape,Flabbergast.Runtime Quote (part To Str))
				With acc : ""
	}
}
str_find_list : Template {
	value :
		If Length str == 0
			Then Error "“str” must not be empty."
			Else
				(For arg : str_args, arg_name : Name
				Select arg_name :
					If arg.enabled
					Then
						(Let pos :
							If backward
								Then XInvoke System.String LastIndexOf (arg.str, str, XInvoke Flabbergast.Stringish,Flabbergast.Runtime OffsetByCodePoints (arg.str, arg.real_start))
								Else XInvoke System.String IndexOf (arg.str, str, XInvoke Flabbergast.Stringish,Flabbergast.Runtime OffsetByCodePoints (arg.str, arg.real_start))
						In If pos == -1 Then Null Else pos)
					Else Null)
}

str_replace_list : Template {
	value :
		If Length str == 0
			Then Error "“str” must not be empty."
			Else
				(For arg : args, arg_name : Name
				Select arg_name : XInvoke System.String Replace (arg To Str, str To Str, with To Str))
}
str_slice_list : Template {
	value :
		For arg : str_args, arg_name : Name
		Select arg_name :
			If arg.enabled
				Then XInvoke System.String Substring (arg.str, XInvoke Flabbergast.Stringish,Flabbergast.Runtime OffsetByCodePoints (arg.str, arg.real_start), XInvoke Flabbergast.Stringish,Flabbergast.Runtime OffsetByCodePoints (arg.str, arg.real_length))
				Else empty
}

bin_to_hex_str_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XInvoke Flabbergast.BinaryFunctions,Flabbergast.Runtime BytesToHex (arg, delimiter, uppercase)
}

str_punycode_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XFuture Flabbergast.Punycode,Flabbergast.Runtime
}
