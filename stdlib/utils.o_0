Introduction{{{Miscellaneous helper functions. Consider this the standard
library of Flabbergast.}}}

{{{Adds a constant the values in a frame.}}}
add : Template {
	args : Used
	{{{The constant to add.}}}
	plus : Required
	value :
		For arg : args, arg_name : Name
			Select arg_name : arg + plus
}

{{{Return the conjunction (and) of the arguments.}}}
all : allifier(base : identity)

{{{Convert a function-like template from one that returns a list of Booleans to
a conjunctions (and).}}}
allifier : Template {
	base : Required
	value : Template base {
		value +original: For item : original Reduce acc && item With acc : True
	}
}

{{{Return the disjunction (or) of the arguments.}}}
any : anyifier(base : identity)

{{{Convert a function-like template from one that returns a list of Booleans to
a disjunction (or).}}}
anyifier : Template {
	base : Required
	value : Template base {
		value +original: For item : original Reduce acc || item With acc : False
	}
}

{{{Compress binary data.}}}
bin_compress : {
	gzip : firstifier(base : bin_compress_list.gzip)
}

{{{Compress lists of binary data.}}}
bin_compress_list : {
	gzip : Template (From lib:utilsinterop).bin_gzip_list {
		{{{The binary data to hash.}}}
		args : Used
	}
}

{{{Dedecompress binary data.}}}
bin_decompress : {
	gzip : firstifier(base : bin_decompress_list.gzip)
}

{{{Dedecompress lists of binary data.}}}
bin_decompress_list : {
	gzip : Template (From lib:utilsinterop).bin_gunzip_list {
		{{{The binary data to hash.}}}
		args : Used
	}
}

{{{Compute the hash of binary data.}}}
bin_hash : {
	md5 : firstifier(base : bin_hash_list.md5)
	sha1 : firstifier(base : bin_hash_list.sha1)
	sha256 : firstifier(base : bin_hash_list.sha256)
}

{{{Compute a list of hashes of a list of binary data.}}}
bin_hash_list : {
	md5 : Template (From lib:utilsinterop).bin_hash_list_md5 {
		{{{The binary data to hash.}}}
		args : Used
	}
	sha1 : Template (From lib:utilsinterop).bin_hash_list_sha1 {
		{{{The binary data to hash.}}}
		args : Used
	}
	sha256 : Template (From lib:utilsinterop).bin_hash_list_sha256 {
		{{{The binary data to hash.}}}
		args : Used
	}
}

{{{Convert binary data into a hexadecimal string.}}}
bin_to_hex_str : str_concatifier(base : bin_to_hex_str_list)

{{{Convert a list of binary data into a list of hexadecimal strings.}}}
bin_to_hex_str_list : Template (From lib:utilsinterop).bin_to_hex_str_list {
		{{{The binary data to convert.}}}
		args : Used
		{{{The separator between bytes.}}}
		delimiter : ""
		{{{Whether to use upper or lowercase alphabetical characters.}}}
		uppercase : False
}

{{{Convert binary data into a C-style hexadecimal array.}}}
bin_to_c_array_str : Template str_concatifier(base : bin_to_hex_str_list) {
	value +orig: "0x" & orig Enforce Str
	delimiter : ", 0x"
	uppercase : True
}

{{{Convert binary data to a string by decoding it.}}}
bin_to_str : {
	{{{Convert binary data to a string by decoding it as UTF-8.}}}
	utf8 : str_concatifier(base : bin_to_str_list.utf8)

	{{{Convert binary data to a string by decoding it as big-endian UTF-16.}}}
	utf16be : str_concatifier(base : bin_to_str_list.utf16be)

	{{{Convert binary data to a string by decoding it as little-endian UTF-16.}}}
	utf16le : str_concatifier(base : bin_to_str_list.utf16le)

	{{{Convert binary data to a string by decoding it as big-endian UTF-32.}}}
	utf32be : str_concatifier(base : bin_to_str_list.utf32be)

	{{{Convert binary data to a string by decoding it as little-endian UTF-32.}}}
	utf32le : str_concatifier(base : bin_to_str_list.utf32le)

	{{{Convert binary data to a string by encoding it as Base64.}}}
	base64 : str_concatifier(base : bin_to_str_list.base64)
}

{{{Convert a list of binary data to a list of strings by decoding.}}}
bin_to_str_list : {
	{{{Convert a list of binary data to a list of strings by decoding it as UTF-8.}}}
	utf8 : Template (From lib:utilsinterop).bin_to_str_utf8_list {
		{{{The binary data to convert to strings.}}}
		args : Used
	}

	{{{Convert a list of binary data to a list of strings by decoding it as big-endian UTF-16.}}}
	utf16be : Template (From lib:utilsinterop).bin_to_str_utf16be_list {
		{{{The binary data to convert to strings.}}}
		args : Used
	}

	{{{Convert a list of binary data to a list of strings by decoding it as little-endian UTF-16.}}}
	utf16le : Template (From lib:utilsinterop).bin_to_str_utf16le_list {
		{{{The binary data to convert to strings.}}}
		args : Used
	}

	{{{Convert a list of binary data to a list of strings by decoding it as big-endian UTF-32.}}}
	utf32be : Template (From lib:utilsinterop).bin_to_str_utf32be_list {
		{{{The binary data to convert to strings.}}}
		args : Used
	}

	{{{Convert a list of binary data to a list of strings by decoding it as little-endian UTF-32.}}}
	utf32le : Template (From lib:utilsinterop).bin_to_str_utf32le_list {
		{{{The binary data to convert to strings.}}}
		args : Used
	}

	{{{Convert a list of binary data to a list of strings by encoding it as Base64.}}}
	base64 : Template (From lib:utilsinterop).bin_to_str_base64_list {
		{{{The binary data to convert to strings.}}}
		args : Used
	}
}

{{{Limits the range of a list of values. For details, see \{clampifier}.}}}
clamp_list : clampifier(base : identity)

{{{Convert a function-like template from one that returns a list of values into
one that returns a list of values clipped between the inclusive range \{lower}
to \{upper}.}}}
clampifier : Template {
	base : Required
	value : Template base {
		{{{The minimum threshold value.}}}
		lower : Used
		{{{The maximum threshold value.}}}
		upper : Used
		value +original:
			For item : original, item_name : Name
			Where !(item Is Null)
			Select item_name :
				If item > upper Then upper
				Else If item < lower Then lower
				Else item
	}
}


{{{Count the number of items in a frame.}}}
count : sumifier(base : count_list)

{{{Count the number of item in a list of frames.}}}
count_list : Template {
	args : Used
	value :
		For arg : args, arg_name : Name
		Select
			arg_name : (For x : arg Reduce k + 1 With k : 0)
}

{{{Divides the values in a frame by a constant or divides a constant by the values in a frame.}}}
divide : Template {
	args : Used
	{{{The constant to divide by.}}}
	denominator : Null
	{{{The constant to be divide.}}}
	numerator : Null
	value :
		For arg : args, arg_name : Name
			Select arg_name : (numerator ?? arg) / (denominator ?? arg)
}

{{{Selects all frames which have \{enabled} set to true in the values in a frame.}}}
enabled : Template {
	args : Used
	value :
		For arg : args, arg_name : Name
			Where arg.enabled
			Select arg_name : arg
}

{{{Checks if the values in a frame are equal to a constant.}}}
equal : Template {
	args : Used
	{{{The reference value to compare against.}}}
	to : Required
	value :
		For arg : args, arg_name : Name
			Where arg.enabled
			Select arg_name : arg == to
}

{{{Flatten a list of lists into a single list.}}}
flatten : flattenifier(base : identity)

{{{Convert a function-like template from one that returns a list of lists to
one that returns a list.}}}
flattenifier : Template {
	base : Required
	value : Template base {
		value +original: For item : original Reduce acc Append item With acc : []
	}
}

{{{Return the first argument supplied.}}}
first : firstifier(base : identity)

{{{Convert a function-like template from one that returns a list of non-null
values into one that returns the first non-null value.}}}
firstifier : Template {
	base : Required
	value : Template base {
		value +original: For item : original Reduce acc ?? item With acc : Null
	}
}

{{{Convert a float into a string with precision control. See
\{float_to_str_list} for details.}}}
float_to_str : str_concatifier(base : float_to_str_list, delimiter : "")

{{{Convert floats into strings with precision control.}}}
float_to_str_list : Template ( From lib:utilsinterop ).float_to_str_list {
	args : Used
	{{{Use scientific/exponential notation instead of fixed-point.}}}
	exponential : False
	{{{The number of decimal digits to use.}}}
	digits : 0
}

{{{Create a frame with the specified attribute name and value.}}}
frame : Template {
	{{{The value to be used. Only one may be specified.}}}
	args : Used
	{{{The name to use}}}
	name : Required
	value : For arg : args Select name : arg
}

{{{Checks if the values in a frame are greater than a constant.}}}
greater : Template {
	args : Used
	{{{The reference value to compare against.}}}
	to : Required
	value :
		For arg : args, arg_name : Name
			Where arg.enabled
			Select arg_name : arg > to
}

{{{Checks if the values in a frame are greater than or equal to a constant.}}}
greater_or_equal : Template {
	args : Used
	{{{The reference value to compare against.}}}
	to : Required
	value :
		For arg : args, arg_name : Name
			Where arg.enabled
			Select arg_name : arg >= to
}

{{{Function-like template that returns its arguments.}}}
identity : Template {
	args : Used
	value : args
}

{{{Convert a Unicode codepoint (integer) into a string.}}}
int_to_char : str_concatifier(base : int_to_char_list, delimiter : "")

{{{Convert a list of Unicode codepoints (integers) into a list of strings.}}}
int_to_char_list : Template ( From lib:utilsinterop ).int_to_char_list {
	args : Used
}

{{{Convert an integer to a valid identifier. See \{int_to_ordinal_list} for
details.}}}
int_to_ordinal : str_concatifier(base : int_to_ordinal_list, delimiter : "")

{{{Convert integers to a valid identifiers.}}}
int_to_ordinal_list : Template ( From lib:utilsinterop ).int_to_ordinal_list {
	args : Used
}

{{{Convert an integer to a string with precision control. See \{int_to_str} for
details.}}}
int_to_str : str_concatifier(base : int_to_str_list, delimiter : "")

{{{Convert integers to strings with precision control.}}}
int_to_str_list : Template ( From lib:utilsinterop ).int_to_str_list {
	args : Used
	{{{The number of digits to display. If the number is too small, it will be
	padded with zeros.}}}
	digits : 0
	{{{Display in hexadecimal, instead of decimal.}}}
	hex : False
}

{{{Checks if \{args} is an automatically generated list, rather than a frame
with user-defined names.}}}
is_list : Template {
	args : Used
	value :
		For arg : args, arg_name : Name, arg_pos : Ordinal
			Reduce acc && arg_name == int_to_ordinal(arg_pos)
			With acc : True
}

{{{Return the last argument supplied.}}}
last : lastifier(base : identity)

{{{Convert a function-like template from one that returns a list of non-null
values into one that returns the last non-null value.}}}
lastifier : Template {
	base : Required
	value : Template base {
		value +original: For item : original Reduce item ?? acc With acc : Null
	}
}

{{{Checks if the values in a frame are less than a constant.}}}
lesser : Template {
	args : Used
	{{{The reference value to compare against.}}}
	to : Required
	value :
		For arg : args, arg_name : Name
			Where arg.enabled
			Select arg_name : arg < to
}

{{{Checks if the values in a frame are less than or equal to a constant.}}}
lesser_or_equal : Template {
	args : Used
	{{{The reference value to compare against.}}}
	to : Required
	value :
		For arg : args, arg_name : Name
			Where arg.enabled
			Select arg_name : arg <= to
}

{{{Remove attribute names from a frame or compact entries in a list.}}}
list : listifier(base : identity)

{{{Chang a function-like template to remove attribute names from a frame or compact entries in a list.}}}
listifier : Template {
	base : Required
	value : Template base {
		value +original: For x : original Select x
	}
}

{{{Checks if the arguments match reference values.}}}
matches : Template {
	{{{A list of items to compare. The items may be of any comparable type.}}}
	args : Required
	{{{A list of reference values to compare against. These must match the length and types of \{args}.}}}
	refs : Required
	value : For x : args, y : refs Reduce acc && (x Is Null && y Is Null || x == y) With acc : True
}

{{{Finds the maximum in a list of values.}}}
max : maxifier(base : identity)

{{{Convert a function-like template from one that returns a list of homogeneous
values into one that returns the largest value.}}}
maxifier : Template {
	base : Required
	value : Template base {
		value +original:
			For item : original
			Where !(item Is Null)
			Reduce
				If acc Is Null
					Then item
					Else If acc Is Float && acc Is NaN || item Is Float && item Is NaN Then NaN
					Else If acc > item Then acc Else item
			With acc : Null
	}
}

{{{Finds the minimum in a list of values.}}}
min : minifier(base : identity)

{{{Convert a function-like template from one that returns a list of homogeneous
values into one that returns the largest value.}}}
minifier : Template {
	base : Required
	value : Template base {
		value +original:
			For item : original
			Where !(item Is Null)
			Reduce
				If acc Is Null
					Then item
					Else If acc Is Float && acc Is NaN || item Is Float && item Is NaN Then NaN
					Else If acc < item Then acc Else item
			With acc : Null
	}
}

{{{Multiplies the values in a frame by a constant.}}}
multiply : Template {
	args : Used
	{{{The constant to multiply by.}}}
	times : Required
	value :
		For arg : args, arg_name : Name
			Select arg_name : arg * times
}

{{{Selects all non-null values in a frame.}}}
non_null : Template {
	args : Used
	value :
		For arg : args, arg_name : Name
			Where !(arg Is Null)
			Select arg_name : arg
}

{{{Select all the non-null values in a frame, discarding their attribute names.}}}
non_null_as_list : listifier(base : non_null)

{{{Replaces all null values in a frame with \{default}.}}}
or_default : Template {
	args : Used
	{{{The default value to use instead of \Mono{Null}.}}}
	default : Required
	value :
		For arg : args, arg_name : Name
			Select arg_name : arg ?? default
}

{{{Convert a string containing digits and stuff into a floating-point number.}}}
parse_float : firstifier(base : parse_float_list)

{{{Convert strings containing digits into integers.}}}
parse_float_list : Template ( From lib:utilsinterop ).parse_float_list {
	args : Used
}

{{{Convert a string containing digits into an integer.}}}
parse_int : firstifier(base : parse_int_list)

{{{Convert strings containing digits into integers.}}}
parse_int_list : Template ( From lib:utilsinterop ).parse_int_list {
	args : Used
	{{{The radix to use for the digits. The limits of this are platform-dependant.}}}
	radix : 10
}

{{{Multiply a list of numbers.}}}
product : productifier(base : identity)

{{{Convert a function-like template from one that returns a list of numbers to
a single product.}}}
productifier : Template {
	base : Required
	value : Template base {
		value +original: For item : original Reduce acc * item With acc : 1
	}
}

{{{Get the Unicode category for every character in a string. See
\{str_categories_list} for details.}}}
str_categories : flattenifier(base : str_categories_list)

{{{Get the Unicode category for every character in strings. The value to be
returned for each category must be user-defined.}}}
str_categories_list : Template ( From lib:utilsinterop ).str_categories_list {
	args : Used

	letter_lower : Used
	letter_modifier : Used
	letter_other : Used
	letter_title : Used
	letter_upper : Used
	mark_combining : Used
	mark_enclosing : Used
	mark_nonspace : Used
	number_decimal : Used
	number_letter : Used
	number_other : Used
	other_control : Used
	other_format : Used
	other_private : Used
	other_surrogate : Used
	other_unassigned : Used
	punctuation_connector : Used
	punctuation_dash : Used
	punctuation_end : Used
	punctuation_final_quote : Used
	punctuation_initial_quote : Used
	punctuation_other : Used
	punctuation_start : Used
	separator_line : Used
	separator_paragraph : Used
	separator_space : Used
	symbol_currency : Used
	symbol_math : Used
	symbol_modifier : Used
	symbol_other : Used
}

{{{Get the Unicode category name for every character in a string. See
\{str_categories_list} for details.}}}
str_categories_spec : flattenifier(base : str_categories_spec_list)

{{{Get the Unicode category name for every character in a string. The names are
from the Unicode specification. See \{str_categories_list} for details.}}}
str_categories_spec_list : Template str_categories_list {
	letter_lower : "Ll"
	letter_modifier : "Lm"
	letter_other : "Lo"
	letter_title : "Lt"
	letter_upper : "Lu"
	mark_combining : "Mc"
	mark_enclosing : "Me"
	mark_nonspace : "Mn"
	number_decimal : "Nd"
	number_letter : "Nl"
	number_other : "No"
	other_control : "Cc"
	other_format : "Cf"
	other_private : "Co"
	other_surrogate : "Cs"
	other_unassigned : "Cn"
	punctuation_connector : "Pc"
	punctuation_dash : "Pd"
	punctuation_end : "Pe"
	punctuation_final_quote : "Pf"
	punctuation_initial_quote : "Pi"
	punctuation_other : "Po"
	punctuation_start : "Ps"
	separator_line : "Zl"
	separator_paragraph : "Zp"
	separator_space : "Zs"
	symbol_currency : "Sc"
	symbol_math : "Sm"
	symbol_modifier : "Sk"
	symbol_other : "So"
}

{{{Convert a string into a list of codepoints (integers) for each character.}}}
str_codepoints : flattenifier(base : str_codepoints_list)

{{{Convert strings into lists of codepoints (integers) for each character.}}}
str_codepoints_list : Template ( From lib:utilsinterop ).str_codepoints_list {
	args : Used
}

{{{Concatenate the arguments.}}}
str_concat : str_concatifier(base : identity, delimiter : "")

{{{Convert a function-like template from one that returns a list of strings to
a single string with the \{delimiter} between them.}}}
str_concatifier : Template {
	base : Required
	value : Template base {
		{{{A string to place between items.}}}
		delimiter : Used
		value +original:
			For item : original, pos : Ordinal
			Reduce
				(If pos > 1 Then acc & delimiter Else "") &
				item
			With acc : ""
	}
}

{{{Escape a string based on the provided transformation. See \{str_escape_list}
for details.}}}
str_escape : str_concatifier(base : str_escape_list, delimiter : "")

{{{Escape strings based on the provided transformation.}}}
str_escape_list : Template ( From lib:utilsinterop ).str_escape_list {
	args : Used
	{{{A list of transformations to be done on the string, from \{str_transform}.}}}
	transformations : Required
}

{{{Transformations that can be done on a string to escape it.}}}
str_transform : {
	{{{Transform a single character into an arbitrary escaped form.}}}
	char_tmpl : Template ( From lib:utilsinterop ).str_transform.char_tmpl {
		{{{A single-character string to use as input.}}}
		char : Required
		{{{The string to use in the escaped result.}}}
		replacement : Required
	}
	{{{Transform a range of characters into a numeric escape sequence.}}}
	range_tmpl : Template ( From lib:utilsinterop ).str_transform.range_tmpl {
		{{{The inclusive lower bound of the range of characters to escape as a
		single-character string.}}}
		start : Required
		{{{The inclusive upper bound of the range of characters to escape as a
		single-character string.}}}
		end : Required
		{{{A list of strings and encoded numbers to output in the escaped string.}}}
		replacement : Required
		{{{The mode for encoded numbers to appear in the output.}}}
		mode : mode_hex_upper

		{{{Encode numbers as padded upper-case hexadecimal.}}}
		mode_hex_upper : Used
		{{{Encode numbers as padded lower-case hexadecimal.}}}
		mode_hex_lower : Used
		{{{Encode numbers as unpadded decimal.}}}
		mode_decimal : Used

		{{{A single 32-bit number representing the entire Unicode codepoint.}}}
		utf32 : Used
		{{{A 16-bit number with the first half of a UTF-16 pair.}}}
		utf16_0 : Used
		{{{A 16-bit number with the second half of a UTF-16 pair.}}}
		utf16_1 : Used
		{{{A 8-bit number with the first quarter of a UTF-8 quartet.}}}
		utf8_0 : Used
		{{{A 8-bit number with the second quarter of a UTF-8 quartet.}}}
		utf8_1 : Used
		{{{A 8-bit number with the third quarter of a UTF-8 quartet.}}}
		utf8_2 : Used
		{{{A 8-bit number with the fourth quarter of a UTF-8 quartet.}}}
		utf8_3 : Used
	}
}

{{{Find the position of \{str} in the argument. See \{str_find_list} for details.}}}
str_find : firstifier(base : str_find_list)

{{{Find the position of \{str} in the arguments or null if it isn't found.}}}
str_find_list : Template ( From lib:utilsinterop ).str_find_list {
	{{{The arguments to check (a.k.a., the haystack).}}}
	args : Used
	{{{The string to find (a.k.a., the needle).}}}
	str : Required
	{{{The position to begin searching from. If the position is negative, the
	position is relative to the end of the string, rather than the beginning.}}}
	start : 0
	{{{Search from the end of the string towards the beginning.}}}
	backward : False

	str_args :
		For arg : args, arg_name : Name
		Select arg_name : {
			str : arg To Str
			length : Length str
			orig_start :
				If start Enforce Int >= 0
					Then start
					Else (start + length)
			real_start : If backward Then length - orig_start - 1 Else orig_start
			enabled : real_start Enforce Int >= 0 && real_start < length
		}
}

{{{Checks if a string is a valid identifier.}}}
str_is_identifier : allifier(base : str_is_identifier_list)

{{{Checks if strings are valid identifiers.}}}
str_is_identifier_list : Template ( From lib:utilsinterop ).str_is_identifier_list {
	{{{A list of strings to check.}}}
	args : Used
}

{{{convert a string to lower case.}}}
str_lower_case : str_concatifier(base : str_lower_case_list)

{{{convert strings to lower case.}}}
str_lower_case_list : Template ( From lib:utilsinterop ).str_lower_case_list {
	# The strings to manipulate.
	args : Used
}

{{{Pad a string to \{length} by adding the string \{padding} to the end. If
multiple arguments are supplied, they are then concatentated after padding.}}}
str_pad : str_concatifier(base : str_pad_list)

{{{Pad strings to \{length} by adding the string \{padding} to the end. If the
string is too long, it is unmodified.}}}
str_pad_list : Template {
	{{{The padding characters to use. If this is not a multiple of the difference
	in lengths, it may pad slightly longer.}}}
	padding : " "
	{{{The target length of the string.}}}
	length : Required

	value :
		For arg : args, arg_name : Name
			Select arg_name :
				If Length arg < length
					Then (For x : 1 Through ((length - Length arg) / Length padding) Reduce (acc & padding) With acc : arg)
					Else arg
}

{{{Check if a string starts with \{str}.}}}
str_prefixed : allifier(base : str_prefixed_list)

{{{Check if a string starts with \{str}.}}}
str_prefixed_list : Template ( From lib:utilsinterop ).str_prefixed_list {
	{{{A list of strings to check.}}}
	args : Used
}

{{{Encode or decode a string as punycode/IDN.}}}
str_punycode : str_concatifier(base : str_punycode_list, delimiter : ".")

str_punycode_list : Template (From lib:utilsinterop).str_punycode_list {
	{{{A list of strings to transform.}}}
	args : Used
	{{{If true, encode a Unicode-string to an ASCII-only string. Otherwise, decode a ASCII-only string to a Unicode string.}}}
	encode : True
	{{{Allow Unicode code points that were not assigned in the Unicode 3.2 specification.}}}
	allow_unassigned : True
	{{{Require ASCII output to have only characters permitted by RFC 1122 and RFC 1123. This includes only the ASCII alphabetical and numerical characters, hypen, and period.}}}
	strict_ascii : True
}

{{{Replace occurrences of string \{str} in a string to \{with}. See
\{str_replace_list} for details.}}}
str_replace : firstifier(base : str_replace_list)

{{{Replace occurrences of string \{str} in strings to \{with}.}}}
str_replace_list : Template ( From lib:utilsinterop ).str_replace_list {
	{{{The strings to manipulate (a.k.a., the haystack).}}}
	args : Used
	{{{The string for which to search (a.k.a., the needle).}}}
	str : Required
	{{{The replacement string.}}}
	with : ""
}

{{{Extract an internal span of a string. See \{str_slice_list}.}}}
str_slice : str_concatifier(base : str_slice_list)

{{{Extract an internal span of strings.}}}
str_slice_list : Template ( From lib:utilsinterop ).str_slice_list {
	{{{The position at which to begin the extraction.}}}
	start : 0
	{{{The position at which to end the extraction. If this is beyond the end of
	the string, the entire string is kept. This or \{length} must be provided.}}}
	end : start + length
	{{{The length of the extraction. If this is beyond the end of the string, the
	entire string is kept. This or \{end} must be provided.}}}
	length : end - start
	{{{If extraction begins after the end of the string, this value will be
	returned.}}}
	empty : ""

	str_args :
		If length Enforce Int < 0
			Then Error "Length \(length) must be non-negative."
			Else
				(For arg : args, arg_name : Name
				Select arg_name : {
					str : arg To Str
					str_length : Length str
					real_start :
						If start Enforce Int >= 0
							Then start
							Else (start + length)
					real_length : (If str_length < length Then str_length Else length) - real_start
					enabled : real_length > 0
				})
}

{{{Check if a string ends with \{str}.}}}
str_suffixed : allifier(base : str_suffixed_list)

{{{Check if strings ends with \{str}.}}}
str_suffixed_list : Template ( From lib:utilsinterop ).str_suffixed_list {
	{{{A list of strings to check.}}}
	args : Used
}

{{{Remove leading and trailing whitespace from a string.}}}
str_trim : str_concatifier(base : str_trim_list)

{{{Remove leading and trailing whitespace from strings.}}}
str_trim_list : Template ( From lib:utilsinterop ).str_trim_list {
	{{{A ist of strings to manipulate.}}}
	args : Used
}

{{{Get the encoded bytes in a string.}}}
str_to_bin : {
	{{{Get the UTF-8 bytes in a string.}}}
	utf8 : firstifier(base : str_to_bin_list.utf8)

	{{{Get the big-endian UTF-16 bytes in a string.}}}
	utf16be : firstifier(base : str_to_bin_list.utf16be)

	{{{Get the little-endian UTF-16 bytes in a string.}}}
	utf16le : firstifier(base : str_to_bin_list.utf16le)

	{{{Get the big-endian UTF-32 bytes in a string.}}}
	utf32be : firstifier(base : str_to_bin_list.utf32be)

	{{{Get the little-endian UTF-32 bytes in a string.}}}
	utf32le : firstifier(base : str_to_bin_list.utf32le)

	{{{Get the bytes in a Base64 string.}}}
	base64 : firstifier(base : str_to_bin_list.base64)
}

{{{Get a list of the bytes in a list of strings.}}}
str_to_bin_list : {
	{{{Get a list of the UTF-8 bytes in a list of strings.}}}
	utf8 : Template (From lib:utilsinterop).str_utf8_list {
		{{{A list of strings to convert.}}}
		args : Used
	}

	{{{Get a list of the big-endian UTF-16 bytes in a list of strings.}}}
	utf16be : Template (From lib:utilsinterop).str_utf16be_list {
		{{{A list of strings to convert.}}}
		args : Used
	}

	{{{Get a list of the little-endian UTF-16 bytes in a list of strings.}}}
	utf16le : Template (From lib:utilsinterop).str_utf16le_list {
		{{{A list of strings to convert.}}}
		args : Used
	}

	{{{Get a list of the little-endian UTF-32 bytes in a list of strings.}}}
	utf32le : Template (From lib:utilsinterop).str_utf32le_list {
		{{{A list of strings to convert.}}}
		args : Used
	}

	{{{Get a list of the UTF-32 bytes in a list of strings.}}}
	utf32be : Template (From lib:utilsinterop).str_utf32be_list {
		{{{A list of strings to convert.}}}
		args : Used
	}

	{{{Get a list of the UTF-32 bytes in a list of strings.}}}
	base64 : Template (From lib:utilsinterop).str_base64_list {
		{{{A list of strings to convert.}}}
		args : Used
	}
}

{{{Get the UTF-8 length of a string.}}}
str_utf8_length : sumifier(base : str_utf8_length_list)

{{{Get the UTF-8 length of strings.}}}
str_utf8_length_list : Template ( From lib:utilsinterop ).str_utf8_length_list {
	{{{A list of strings to measure.}}}
	args : Used
}

{{{Get the UTF-16 length of a string.}}}
str_utf16_length : sumifier(base : str_utf16_length_list)

{{{Get the UTF-16 length of strings.}}}
str_utf16_length_list : Template ( From lib:utilsinterop ).str_utf16_length_list {
	{{{A list of strings to measure.}}}
	args : Used
}

{{{CONVERT A STRING TO UPPER CASE.}}}
str_upper_case : str_concatifier(base : str_upper_case_list)

{{{CONVERT STRINGS TO UPPER CASE.}}}
str_upper_case_list : Template ( From lib:utilsinterop ).str_upper_case_list {
	{{{A list of strings to manipulate.}}}
	args : Used
}

{{{Subtracts a constant the values in a frame.}}}
subtract : Template {
	args : Used
	{{{The constant to subtract.}}}
	minus : Required
	value :
		For arg : args, arg_name : Name
			Select arg_name : arg - minus
}

{{{Sum a list of numbers.}}}
sum : sumifier(base : identity)

{{{Convert a function-like template from one that returns a list of numbers to
a single sum.}}}
sumifier : Template {
	base : Required
	value : Template base {
		value +original: For item : original Reduce acc + item With acc : 0
	}
}

{{{Checks if the values in a frame are not equal to a constant.}}}
unequal : Template {
	args : Used
	{{{The reference value to compare against.}}}
	to : Required
	value :
		For arg : args, arg_name : Name
			Where arg.enabled
			Select arg_name : arg != to
}
