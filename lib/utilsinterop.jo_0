int_to_char_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name :
				If arg Enforce Int >= 0 && arg < 0xD800 || arg > 0xDFFF && arg < 0x10FFFF
					Then XInvoke flabbergast.Stringish fromCodepoint (arg To Int)
					Else Error "Code point \(arg) is out of range."
}
int_to_ordinal_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XInvoke flabbergast.TaskMaster ordinalName (arg Enforce Int)
}
int_to_str_list : Template {
	value :
		If digits < 0
			Then
				Error "The number of digits must be non-negative."
			Else
				(For arg : args, arg_name : Name
				Select arg_name : XInvoke flabbergast.Stringish fromInt (arg To Int, hex, digits))
}
float_to_str_list : Template {
	value :
		If digits < 0
			Then
				Error "The number of digits must be non-negative."
			Else
				(For arg : args, arg_name : Name
				Select arg_name : XInvoke flabbergast.Stringish fromDouble (arg To Float, exponential, digits))
}
parse_float_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XComputation flabbergast.ParseDouble
}
parse_int_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XComputation flabbergast.ParseInt
}
str_categories_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XComputation flabbergast.CharacterCategory
}
str_codepoints_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XComputation flabbergast.StringToCodepoints
}
str_is_identifier_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XInvoke flabbergast.TaskMaster verifySymbol (arg Enforce Str)
}
str_lower_case_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XInvoke java.lang.String toLowerCase (arg To Str)
}
str_escape_list : Template {
	value : XComputation flabbergast.Escape
}
str_transform : {
	char_tmpl : Template {
		type : 0
	}
	range_tmpl : Template {
		type : 1
		mode_hex_upper : { four : "08X"  two : "04X"  one : "02X" }
		mode_hex_lower : { four : "08x"  two : "04x"  one : "02x" }
		mode_decimal : { four : "d"  two : "d"  one : "d" }

		utf32 : { value : "%0$\(mode.four)" }
		utf16_0 : { value : "%1$\(mode.two)" }
		utf16_1 : { value : "%2$\(mode.two)" }
		utf8_0 : { value : "%3$\(mode.one)" }
		utf8_1 : { value : "%4$\(mode.one)" }
		utf8_2 : { value : "%5$\(mode.one)" }
		utf8_3 : { value : "%6$\(mode.one)" }

		format_str :
			For part : replacement
				Reduce
					acc &
					(If part Is Frame
							Then part.value Enforce Str
							Else XInvoke java.lang.String replaceAll (part To Str, "%", "%%"))
				With acc : ""
	}
}
str_find_list : Template {
	value :
		If Length str == 0
			Then Error "“str” must not be empty."
			Else
				(For arg : str_args, arg_name : Name
				Select arg_name :
					If arg.enabled
					Then
						(Let pos :
							If backward
								Then XInvoke java.lang.String lastIndexOf (arg.str, str To Str, XInvoke java.lang.String offsetByCodePoints (arg.str, 0, arg.real_start))
								Else XInvoke java.lang.String indexOf (arg.str, str To Str, XInvoke java.lang.String offsetByCodePoints (arg.str, 0, arg.real_start))
						In If pos == -1 Then Null Else pos)
					Else Null)
}
str_prefixed_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XInvoke java.lang.String startsWith (arg To Str, str To Str)
}
str_replace_list : Template {
	value :
		If Length str == 0
			Then Error "“str” must not be empty."
			Else
				(Let
					java_pattern : XInvoke java.util.regex.Pattern quote (str To Str),
					java_replacement : XInvoke java.util.regex.Matcher quoteReplacement (with To Str)
				In
					For arg : args, arg_name : Name
					Select arg_name : XInvoke java.lang.String replaceAll (arg To Str, java_pattern, java_replacement))
}
str_slice_list : Template {
	value :
		For arg : str_args, arg_name : Name
		Select arg_name :
			If arg.enabled
				Then XInvoke java.lang.String substring (arg.str,  XInvoke java.lang.String offsetByCodePoints (arg.str, 0, arg.real_start), XInvoke java.lang.String offsetByCodePoints (arg.str, 0, arg.real_start + arg.real_length))
				Else empty
}
str_suffixed_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XInvoke java.lang.String endsWith (arg To Str, str To Str)
}
str_trim_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XInvoke java.lang.String trim (arg To Str)
}
str_utf8_length_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XInvoke flabbergast.Stringish getUtf8Length (arg To Str)
}
str_upper_case_list : Template {
	value :
		For arg : args, arg_name : Name
		Select arg_name : XInvoke java.lang.String toUpperCase (arg To Str)
}

user : XInvoke java.lang.System getProperty ("user.name")
