Introduction{{{Templates to generate commonly used file formats.}}}

utils_lib : From lib:utils

{{{Tools for generating Windows-style INI files}}}
ini : {
	{{{Escaping conventions used by INI files}}}
	escape_transform_tmpl : Template {
		backslash : utils_lib.str_transform.char_tmpl { char : "\\"  replacement : "\\\\" }
		backspace : utils_lib.str_transform.char_tmpl { char : "\b"  replacement : "\\b" }
		bell : utils_lib.str_transform.char_tmpl { char : "\a"  replacement : "\\a" }
		colon : utils_lib.str_transform.char_tmpl { char : ":"  replacement : "\\:" }
		equals : utils_lib.str_transform.char_tmpl { char : "="  replacement : "\\=" }
		newline : utils_lib.str_transform.char_tmpl { char : "\n"  replacement : "\\n" }
		null : utils_lib.str_transform.char_tmpl { char : "\x00"  replacement : "\\0" }
		octothrope : utils_lib.str_transform.char_tmpl { char : "#"  replacement : "\\#" }
		return : utils_lib.str_transform.char_tmpl { char : "\r"  replacement : "\\r" }
		semi : utils_lib.str_transform.char_tmpl { char : ";"  replacement : "\\;" }
		tab : utils_lib.str_transform.char_tmpl { char : "\t"  replacement : "\\t" }
	}

	{{{The default escaping transformations, for use with \{utils_lib.str_escape}.}}}
	escape_transform : escape_transform_tmpl {}

	{{{Convert a frame to an INI file. Each attribute name is used as the INI
	key and any values which are frames are treated as hierarchical sections.}}}
	object : Template {
		{{{The root path for all the sections in the INI file.}}}
		prefix : ""
		{{{The separator between hierarchical paths. This varies depending on the program.}}}
		heirarchy_separator : "\\"

		value :
			(For arg : args, arg_name : Name
				Where !(arg Is Frame)
				Reduce acc & "\n" & arg_name & "=" &
					(If arg Is Bool Then (If arg Then "true" Else "false")
					Else If arg Is Str Then "\"" & utils_lib.str_escape(arg, transformations : ini.escape_transform) & "\""
					Else arg To Str)
				With acc : "") &
			(For arg : args, arg_name : Name
				Where arg Is Frame
				Reduce acc & "\n" & "[" & prefix & arg_name & "]\n" & ini.object(args : arg, prefix : prefix & arg_name & heirarchy_separator, heirarchy_separator : heirarchy_separator)
				With acc : "")
	}
}
{{{Tools for generation JavaScript Object Notation files.}}}
json : {
	{{{Escaping conventions used by JSON files}}}
	escape_transform_tmpl : Template {
		backslash : utils_lib.str_transform.char_tmpl { char : "\\"  replacement : "\\\\" }
		backspace : utils_lib.str_transform.char_tmpl { char : "\b"  replacement : "\\b" }
		formfeed : utils_lib.str_transform.char_tmpl { char : "\f"  replacement : "\\f" }
		newline : utils_lib.str_transform.char_tmpl { char : "\n"  replacement : "\\n" }
		null : utils_lib.str_transform.char_tmpl { char : "\x00"  replacement : "\\u0000" }
		quote : utils_lib.str_transform.char_tmpl { char : "\""  replacement : "\\\"" }
		return : utils_lib.str_transform.char_tmpl { char : "\r"  replacement : "\\r" }
		tab : utils_lib.str_transform.char_tmpl { char : "\t"  replacement : "\\t" }
		nonprint : utils_lib.str_transform.range_tmpl { start : "\x00"  end : "\x1F"  replacement : [ "\\u", utf16_0 ] }
	}

	{{{The default escaping transformations, for use with \{utils_lib.str_escape}.}}}
	escape_transform : escape_transform_tmpl {}

	{{{Produce a list of other JSON fragments.}}}
	list : Template scalar {
		{{{A list of JSON elements (list, object, or scalar).}}}
		children : Required
		{{{The key for the JSON element, or null to use the attribute name.}}}
		json_name : Null

		{{{The rendered JSON string.}}}
		json_value :
			(For child : children, position : Ordinal
			Reduce acc & (If position == 1 Then "" Else ", ") & child.json_value
			With acc : "[") &
			"]"
	}
	{{{Produce an object containing key-value pairs}}}
	object : Template scalar {
		{{{A list of JSON elements (list, object, or scalar). Attribute names will be used as JSON object keys.}}}
		children : Required
		{{{The key for the JSON element, or null to use the attribute name.}}}
		json_name : Null

		{{{The rendered JSON string.}}}
		json_value :
			(For child : children, arg_name : Name, position : Ordinal
			Reduce acc & (If position == 1 Then "" Else ", ") & "\"" & (child.json_name ?? arg_name) & "\":" & child.json_value
			With acc : "{") & "}"
	}
	{{{Produce a single JSON value}}}
	scalar : Template {
		{{{The value to be converted. Most Flabbergast types will be mapped automatically.}}}
		arg : Required
		{{{The key for the JSON element, or null to use the attribute name.}}}
		json_name : Null
		json_value :
				If arg Is Str Then "\"" & utils_lib.str_escape(arg, transformations : json.escape_transform) & "\""
				Else If arg Is Null Then "null"
				Else If arg Is Bool Then (If arg Then "true" Else "false")
				Else If arg Is Int || arg Is Float Then arg To Str
				Else Error "Cannot JSONulate value."
	}
}
{{{Tools for generating Python object representations}}}
python : {
	{{{Escaping conventions used by normal Python strings}}}
	escape_transform_tmpl : Template {
		backslash : utils_lib.str_transform.char_tmpl { char : "\\"  replacement : "\\\\" }
		backspace : utils_lib.str_transform.char_tmpl { char : "\b"  replacement : "\\b" }
		bell : utils_lib.str_transform.char_tmpl { char : "\a"  replacement : "\\a" }
		formfeed : utils_lib.str_transform.char_tmpl { char : "\f"  replacement : "\\f" }
		newline : utils_lib.str_transform.char_tmpl { char : "\n"  replacement : "\\n" }
		null : utils_lib.str_transform.char_tmpl { char : "\x00"  replacement : "\\u0000" }
		quote : utils_lib.str_transform.char_tmpl { char : "\""  replacement : "\\\"" }
		return : utils_lib.str_transform.char_tmpl { char : "\r"  replacement : "\\r" }
		tab : utils_lib.str_transform.char_tmpl { char : "\t"  replacement : "\\t" }
		vertical_tab : utils_lib.str_transform.char_tmpl { char : "\v"  replacement : "\\v" }
		nonprint : utils_lib.str_transform.range_tmpl { start : "\x00"  end : "\x1F"  replacement : [ "\\x", utf8_0 ] }
	}

	{{{Escaping conventions used by multi-line Python strings}}}
	escape_multiline_transform_tmpl : Template escape_transform_tmpl {
		# We replace newline with itself to keep it out of `nonprint`.
		newline : utils_lib.str_transform.char_tmpl { char : "\n"  replacement : "\n" }
	}

	{{{The default escaping transformations, for use with \{utils_lib.str_escape}.}}}
	escape_multiline_transform : escape_multiline_transform_tmpl {}

	{{{The multi-line escaping transfromations, for use with \{utils_lib.str_escape}.}}}
	escape_transform : escape_transform_tmpl {}

	{{{Convenience template for generating Pystachio objects}}}
	object : Template {
		{{{The Python object name.}}}
		python_type : Required
		{{{The attributes, which have been type checked, that will be assigned to the Python object.}}}
		literal_attrs : []
		{{{The attributes, which will be converted to escaped strings, that will be assigned to the Python object.}}}
		string_attrs : []
		{{{The attributes, which will be converted to multi-line escaped strings, that will be assigned to the Python object.}}}
		multiline_string_attrs : []

		{{{The present indentation level. At the top level, this should be overriden to the empty string.}}}
		python_indent : Lookup python_indent In Container & "\t"

		converted_literal_attrs :
			For attr_name : Name, attr : literal_attrs
				Where !(attr Is Null)
				Select attr_name : If attr Is Frame Then attr.python_value Else attr To Str
		converted_string_attrs :
			For attr_name : Name, attr : string_attrs
				Where !(attr Is Null)
				Select attr_name : "\"" & utils_lib.str_escape(attr, transformations : python.escape_transform) & "\""
		converted_multiline_string_attrs :
			For attr_name : Name, attr : multiline_string_attrs
				Where !(attr Is Null)
				Select attr_name : "\"\"\"" & utils_lib.str_escape(attr, transformations : python.escape_multiline_transform) & "\"\"\""

		python_attrs : For attr_name : Name, literal_attr : converted_literal_attrs, str_attr : converted_string_attrs, ml_str_attr : converted_multiline_string_attrs
			Select attr_name : {
					literal_count : If literal_attr Is Null Then 0 Else 1
					str_count : If str_attr Is Null Then 0 Else 1
					ml_str_count : If ml_str_attr Is Null Then 0 Else 1
					attr : ((literal_attr ?? str_attr) ?? ml_str_attr) Enforce Str
					value : "\n\(python_indent)\(attr_name) = \(attr),"
					ok :
						If literal_count Enforce Int + str_count Enforce Int + ml_str_count Enforce Int > 1
							Then Error "Attribute \(attr_name) is multiply defined for Python object \(python_type)."
							Else Null
			}
		{{{The rendered Python object}}}
		python_value :
			(For attr : python_attrs
				Reduce acc & attr.value
				With acc : "\(python_type)(") & "\n" & python_indent & ")"
	}
}
{{{Tools for generation XML documents}}}
xml : {
	{{{An XML attribute found in an \{element}.}}}
	attribute : Template {
		{{{The XML unqualified name for the attribute.}}}
		attr_name : Required
		{{{The value for the attribute.}}}
		attr_value : Required
		{{{The namespace to which this attribute belongs. If null, it belongs to
		the default namespace.}}}
		xml_ns : Used

		xml_attr :
			(If xml_ns Is Null Then "" Else "\(xml_ns.qname):") &
			"\(attr_name)=\"\(utils_lib.str_escape(attr_value, transformations : xml.escape_transform))\""
	}
	{{{A comment in the XML document.}}}
	comment : Template {
		content : Required
		xml_value : "<!-- " & utils_lib.str_escape(content, transformations : xml.escape_transform) & " -->"
	}
	{{{An XML document.}}}
	document : Template {
		{{{The root XML element.}}}
		root : Required
		{{{A collection of namespaces. The attribute names function as the prefix and the value as the URI.}}}
		namespaces : Template {}
		{{{The default XML namespace for the document.}}}
		xml_ns : Null

		{{{The XML namespaces available. Any \{xml_ns} attributes should reference
		\{xml_namespace.prefix}, where \{prefix} is the prefix defined in
		\{namespaces}.}}}
		xml_namespace :
			For xml_ns_uri : namespaces {}, xml_ns_name : Name
			Select xml_ns_name : {
					name : xml_ns_name
					uri : xml_ns_uri
					xml_def : " xmlns:\(name)=\"\(uri)\""
				}

		{{{The rendered XML document.}}}
		xml_value : "<?xml version=\"1.0\" encoding=\"utf-8\"?>" & root.xml_value

		xml_root : True
	}
	{{{An element (tag) in an XML document.}}}
	element : Template {
		{{{The local name of the tag.}}}
		node_name : Required
		{{{A list of child XML nodes (elements, comments, processing instructions,
		or text) or strings (automatically treated as text nodes).}}}
		children : Required
		{{{A collection of XML attributes.}}}
		attributes : Template {}

		{{{The qualified node name.}}}
		qname : (If xml_ns Is Null Then "" Else "\(Lookup xml_ns_name In xml_ns):") & node_name
		attr_values :
			For attr : attributes {}, attr_name : Name
				Reduce
					acc & " " &
					(If attr Is Frame Then attr.xml_attr
					Else "\(attr_name)=\"\(utils_lib.str_escape(attr To Str, transformations : xml.escape_transform))\"")
			With acc : ""
		child_values :
			For child : children
			Where !(child Is Null)
			Reduce
				acc &
					(If child Is Str Then utils_lib.str_escape(child, transformations : xml.escape_transform)
					Else If child Is Frame Then child.xml_value
					Else Error "Cannot XMLise value.")
			With acc : ""
		xml_root : False
		xmlns_defs :
			If Lookup xml_root In Container
			Then
				(For def : xml_namespace
				Reduce acc & def.xml_def
				With acc : "")
			Else ""
		xml_value :
			"<\(qname)\(attr_values)\(xmlns_defs)" &
			(If child_values == ""
				Then "/>"
				Else ">\(child_values)</\(qname)>")
	}

	{{{Escaping conventions used by XML files}}}
	escape_transform_tmpl : Template {
		amp : utils_lib.str_transform.char_tmpl { char : "&"  replacement : "&amp;" }
		quot : utils_lib.str_transform.char_tmpl { char : "\""  replacement : "&quot;" }
		apos : utils_lib.str_transform.char_tmpl { char : "'"  replacement : "&apos;" }
		lt : utils_lib.str_transform.char_tmpl { char : "<"  replacement : "&gt;" }
		gt : utils_lib.str_transform.char_tmpl { char : ">"  replacement : "&lt;" }
		nonprint : utils_lib.str_transform.range_tmpl { start : "\x00"  end : "\x1F"  replacement : [ "&#", utf32, ";" ]  mode : mode_decimal }
	}

	{{{The default escaping transformations, for use with \{str_escape}.}}}
	escape_transform : escape_transform_tmpl {}

	{{{A processing instruction. The mysterious unused sauce of XML.}}}
	processing_instruction : Template {
		content : Required

		xml_value : "<?\(utils_lib.str_escape(content, transformations : xml.escape_transform))?>"
	}
	{{{A text node.}}}
	text : Template {
		content : Required
		xml_value : utils_lib.str_escape(content, transformations : xml.escape_transform)
	}
}

{{{Tools for generation YAML Ain't Markup Language documents. For details, don't see XML.}}}
yaml : {
	yaml_indent : ""
	{{{Escaping conventions used by YAML files}}}
	escape_transform_tmpl : Template {
		backslash : utils_lib.str_transform.char_tmpl { char : "\\"  replacement : "\\\\" }
		backspace : utils_lib.str_transform.char_tmpl { char : "\b"  replacement : "\\b" }
		bell : utils_lib.str_transform.char_tmpl { char : "\a"  replacement : "\\a" }
		escape : utils_lib.str_transform.char_tmpl { char : "\x33"  replacement : "\\e" }
		formfeed : utils_lib.str_transform.char_tmpl { char : "\f"  replacement : "\\f" }
		newline : utils_lib.str_transform.char_tmpl { char : "\n"  replacement : "\\n" }
		null : utils_lib.str_transform.char_tmpl { char : "\x00"  replacement : "\\0" }
		quote : utils_lib.str_transform.char_tmpl { char : "\""  replacement : "\\\"" }
		return : utils_lib.str_transform.char_tmpl { char : "\r"  replacement : "\\r" }
		tab : utils_lib.str_transform.char_tmpl { char : "\t"  replacement : "\\t" }
		vtab : utils_lib.str_transform.char_tmpl { char : "\v"  replacement : "\\v" }
		nonprint : utils_lib.str_transform.range_tmpl { start : "\x00"  end : "\x1F"  replacement : [ "\\", utf8_0 ] }
	}

	{{{The default escaping transformations, for use with \{str_escape}.}}}
	escape_transform : escape_transform_tmpl {}

	{{{Produce a list of other YAML fragments.}}}
	list : Template {
		{{{A list of YAML elements (list, object, or scalar).}}}
		children : Required

		yaml_indent : parent_yaml_indent & "  "
		parent_yaml_indent : Lookup yaml_indent In Container

		{{{The rendered YAML string.}}}
		yaml_value :
			For child : children
			Reduce acc & parent_yaml_indent & "- " & child.yaml_value & "\n"
			With acc : "\n"
	}
	{{{Produce an object containing key-value pairs}}}
	object : Template {
		{{{A list of YAML elements (list, object, or scalar). Attribute names will be used as YAML keys.}}}
		children : Required
		yaml_indent : parent_yaml_indent & "  "
		parent_yaml_indent : Lookup yaml_indent In Container

		{{{The rendered YAML string.}}}
		yaml_value :
			For child : children, arg_name : Name
			Reduce acc & parent_yaml_indent & arg_name & ": " & child.yaml_value & "\n"
			With acc : "\n"
	}
	{{{Produce a single YAML value}}}
	scalar : Template {
		{{{The value to be converted. Most Flabbergast types will be mapped automatically.}}}
		arg : Required
		yaml_value :
				If arg Is Str Then "\"" & utils_lib.str_escape(arg, transformations : yaml.escape_transform) & "\""
				Else If arg Is Null Then "null"
				Else If arg Is Bool Then (If arg Then "true" Else "false")
				Else If arg Is Int || arg Is Float Then arg To Str
				Else Error "Cannot YAMLise value."
	}
}
