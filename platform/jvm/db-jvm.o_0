db_lib : From lib:db
ar_lib : From lib:unix/ar
value : (ar_lib.archive_tmpl {
	driver_config : db_lib.driver_config_tmpl {
		driver_tmpl +: {
			parent_class : Required
			extra_ctor_params : Required
			parse_method : Required

			value : ar_lib.file_tmpl {
				file_name : camel_name Enforce Str & "UriHandler.java"
				contents : "package flabbergast;

import java.io.File;
import java.net.URI;
import java.util.List;
import java.util.Properties;
import java.util.regex.Pattern;
import org.kohsuke.MetaInfServices;

@MetaInfServices(UriService.class)
public final class \(camel_name Enforce Str)UriHandler extends \(parent_class Enforce Str) {
	public \(camel_name Enforce Str)UriHandler() {
		super(\"\(uri_schema Enforce Str)\", \"\(friendly_name Enforce Str)\"\(extra_ctor_params Enforce Str));
	}
\(parse_method Enforce Str)
	@Override
	protected void parseProperty(String name, String value, Properties output) {
		switch(name) {
" & (For param : params, param_name : Name
		Reduce acc &
			"\t\t\tcase \"\(param_name)\": " &
			(If param.validate Is Null Then "" Else "\t\t\t\tif (!Pattern.matches(\"\(param.validate Enforce Str)\", value)) { throw new IllegalArgumentException(\"The value for “\(param_name)” is not allowed.\"); }\n") &
			"\t\t\t\toutput.setProperty(\"\(param.jdbc_param)\", value);\n\t\t\t\tbreak;\n"
				With acc : "") & "
			default:
				throw new IllegalArgumentException(String.format(\"\(friendly_name Enforce Str) does not take parameter “%s”.\", name));
		}
	}
	@Override
	protected void setFixed(Properties output) {
\(For fixed_param : fixed_params Where !(fixed_param.jdbc_param Is Null) Reduce acc & "\t\toutput.setProperty(\"\(fixed_param.jdbc_param Enforce Str)\", \(fixed_param.jdbc_value));\n" With acc : "")
	}
}"
			}
		}

		file_driver +: {
			parent_class : "BaseJdbcUriService"
			extra_ctor_params : ", false"
			parse_method : "
		@Override
		protected Maybe<String> parse(URI uri, Properties properties, ResourcePathFinder finder) {
			if (!Pattern.matches(\"\(file_regex)\", uri.getSchemeSpecificPart())) {
				return Maybe.error(\"Invalid file specified.\");
			}
			return Maybe.of(\"jdbc:\(jdbc_name)\" + uri.getSchemeSpecificPart());
		}"
		}

		resource_driver +: {
			parent_class : "BaseJdbcResourceUriService"
			extra_ctor_params : For ex : extensions Reduce "\(acc), \"\(ex)\"" With acc : ""
			parse_method : "
	@Override
	protected Maybe<String> parse(File file, Properties properties) {
		return Maybe.of(\"jdbc:\(jdbc_name)\" + file.getAbsolutePath());
	}"
		}

		host_driver +: {
			parent_class : "BaseJdbcHostUriService"
			extra_ctor_params : ", \"\(jdbc_user_param)\", \"\(jdbc_password_param)\", \(default_port Enforce Int)"
			parse_method : "
	@Override
	protected Maybe<String> parse(String host, int port, String catalog, Properties properties) {
		\(If jdbc_db_param Is Null Then "" Else "properties.setProperty(\"\(jdbc_db_param)\", catalog);")
		return Maybe.of(\"jdbc:\(jdbc_name)//\" + host + \":\" + port \(If jdbc_db_param Is Null Then "+ \"/\" + catalog" Else ""));
	}"
		}
		weird_host_driver +: {
			parent_class : "BaseJdbcHostUriService"
			extra_ctor_params : ", \"\(jdbc_user_param)\", \"\(jdbc_password_param)\", \(default_port Enforce Int)"
			parse_method : "
	@Override
	protected Maybe<String> parse(String host, int port, String catalog, Properties properties) {
		return Maybe.of(String.format(\"jdbc:\(jdbc_name)\(descriptor)\", host, port, catalog));
	}"
			host_part : "%1$s"
			port_part : "%2$d"
			db_part : "%2$s"
		}
	}
	args : For driver : driver_config.value Select driver.value
}).value


