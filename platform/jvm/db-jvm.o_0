db_lib : From lib:db

driver_config : db_lib.driver_config_tmpl {
	driver_tmpl +: {
		tail : Required
		parse : Required

		value :
			"if (provider.equals(\"\(provider)\")) {\n" &
			parse Enforce Str &
			"\tif (!Arrays.asList(\(param_list Enforce Str)).containsAll(in_properties.stringPropertyNames())) { err.set(\"Unknown parameters specified.\"); return null; }\n" &
			(For param : params, param_name : Name
				Reduce acc & "\tif (in_properties.containsKey(\"\(param_name)\")) {\n" &
					(If param.validate Is Null Then "" Else "\tif (!Pattern.matches(\"\(param.validate Enforce Str)\", in_properties.getProperty(\"\(param_name)\"))) { err.set(\"The value for “\(param_name)” is not allowed.\"); return null; }\n") &
					"\t\tout_properties.setProperty(\"\(param.jdbc_param)\", in_properties.getProperty(\"\(param_name)\"));\n\t}\n"
				With acc : "") &
			(For fixed_param : fixed_params Reduce acc & "\tout_properties.setProperty(\"\(fixed_param.jdbc_param)\", \(fixed_param.jdbc_value));\n" With acc : "") &
			"\treturn \"jdbc:\(jdbc_name Enforce Str)\"\(tail Enforce Str);\n}\n"

	}

	file_driver +: {
		parse : "\nif (!Pattern.matches(\"\(file_regex)\", uri_fragment)) { err.set(\"Invalid file specified.\"); return null; }\n"
		tail : " + uri_fragment"
	}

	resource_driver +: {
		extensions_str : For ex : extensions Reduce acc & ", \"\(ex)\"" With acc : ""
		parse : "\nif (!Pattern.matches(\"^[A-Za-z0-9/]*$\", uri_fragment)) { err.set(\"Invalid resource file specified.\"); return null; }\njava.util.List<java.io.File> \(Id)_files = finder.findAll(uri_fragment\(extensions_str));\nif(\(Id)_files.size() == 0) { err.set(\"Cannot find resource “\" + uri_fragment + \"”.\"); return null; }\n"
		tail : " + \(Id)_files.get(0).getAbsolutePath()"
	}

	host_driver +: {
		parse :
			"\tString db_fragment = JdbcUriHandler.parseUri(uri_fragment, out_properties, \"\(jdbc_user_param)\", \"\(jdbc_password_param)\", \(If jdbc_db_param Is Null Then "null" Else "\"\(jdbc_db_param)\""), err);\n\tif(db_fragment == null) return null;\n"
		tail : "+ \"//\" + db_fragment"
	}
	weird_host_driver +: {
		parse :
			"\tString db_fragment = JdbcUriHandler.parseUri(uri_fragment, out_properties, \"\(jdbc_user_param)\", \"\(jdbc_password_param)\", null, err);\n\tif(db_fragment == null) return null;\n\tString[] outer = db_fragment.split(\"/\");\n\tString[] inner = outer[0].split(\":\");\n"
		tail : "+ String.format(\"descriptor\", inner[0], inner.length > 1 ? inner[1] : \"\(default_port)\", outer[1])"
		host_part : "$1"
		port_part : "$2"
		db_part : "$2"
	}
}

value : "package flabbergast;
import java.util.Arrays;
import java.util.Properties;
import java.util.regex.Pattern;
class JdbcParser {
public static String parse(String provider, String uri_fragment, Properties in_properties, Properties out_properties, ResourcePathFinder finder, Ptr<String> err) {
" &
driver_config.value &
"
err.set(String.format(\"Unknown database provider “%s”.\", provider));
return null;
}
}
"
