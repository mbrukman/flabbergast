db_lib : From lib:db

driver_config : db_lib.driver_config_tmpl {
	driver_tmpl +: {
		parse : Required

		value :
			"if (provider == \"\(provider)\") {\n" &
			"var \(Id)_factory = DbProviderFactories.GetFactory(\"\(ado_net_name Enforce Str)\");" &
			"\tvar \(Id)_builder = \(Id)_factory.CreateConnectionStringBuilder();\n" &
			parse Enforce Str &
			"\tstring[] \(Id)_defined = {\(param_list Enforce Str)};\n\tif (!in_properties.Keys.All(k => \(Id)_defined.Contains(k))) { err = \"Unknown parameters specified.\"; return null; }\n" &
			(For param : params, param_name : Name
				Reduce acc & "\tif (in_properties.ContainsKey(\"\(param_name)\")) {\n" &
					(If param.validate Is Null Then "" Else "\tif (!Regex.IsMatch(in_properties[\"\(param_name)\"], \"\(param.validate Enforce Str)\")) { err = \"The value for “\(param_name)” is not allowed.\"; return null; }\n") &
					"\t\t\(Id)_builder[\"\(param.ado_net_param)\"] = in_properties[\"\(param_name)\"];\n\t}\n"
				With acc : "") &
			(For fixed_param : fixed_params Reduce acc & "\t\(Id)_builder[\"\(fixed_param.ado_net_param)\"] = \(fixed_param.ado_net_value);\n" With acc : "") &
			"\tvar \(Id)_connection = \(Id)_factory.CreateConnection();\n\t\(Id)_connection.ConnectionString = \(Id)_builder.ConnectionString;\n\treturn \(Id)_connection;\n}\n"
	}

	file_driver +: {
		parse : "\tif (!Regex.IsMatch(uri_fragment, \"\(file_regex)\")) { err = \"Invalid file specified.\"; return null; }\n\t\(Id)_builder[\"\(ado_net_file_param)\"] = uri_fragment;\n"
	}

	resource_driver +: {
		extensions_str : For ex : extensions Reduce acc & ", \"\(ex)\"" With acc : ""
		parse : "\tif (!Regex.IsMatch(uri_fragment, \"^[A-Za-z0-9/]*$\")) { err = \"Invalid resource file specified.\"; return null; }\n\tvar \(Id)_files = finder.FindAll(uri_fragment\(extensions_str)); if (\(Id)_files.Count == 0) { err = \"Cannot find resource “\" + uri_fragment + \"”.\"; return null; } else { \(Id)_builder[\"\(ado_net_file_param)\"] = \(Id)_files[0]; }\n"
	}

	host_driver +: {
		parse :
			"\tif (!DbUriHandler.ParseUri(uri_fragment, \(Id)_builder, \"\(ado_net_server_param)\", \"\(ado_net_port_param)\", \"\(ado_net_user_param)\", \"\(ado_net_password_param)\", \"\(ado_net_db_param)\", out err)) return null;\n"
	}

	weird_host_driver +: {
		parse :
			"\tif (!DbUriHandler.ParseUri(uri_fragment, \(Id)_builder, \"\(ado_net_user_param)\", \"\(ado_net_password_param)\", (\(Id)_host, \(Id)_port, \(Id)_db) => \(Id)_builder[\"\(ado_net_descriptor_param)\"] = String.Format(\"\(descriptor)\", \(Id)_host, \(Id)_port ?? \"\(default_port)\", \(Id)_db), out err)) return null;\n"
		host_part : "{0}"
		port_part : "{1}"
		db_part : "{2}"
	}
}
value : "using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Text.RegularExpressions;
namespace Flabbergast {
class DbParser {
public static DbConnection Parse(string provider, string uri_fragment, Dictionary<string, string> in_properties, ResourcePathFinder finder, out string err) {
err = null;
" &
driver_config.value &
"
err = string.Format(\"Unknown database provider “{0}”.\", provider);
return null;
}
}
}
"

