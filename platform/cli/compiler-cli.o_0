compiler_lib : From lib:compiler

# The C# implementation of the parser. The parser definitions also create the
# class definitions. Each syntax group in the compiler becomes an abstract
# class and each syntax element derives this class. The parser generated is a
# packrat parser. The memorisation logic and state information is managed by
# code elsewhere.
#
# The parser makes heavy use of `goto` to control flow. The best strategy
# (based on a search of the literature) for error reporting in a PEG parser is
# to keep the error that occurs having consumed the most input, even if the
# parser has backed up since then. The `Update` methods record and error,
# keeping only the most extreme.
#
# In the Flabbergast compiler code, the action to be taken at the end of
# parsing is the `parse_complete` template, which takes the success state and
# indentation. Parser components can redefine `parse_complete` as needed to
# define the behaviour of their children.
parser : compiler_lib.parser_tmpl {
	nop +: {
		class_gen : ""
		copy_instance : ""
		parser_gen : parse_complete(ok : True, indent : indent )
	}
	allow_extensions +: {
		class_gen : ""
		copy_instance : ""
		parser_gen : "\(indent)if (_position.Parser.DisableExtensions) {" & parse_complete(ok : False, indent : indent & "\t") & "\(indent)}" & parse_complete(ok : True, indent : indent)
	}
	# Call `ParserPosition.Match` and record a failure otherwise.
	exact +: {
		class_gen : ""
		copy_instance : ""
		parser_gen :
			"\(indent)if (_position.Match(\"\(word)\")) {" &
			parse_complete(ok : True, indent : indent & "\t") &
			"\(indent)} else {" &
			"\(indent)\t_position.Update(\"“\(word)”\", \"\(pretty_name)\");" &
			parse_complete(ok : False, indent : indent & "\t") &
			"\(indent)}"
	}
	# Duplicate the current state of the object under parse, then parse another
	# rule, redefining `parse_complete` so the error state restores the previous
	# object under parse and then call the parent's `parse_complete` always with
	# success.
	optional +: {
		id : Id
		class_gen : of.class_gen
		copy_instance : of.copy_instance

		parse_complete : Template {
			ok : Required
			value : If ok
				Then "\(indent)goto optional_exit_\(id);"
				Else
					"\(indent)_obj = _optional_obj_\(id);" &
					"\(indent)_position = _optional_position_\(id);" &
					"\(indent)goto optional_exit_\(id);"
		}
		parser_gen :
			"\(indent)var _optional_obj_\(id) = _obj.Clone();" &
			"\(indent)ParserPosition _optional_position_\(id) = _position.Clone();" &
			of.parser_gen &
			"\(indent)optional_exit_\(id):" &
			(Lookup parse_complete In Container)(ok : True, indent : indent)
	}
	# Parse a number of items by parsing each item in sequence. If an error
	# occurs, a flag is set and flow is short circuited to the end. At the end,
	# the error flag is checked and the appropriate `parse_complete` is invoked.
	sequence +: {
		id : Id
		class_gen : For x : of Where !(x Is Null) Reduce acc & x.class_gen With acc : ""
		copy_instance : For x : of Where !(x Is Null) Reduce acc & x.copy_instance With acc : ""

		parent_parse_complete : Lookup parse_complete In Container
		parse_complete : Template {
			ok : Required
			value : If ok Then "" Else "\(indent)_sequence_fail_\(id) = true;\(indent)goto _sequence_end_\(id);"
		}
		parser_gen :
			"\(indent)bool _sequence_fail_\(id) = false;" &
			(For x : of Where !(x Is Null) Reduce acc & x.parser_gen With acc : "") &
			"\(indent)_sequence_end_\(id):" &
			"\(indent)if (_sequence_fail_\(id)) {"&
			parent_parse_complete(ok : False, indent : indent & "\t") &
			"\(indent)} else {" &
			parent_parse_complete(ok : True, indent : indent & "\t") &
			"\(indent)}"
	}
	# Parse a list of items. Inside an endless loop, the object state is copied,
	# then, if this is not the first iteration, the separator is parsed, then the
	# main parse action. If an error occurred, the object state is restored and
	# the loop exited. There is no “success” case that exits the loop.
	many +: {
		id : Id
		class_gen : of.class_gen & (If separator Is Null Then "" Else separator.class_gen)
		copy_instance : of.copy_instance & (If separator Is Null Then "" Else separator.copy_instance)

		parent_indent : Lookup indent In Container
		indent : parent_indent & "\t"

		parent_parse_complete : Lookup parse_complete In Container
		pok : parent_parse_complete(ok : True, indent : indent)
		perr : parent_parse_complete(ok : False, indent : indent)
		parse_complete : Template {
			ok : Required
			value: If ok Then "" Else "\(indent)_position = _many_position_\(id);\(indent)_obj = _many_obj_\(id);\(indent)break;"
		}
		need_first : nonempty || !(separator Is Null)
		parser_gen :
			(If need_first Then "\(parent_indent)bool _first_\(id) = true;" Else "") &
			"\(parent_indent)while(true) {" &
			"\(indent)ParserPosition _many_position_\(id) = _position.Clone();" &
			"\(indent)var _many_obj_\(id) = _obj.Clone();" &
			(If separator Is Null Then "" Else "\(indent)if (!_first_\(id)) {\(separator.parser_gen)\(indent)}") &
			of.parser_gen &
			(If need_first Then "\(indent)_first_\(id) = false;" Else "") &
			"\(parent_indent)}" &
			(If nonempty
				Then
					"\(parent_indent)if (_first_\(id)) {" &
					perr &
					"\(parent_indent)} else {" &
					pok &
					"\(parent_indent)}"
				Else pok)
	}
	# Parse exactly one path. For each path, the current object state is
	# duplicated, the parse action performed. If successful, all other paths are
	# ignored. If it fails, the stored state is restored and the next path is
	# attempted. If all paths are exhausted, the parent's `parse_complete` is
	# called with failure.
	alternate +: {
		id : Id
		class_gen : For x : of Reduce acc & x.class_gen With acc : ""
		copy_instance : For x : of Reduce acc & x.copy_instance With acc : ""

		parent_indent : Lookup indent In Container
		indent : parent_indent & "\t"

		parent_parse_complete : Lookup parse_complete In Container
		pok : parent_parse_complete(ok : True, indent : indent)
		perr : parent_parse_complete(ok : False, indent : indent)
		parse_complete : Template {
			ok : Required
			value : If ok
				Then "\(indent)_alternate_success_\(id) = true;"
				Else "\(indent)_position = _alt_position_\(id);\(indent)_obj = _alt_obj_\(id);"
		}
		parser_gen :
			"\(parent_indent)bool _alternate_success_\(id) = false;" &
			"\(parent_indent)ParserPosition _alt_position_\(id) = _position;" &
			"\(parent_indent)var _alt_obj_\(id) = _obj;" &
			(For x : of
				Reduce acc &
					"\(parent_indent)if (!_alternate_success_\(id)) {" &
					"\(indent)_position = _alt_position_\(id).Clone();" &
					"\(indent)_obj = _alt_obj_\(id).Clone();" &
					x.parser_gen &
					"\(parent_indent)}"
				With acc : "") &
			"\(parent_indent)if (_alternate_success_\(id)) {" &
			pok &
			"\(parent_indent)} else {" &
			perr &
			"\(parent_indent)}"
	}
	# Parse characters in an certain band. This simply reads the next character
	# and checks its numerical value, then invokes `parse_complete`.
	range +: {
		class_gen : ""
		copy_instance : ""
		pok : parse_complete(ok : True, indent : indent & "\t")
		perr :
			"\(indent)\t_position.Update(\"character between “\(from)” and “\(to)”\", \"\(pretty_name)\");" &
			parse_complete(ok : False, indent : indent & "\t")
		acc : If accumulate
			Then (accumulate_char { input : "_position.PeekLast()" }).value
			Else ""
		parser_gen :
			"\(indent)if (_position.Next() >= '\(from)' && _position.PeekLast() <= '\(to)') {" &
			acc & pok &
			"\(indent)} else {" &
			perr &
			"\(indent)}"
	}
	# Simply read a character from the parse stream.
	single +: {
		class_gen : ""
		copy_instance : ""
		acc : If accumulate
			Then (accumulate_char { input : "_position.PeekLast()"  indent : Lookup indent In Container & "\t"}).value
			Else ""
		parser_gen : "\(indent)if (\"\(char)\".IndexOf(_position.Next()) \(If invert_match Then "==" Else "!=") -1) {" &
			acc & parse_complete(ok : True, indent : indent & "\t") &
			"\(indent)} else {" &
			"\(indent)\t_position.Update(Parser.ToLiteral(\"\(char)\"), \"\(pretty_name)\");" &
			parse_complete(ok : False, indent : indent & "\t") &
			"\(indent)}"
	}
	# Parse a character and check its Unicode class. All the real work is done by
	# the system libraries.
	char_class +: {
		class_gen : ""
		copy_instance : ""

		acc : If accumulate
			Then (accumulate_char { input : "_position.PeekLast()"  indent : Lookup indent In Container & "\t"}).value
			Else ""

		match_expr :
			For class : classes
			Reduce
				"\(acc) || char_class_\(Id) == System.Globalization.UnicodeCategory.\(class.enum)"
			With acc : "false"

		accepted_names :
			For class : classes
			Reduce
				If acc Is Null
					Then class.name
					Else (acc & " or " & class.name)
			With acc : Null

		parser_gen :
			"\(indent)var char_class_\(Id) = System.Char.GetUnicodeCategory(_position.Next());" &
			"\(indent)if (" &
			(If invert_match Then "!(\(match_expr))" Else match_expr) &
			") {" &
			acc & parse_complete(ok : True, indent : indent & "\t") &
			"\(indent)} else {" &
			"\(indent)\t_position.Update(\"character \(If invert_match Then "not " Else "")of type \(accepted_names ?? "unknown")\", \"\(pretty_name)\");" &
			parse_complete(ok : False, indent : indent & "\t") &
			"\(indent)}"

		letter_lower : { name : "lower-case letter"  enum : "LowercaseLetter" }
		letter_modifier : { name : "modifier letter"  enum : "ModifierLetter" }
		letter_other : { name : "other letter"  enum : "OtherLetter" }
		letter_title : { name : "title-case letter"  enum : "TitlecaseLetter" }
		letter_upper : { name : "upper-case letter"  enum : "UppercaseLetter" }
		mark_combining : { name : "spacing combining mark"  enum : "SpacingCombiningMark" }
		mark_enclosing : { name : "enclosing mark"  enum : "EnclosingMark" }
		mark_nonspace : { name : "non-spaching modification mark"  enum : "NonSpacingMark" }
		number_decimal : { name : "decimal numeral"  enum : "DecimalDigitNumber" }
		number_letter : { name : "letter-like numeral"  enum : "LetterNumber" }
		number_other : { name : "other number"  enum : "iOtherNumber" }
		other_control : { name : "control code"  enum : "Control" }
		other_format : { name : "format layout"  enum : "Format" }
		other_private : { name : "private use"  enum : "PrivateUse" }
		other_surrogate : { name : "surrogate"  enum : "Surrogate" }
		other_unassigned : { name : "unassigned"  enum : "OtherNotAssigned" }
		punctuation_connector : { name : "connecting punctuation"  enum : "ConnectorPunctuation" }
		punctuation_dash : { name : "dash"  enum : "DashPunctuation" }
		punctuation_final_quote : { name : "closing qutation mark"  enum : "FinalQuotePunctuation" }
		punctuation_initial_quote : { name : "opening quotation mark"  enum : "InitialQuotePunctuation" }
		punctuation_other : { name : "miscellaneous punctuation"  enum : "OtherPunctuation" }
		punctuation_start : { name : "starting punctuation"  enum : "OpenPunctuation" }
		separator_line : { name : "line separator"  enum : "LineSeparator" }
		separator_paragraph : { name : "paragraph separator"  enum : "ParagraphSeparator" }
		separator_space : { name : "space"  enum : "SpaceSeparator" }
		symbol_currency : { name : "currency"  enum : "CurrencySymbol" }
		symbol_math : { name : "mathematical operator"  enum : "MathSymbol" }
		symbol_modifier : { name : "modifier symbol"  enum : "ModifierSymbol" }
		symbol_other : { name : "miscellanous symbol"  enum : "OtherSymbol" }
	}
	# Peek a head in the buffer and make sure the buffer is either empty or the
	# next character doesn't occur in the specified set of characters.
	except +: {
		class_gen : ""
		copy_instance : ""
		parser_gen : "\(indent)if (_position.Index >= _position.Parser.Input.Length || \"\(char)\".IndexOf(_position.Parser.Input[_position.Index]) == -1) {" &
			parse_complete(ok : True, indent : indent & "\t") &
			"\(indent)} else {" &
			"\(indent)\t_position.Update(\"anything except \" + Parser.ToLiteral(\"\(char)\"), \"\(pretty_name)\");" &
			parse_complete(ok : False, indent : indent & "\t") &
			"\(indent)}"
	}
	# Define a field for a long integer and, for each character accumulated, do a
	# multiply-and-accumulate operation on the field.
	accumulate_integer +: {
		require_definition :
				For common_field : Name, common_type : expanded_common
				Where common_field == field
				Reduce False
				With acc : True
		class_gen : If require_definition Then "\tinternal long " & field & ";\n" & in.class_gen Else ""
		copy_instance : If require_definition Then "\t\t_obj.\(field) = \(field);\n" & in.copy_instance Else ""

		accumulate_char : Template {
			input : Required
			value : "\(indent)_obj.\(field) = _obj.\(field) * \(multiplier) + (\(input) - \(offset));"
		}
		parser_gen : in.parser_gen
	}
	# This is similar to `accumulate_integer`, but the accumulation is done in a
	# local variable and then converted to a Unicode character in a field.
	#
	# Because this uses a local buffer, it is fragile when combined with
	# `optional` or `alternate`, since they can turn failure into success,
	# allowing a buffer that should be discarded to be saved.
	accumulate_unichar_integer +: {
		unicode_accumulate_char : "_unicode_acc_" & Id
		class_gen : ""
		copy_instance : ""

		parent_parse_complete : Lookup parse_complete In Container
		parent_unicode_accumulate_char : Lookup accumulate_char In Container
		parse_complete : Template {
			ok : Required
			save_char : (parent_unicode_accumulate_char { input : "System.Char.ConvertFromUtf32(" & unicode_accumulate_char & ")[0]" }).value
			pok : parent_parse_complete(ok : True, indent : indent)
			perr : parent_parse_complete(ok : False, indent : indent)
			value : If ok Then (save_char & pok) Else perr
		}
		accumulate_char : Template {
			input : Required
			value : "\(indent)\(unicode_accumulate_char) = \(unicode_accumulate_char) * \(multiplier) + (\(input) - \(offset));"
		}
		parser_gen : "\(indent)int \(unicode_accumulate_char) = \(initial);" & in.parser_gen
	}
	# Accumulates a float. Doing character-at-a-time float conversion is
	# impractical when compared to integers. It there for accumulates into a text
	# buffer, then uses the system's float parser to do the work.
	#
	# Because this uses a local buffer, it is fragile when combined with
	# `optional` or `alternate`, since they can turn failure into success,
	# allowing a buffer that should be discarded to be saved.
	accumulate_float +: {
		require_definition :
			For common_field : Name, common_type : expanded_common
			Where common_field == field
			Reduce False
			With acc : True
		class_gen : If require_definition Then "\tinternal double " & field & ";\n" & in.class_gen Else ""
		copy_instance : If require_definition Then "\t\t_obj.\(field) = \(field);\n" & in.copy_instance Else ""

		float_accumulate_buffer : "_float_acc_" & Id
		accumulate_char : Template {
			input : Required
			value : indent & float_accumulate_buffer & " = new RevCons<char>(" & input & ", " & float_accumulate_buffer & ");"
		}
		parent_parse_complete : Lookup parse_complete In Container
		parse_complete : Template {
			ok : Required
			value : If ok
				Then
					"\(indent)if (System.Double.TryParse(Generator.ToString(\(float_accumulate_buffer)), out _obj.\(field))) {" &
					pok &
					"\(indent)} else {" &
					perr &
					"\(indent)}"
				Else perr
			pok : parent_parse_complete(ok : True, indent : indent & "\t")
			perr : parent_parse_complete(ok : False, indent : indent & "\t")
		}
		parser_gen : "RevCons<char> \(float_accumulate_buffer) = null;" & in.parser_gen
	}
	# Accumulates items into a list. There is a second buffer to prevent
	# duplication, prepopulated with forbidden values.
	accumulate_list +: {
		require_definition : If field Is Null Then False Else
			(For common_field : Name, common_type : expanded_common Where common_field == field Reduce False With acc : True)
		forbidden_pairs : For f : forbid Reduce acc & "{ " & (If f Is Str Then "\"\(f)\"" Else f) & ", true}," With acc : ""
		class_gen :
			(If require_definition
				Then
					"\tinternal System.Collections.Generic.List<\(type)> \(field) = new System.Collections.Generic.List<\(type)>();\n" &
					(If deduplicate Is Null
						Then ""
						Else "\tinternal System.Collections.Generic.Dictionary<\(deduplicate.dedup_type), bool> \(field)_dedup = new System.Collections.Generic.Dictionary<\(deduplicate.dedup_type), bool>{\(forbidden_pairs)};\n")
				Else "") & in.class_gen
		copy_instance :
			(If require_definition
				Then
					"\t\t_obj.\(field).AddRange(\(field));\n" &
					(If deduplicate Is Null Then "" Else "\t\tforeach(var _element in \(field)_dedup.Keys) _obj.\(field)_dedup[_element] = true;\n")
				Else "")
				& in.copy_instance
		parser_gen : in.parser_gen
	}
	# Accumulates characters into a string builder.
	accumulate_string +: {
		require_definition : If field Is Null Then False Else
			(For common_field : Name, common_type : expanded_common Where common_field == field Reduce False With acc : True)
		class_gen : If require_definition Then "\tinternal RevCons<char> " & field & " = null;\n" & in.class_gen Else ""
		copy_instance : If require_definition
			Then "\t\t_obj.\(field) = \(field);\n" & in.copy_instance
			Else ""

		accumulate_char : Template {
			input : Required
			value : "\(indent)_obj.\(field) = new RevCons<char>(\(input), _obj.\(field));"
		}
		parser_gen : in.parser_gen
	}
	# Accumulates a character from a numeric literal.
	collect_codepoint +: {
		class_gen : in.class_gen
		copy_instance : in.copy_instance

		parent_parse_complete : Lookup parse_complete In Container
		parse_complete : Template {
			ok : Required
			char_iter : Id & "_c"
			value : If ok
				Then
					"\(indent)foreach (var \(char_iter) in System.Char.ConvertFromUtf32(\(codepoint))) {" &
					(accumulate_char { input : char_iter }).value &
					"\(indent)}" &
					parent_parse_complete(ok : True, indent : indent)
				Else parent_parse_complete(ok : False, indent : indent)
		}
		parser_gen : in.parser_gen
	}
	# Calls another parse rule, passing a reference to our current state to the
	# other rule. The rule may change either the parse state object or instance
	# to which the reference refers.
	#
	# There's a mess to handle parsing into lists versus fields and to handle
	# de-duplication in lists.
	other +: {
		require_definition : If field Is Null Then False Else
			(For common_field : Name, common_type : expanded_common Where common_field == field Reduce False With acc : True)
		class_gen : If require_definition Then "\tinternal \(type) \(field);\n" Else ""
		copy_instance : If require_definition Then "\t\t_obj.\(field) = \(field);\n" Else ""

		pok : ((Lookup parse_complete In Container) { ok : True }).value
		perr : ((Lookup parse_complete In Container) { ok : False }).value
		target_rule :
			Let base : "\(type).ParseRule_\(alternate ?? "Base")"
			In
				If field Is Null && !(deduplicate Is Null)
				Then
					Let dedup_container : "_obj." & Lookup field In Container & "_dedup"
					In "(ref ParserPosition _iposition, out \(type) _iresult) => { if (\(base)(ref _iposition, out _iresult)) { var \(Id)_key = \(deduplicate.dedup_transform)(_iresult.\(Lookup field_name In deduplicate Enforce Str)); if (\(dedup_container).ContainsKey(\(Id)_key)) { _iposition.NameConstraint(\(Id)_key); return false; } else { \(dedup_container)[\(Id)_key] = true; return true; } } else { return false; } }"
				Else base
		parse_call : If field Is Null
			Then "ParserPosition.ParseIntoList(ref _position, _obj.\(Lookup field In Container), \(target_rule))"
			Else "\(target_rule)(ref _position, out _obj.\(field))"
		parser_gen : "\(indent)if (\(parse_call)) {\(pok)\(indent)} else {\(perr)\(indent)}"
	}
}
# Some times, different parse rules should share fields across classes. These
# define the rules.
common_fields : compiler_lib.common_fields_tmpl {
	str +: {
		class_gen : "\tinternal RevCons<char> \(field_name) = null;\n"
		copy_instance : "\t\t_obj.\(field_name) = \(field_name);\n"
		dedup_type : "string"
		dedup_transform : "Generator.ToString"
	}
	int +: {
		class_gen : "\tinternal long \(field_name);\n"
		copy_instance : "\t\t_obj.\(field_name) = \(field_name);\n"
		dedup_type : "int"
		dedup_transform : ""
	}
	float +: {
		class_gen : "\tinternal double \(field_name);\n"
		copy_instance : "\t\t_obj.\(field_name) = \(field_name);\n"
		dedup_type : "float"
		dedup_transform : ""
	}
	other +: {
		class_gen : "\tinternal \(type) \(field_name);\n"
		copy_instance : "\t\t_obj.\(field_name) = \(field_name);\n"
		dedup_type : type
		dedup_transform : ""
	}
}

# When making copies of a syntax node, the code to copy all support fields not
# defined in the compiler proper.
static_copy_instance : For field : [ "StartRow", "EndRow", "StartColumn", "EndColumn", "FileName" ]
	Reduce acc & "\t\t_obj.\(field) = \(field);\n" With acc : ""

# Definitions for environment-handling code. Most of the environment code is
# defined in the `Environment` and `NameInfo` classes.
environment : compiler_lib.environment_tmpl {
	collect +: {
		class_gen : ""
		value : "\t\t_return = \(current_environment);\n"
	}
	other_elements +: {
		class_gen : ""
		value : For field : fields
			Reduce acc & "\t\tif (\(field) != null) { \(field).PropagateEnvironment(_collector, _queue, \(current_environment), ref _success); }\n"
			With acc : ""
	}
	other_with_result +: {
		current_environment : name
		class_gen :
			For application : apply_to
				Where !(application Is Null)
				Reduce acc & application.class_gen
				With acc :
					If name Is Null
						Then ""
						Else "\tEnvironment \(name);\n"
		value :
			"\t\tif (_return != null) throw new System.InvalidOperationException(\"Refusing to overwrite return value.\");\n" &
			"\t\tif (\(field) == null) throw new System.InvalidOperationException(\"Field \(field) in \(rule_name) is empty.\");\n" &
			"\t\t\(current_environment) = \(field).PropagateEnvironment(_collector, _queue, \(Lookup current_environment In Container), ref _success);\n" &
			"\t\tif (\(current_environment) == null) throw new System.InvalidOperationException(\"Field \(field) in \(rule_name) did not collect and environment.\");\n" &
			(For application : apply_to
				Where !(application Is Null)
				Reduce acc & application.value
				With acc : "")

	}
	list_of +: {
		class_gen : ""
		value : "\t\tif (\(field) != null) { foreach (var \(Id) in \(field)) \(Id).PropagateEnvironment(_collector, _queue, \(current_environment), ref _success); }\n"
	}
	list_independent +: {
		class_gen : ""
		value : "\t\tif (\(field) != null) { foreach (var \(Id) in \(field)) \(Id).PropagateEnvironment(_collector, _queue, new Environment(\(Id).FileName, \(Id).StartRow, \(Id).StartColumn, \(Id).EndRow, \(Id).EndColumn, \(If inherit Then current_environment Else "null"), false, \(If top_level Then "true" Else "false")), ref _success); }\n"
	}
	blank_environment +: {
		current_environment : name
		class_gen :
			For application : apply_to
				Where !(application Is Null)
				Reduce acc & application.class_gen
				With acc : "\tEnvironment \(name);\n"

		value :
			"\t\t\(name) = new Environment(FileName, StartRow, StartColumn, EndRow, EndColumn, null, false);\n" &
			(For application : apply_to
				Where !(application Is Null)
				Reduce acc & application.value
				With acc : "")
	}
	modified_environment +: {
		current_environment : name
		class_gen :
			(For application : apply_to
				Where !(application Is Null)
				Reduce acc & application.class_gen
				With acc : "\tEnvironment \(name);\n") &
			(For special_name : special_names
				Reduce acc & special_name.class_gen
				With acc : "")
		value :
			"\t\t\(name) = new Environment(FileName, StartRow, StartColumn, EndRow, EndColumn, \(Lookup current_environment In Container), \(If force_back Then "true" Else "false"));\n" &
			(For special_name : special_names Reduce acc & special_name.value With acc : "") &
			(For application : apply_to
				Where !(application Is Null)
				Reduce acc & application.value
				With acc : "")

		masks_from_definitions +: {
			value : "\t\tif (\(field) != null) foreach (var \(Id) in \(field)) {\n" &
				"\t\t\t\(Id).AddMask(_collector, \(current_environment));\n" &
				"\t\t}\n"
			class_gen : ""
		}
		mask_from_fields +: {
			value : "\t\t\(type_storage) = \(current_environment).AddMask(Generator.ToString(\(name_field)), \(expr_field));\n"
			class_gen : "\tRestrictableType \(type_storage);\n"
		}
		override_name_from_field +: {
			value : "\t\t\(type_storage) = \(current_environment).AddOverrideName(Generator.ToString(\(field)));\n"
			class_gen : "\tRestrictableType \(type_storage);\n"
		}
		forbidden_name +: {
			value : "\t\t\(current_environment).AddForbiddenName(\"\(name)\");\n"
			class_gen : ""
		}
		forbidden_name_from_field +: {
			value : "\t\t\(current_environment).AddForbiddenName(Generator.ToString(\(field)));\n"
			class_gen : ""
		}
	}
	top_level +: {
		class_gen : ""
		value : "\t\tif (\(current_environment).TopLevel != \(If desired Then "true" Else "false")) { _success = false; _collector.ReportRawError(this, \"At file-level scope, \(pretty_name) is now allowed.\"); }"
	}
}
# The correspondence between Flabbergast types in the compiler and their
# implementation types (a.k.a. `real_type`) and the flag used in the union
# types used by the environments to propagate type information (a.k.a.
# `union_type`).
known_types : compiler_lib.known_types_tmpl {
	bin : {
		union_type : "Flabbergast.Type.Bin"
		real_type : "byte[]"
		name : "Bin"
		unbox : True
	}
	bool : {
		union_type : "Flabbergast.Type.Bool"
		real_type : "bool"
		name : "Bool"
		max : "true"
		min : "false"
		constant_creator : "BoolConstant"
		unbox : True
	}
	float : {
		union_type : "Flabbergast.Type.Float"
		real_type : "double"
		name : "Float"
		max : "System.Double.MaxValue"
		min : "System.Double.MinValue"
		constant_creator : "FloatConstant"
		unbox : True
	}
	frame : {
		union_type : "Flabbergast.Type.Frame"
		real_type : "Flabbergast.Frame"
		name : "Frame"
		unbox : True
	}
	int : {
		union_type : "Flabbergast.Type.Int"
		real_type : "long"
		name : "Int"
		max : "System.Int64.MaxValue"
		min : "System.Int64.MinValue"
		constant_creator : "IntConstant"
		unbox : True
	}
	str : {
		union_type : "Flabbergast.Type.Str"
		real_type : "Flabbergast.Stringish"
		name : "Str"
		unbox : False
	}
	template : {
		union_type : "Flabbergast.Type.Template"
		real_type : "Flabbergast.Template"
		name : "Template"
		unbox : True
	}
	null : {
		union_type : "Flabbergast.Type.Unit"
		real_type : "Flabbergast.Unit"
		name : "Null"
		unbox : True
	}
}
# These are types known by the KWS VM that are not found in the Flabbergast
# language. Therefore, they have a `real_type`, but not a `union_type`.
known_vm_types : compiler_lib.known_vm_types_tmpl {
	any : { real_type : "object"  union_type : "Flabbergast.NameInfo.AnyType"  name : "Any" }
	mutable_frame : { real_type : "Flabbergast.MutableFrame"  name : "Frame" }
	list : { real_type : "Flabbergast.Context"  name : "List" }
	function : { real_type : "Flabbergast.ComputeValue"  name : "Function" }
	override_function : { real_type : "Flabbergast.ComputeOverride"  name : "Override" }
}
# The mechanism code to do type checking in the compiler. Each syntax element
# is told what types it may return and it propagates this type information to
# its children. If the union is ever empty, a type error occurs, since this
# implies that there is no possible type that could satisfy this expression.
ensure_type : compiler_lib.ensure_type_tmpl {
	# Restrict the union and check if the intersection is empty.
	filter +: {
		type_bits : For t : types Reduce acc & " | " & t.union_type With acc : "0"

		parent_type : Lookup current_type In Container
		current_type : Id
		result : ensure_type_of.result

		value :
			"\(indent)var \(Id) = \(parent_type) & (\(type_bits));" &
			"\(indent)if (\(Id) == 0) {" &
			"\(indent)\t_success = false;" &
			"\(indent)\t_collector.ReportExpressionTypeError(this, \(type_bits), \(parent_type));" &
			"\(indent)}" &
			ensure_type_of.value
	}
	# Pass this type to a child node.
	propagate +: {
		allowed_type_bits : For t : extra_types Reduce acc & " | " & t.union_type With acc : current_type
		value :
			For field : fields
				Where !(field Is Null)
				Reduce acc & "\(indent)if (\(field) != null) \(Id) &= AstTypeableNode.HorrendousTypeMerge(\(field).EnsureType(_collector, \(allowed_type_bits), ref _success, \(If needs_unbox Then "true" Else current_unbox)), \(current_type));"
				With acc : "\(indent)var \(Id) =  \(current_type);"
		result : Id

	}
	# Pass this type to all child nodes in a list.
	propagate_all +: {
		allowed_type_bits : For t : extra_types Reduce acc & " | " & t.union_type With acc : current_type
		result : Id
		value :
			"\(indent)var \(Id) = NameInfo.AnyType;" &
			"\(indent)if (\(field) != null) foreach (var \(Id)_item in \(field)) \(Id) &= \(Id)_item.EnsureType(_collector, \(allowed_type_bits), ref _success, \(If needs_unbox Then "true" Else current_unbox));"
	}
	# This works similarly to filter, but takes the type from a syntax node
	# rather than a literal in the compiler.
	dynamic +: {
		parent_type : Lookup current_type In Container
		current_type : Id

		type_bits : "\(field).\(If propagate_castable Then "CastableFrom" Else "TypeId")"
		current_unbox :
			Lookup current_unbox In Container &
			(If propagate_castable Then " | \(field).Unbox" Else "")
		result : Id
		value :
			"\(indent)var \(Id) = \(parent_type) & \(type_bits);" &
			"\(indent)if (\(Id) == 0) {" &
			"\(indent)\t_success = false; " &
			"\(indent)\t_collector.ReportExpressionTypeError(this, \(type_bits), \(parent_type));" &
			"\(indent)}" &
			ensure_type_of.value
	}
	special +: {
		result : Id
		value : "\(indent)var \(Id) = \(type_storage).EnsureType(_collector, \(current_type), ref _success,  \(If needs_unbox Then "true" Else current_unbox));"
	}
	# Stores the type information in the environment by lookup name.
	stored +: {
		result : Id
		value : "\(indent)var \(Id) = Environment.Lookup(_collector, \(field).Select((s) => s.ToString()), ref _success).EnsureType(_collector, \(current_type), ref _success, \(current_unbox));"
	}
	# Stores the type information in the environment by syntax node.
	intrinsic +: {
		result : Id
		value : "\(indent)var \(Id) = Environment.EnsureIntrinsic(_collector, this, \(current_type), \(If needs_unbox Then "true" Else current_unbox), ref _success);"
	}
	single +: {
		result : ensure_type_of.result
		value :
			ensure_type_of.value &
			"\(indent)if ((\(ensure_type_of.result) & (\(ensure_type_of.result) -1 )) != 0) {" &
			"\(indent)\t_collector.ReportSingleTypeError(this, \(result));" &
			"\(indent)\t_success = false;" &
			"\(indent)}"
	}
	shared_fate +: {
		current_type : Id
		original_type : Lookup current_type In Container
		indent : parent_indent & "\t"
		parent_indent : Lookup indent In Container
		value :
			"\(parent_indent)var \(Id) = \(original_type);" &
			"\(parent_indent)for(var \(Id)_junk = 0; \(Id)_junk < 2; \(Id)_junk++) {" &
			ensure_type_of.value &
			"\(indent)\(Id) &= \(ensure_type_of.result);" &
			"\(parent_indent)}"
		result : Id
	}
	stop +: { value : ""  result : current_type }
	multiple +: {
		result : Id
		value :
			For action : actions
				Where !(action Is Null)
				Reduce acc & action.value & "\(indent)\(Id) &= \(action.result);"
				With acc : "\(indent)var \(Id) = NameInfo.AnyType;"
	}
}
default_indent : "\n\t\t"
# Code to generate CIL opcodes, using System.Reflection.Emit for KWS VM
# instructions. This is heavily supported by the `Generator` class. This code
# also makes obscene use of callbacks. Per the compiler design manual, the
# continuation passing flow of the language is represented in the compiler. At
# most steps, a callback is created which takes the return value as an
# argument.
#
# The compiler makes heavy use of “private scope” fields, which are essentially
# anonymous fields. Each instruction stores its results in a field defined by
# `storage_name`.
kws : compiler_lib.kws_repl_tmpl {
	# The base template for most instructions. Since each instruction computes
	# some values and then does one opcode, this is heavily applicable to most of
	# the “normal” operations in the KWS VM. This template takes the arguments,
	# expands their `gen_gen` templates in a fold operation, finally loading all
	# the results, inserting the opcodes, then storing the result in a field.
	base_tmpl +: {
		cached : False
		opcode : Required
		storage_name : If return_type Is Null Then "null" Else Id

		extra_indent : For arg : arguments Reduce arg.value.extra_indent & acc With acc : ""
		arg_indents : For arg_name : Name, arg : arguments, arg_pos : Ordinal
			Select arg_name :
				(For prev_arg : arguments, prev_arg_pos : Ordinal
				Where prev_arg_pos < arg_pos
				Reduce acc & prev_arg.value.extra_indent
				With acc : "")

		gen_gen +: {
			sum_indent : indent & extra_indent
			builder : If cached Then generator & ".Builder" Else (Id & "_builder")

			extra_load : ""
			extra_emit : ""
			extra_post : ""

			load_args :
				For arg : arguments
					Reverse
					Reduce
						"\(sum_indent)if (!typeof(\(arg.type.real_type)).IsAssignableFrom(\(arg.value.storage_name).BackingType)) throw new System.InvalidOperationException(System.String.Format(\"Expected  \(arg.type.name) but got {0} in \(opcode).\", Stringish.NameForType(\(arg.value.storage_name).BackingType)));" &
						"\(sum_indent)\(generator).LoadReboxed(\(arg.value.storage_name), typeof(\(arg.type.real_type)));" &
						acc
						With acc : ""
			base_code :
				(If cached
					Then
						"\(sum_indent)var \(storage_name) = \(generator).MakeField(\"\(rule_name)_\(opcode)\", typeof(\(return_type.real_type)));" &
						"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ldarg_0);"
					Else
						"\(sum_indent)var \(storage_name) = new GeneratedValue(typeof(\(return_type.real_type)), (\(builder)) => {"
				) &
				extra_load &
				load_args &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.\(opcode)\(extra_emit));" &
				extra_post &
				(If cached
					Then
						"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Stfld, \(storage_name).Field);"
					Else
						"\(sum_indent)});"
				) &
				code

			value :
				For arg : arguments, arg_indent : arg_indents
				Reverse
				Reduce arg.value.gen_gen(code : acc, indent : indent & arg_indent)
				With acc : base_code
		}
	}
	bool_negate +: {
		opcode : "Ldc_I4_0"
		gen_gen +: {
			extra_post : "\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ceq);"
		}
	}
	capture +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Precomputation).GetMethod(\"Capture\", new System.Type[] { typeof(object) })"
		}
	}
	error +: {
		extra_indent : message.extra_indent
		gen_gen +: {
			sum_indent : indent & message.extra_indent
			value : message.gen_gen(
				indent : indent,
				code :
					"\(sum_indent)\(generator).LoadTaskMaster();" &
					"\(sum_indent)\(parameters.source_reference.storage_name).Load(\(generator));" &
					"\(sum_indent)\(message.storage_name).Load(\(generator));" &
					"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Callvirt, typeof(Stringish).GetMethod(\"ToString\"));" &
					"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Callvirt, typeof(TaskMaster).GetMethod(\"ReportOtherError\", new System.Type[] { typeof(SourceReference), typeof(string) }));" &
					"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4_0);" &
					"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ret);"
				)
		}
	}
	float_add +: { opcode : "Add" }
	float_divide +: { opcode : "Div" }
	float_is_finite +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(double).GetMethod(\"IsInfinity\", new System.Type[] { typeof(double) })"
			extra_post:
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ldc_I4_0);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ceq);"
		}
	}
	float_is_nan +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(double).GetMethod(\"IsNaN\", new System.Type[] { typeof(double) })"
		}
	}
	float_modulus +: { opcode : "Rem" }
	float_multiply +: { opcode : "Mul" }
	float_negate +: { opcode : "Neg" }
	float_subtract +: { opcode : "Sub" }
	float_to_int +: { opcode : "Conv_I8" }
	int_add +: { opcode : "Add" }
	int_and +: { opcode : "And" }
	int_complement +: { opcode : "Not" }
	int_divide +: {
		cached : True
		opcode : "Dup"
		gen_gen +: {
			extra_post :
				"\(sum_indent)var \(Id)_ok = \(generator).Builder.DefineLabel();" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Brtrue, \(Id)_ok);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Pop);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Pop);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Pop);" &
				"\(sum_indent)\(generator).LoadTaskMaster();" &
				"\(sum_indent)\(parameters.source_reference.storage_name).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldstr, \"Division by zero is an undignified operation.\");" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Callvirt, typeof(TaskMaster).GetMethod(\"ReportOtherError\", new System.Type[] { typeof(SourceReference), typeof(string) }));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4_0);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ret);" &
				"\(sum_indent)\(generator).Builder.MarkLabel(\(Id)_ok);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Div);"
		}
	}
	int_modulus +: {
		cached : True
		opcode : "Dup"
		gen_gen +: {
			extra_post :
				"\(sum_indent)var \(Id)_ok = \(generator).Builder.DefineLabel();" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Brtrue, \(Id)_ok);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Pop);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Pop);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Pop);" &
				"\(sum_indent)\(generator).LoadTaskMaster();" &
				"\(sum_indent)\(parameters.source_reference.storage_name).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldstr, \"The modulus by zero is a mathematical koan.\");" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Callvirt, typeof(TaskMaster).GetMethod(\"ReportOtherError\", new System.Type[] { typeof(SourceReference), typeof(string) }));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4_0);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ret);" &
				"\(sum_indent)\(generator).Builder.MarkLabel(\(Id)_ok);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Rem);"
		}
	}
	int_multiply +: { opcode : "Mul" }
	int_negate +: { opcode : "Neg" }
	int_or +: { opcode : "Or" }
	int_subtract +: { opcode : "Sub" }
	int_xor +: { opcode : "Xor" }
	int_to_bool +: {
		opcode : "Conv_I4"
		gen_gen +: {
			extra_post :
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(number));" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ceq);" &
				(If invert
					Then
						"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ldc_I4_0);" &
						"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ceq);"
					Else "")
		}
	}
	int_to_float +: { opcode : "Conv_R8" }
	string_concatenate +: {
		opcode : "Newobj"
		gen_gen +: {
			extra_emit : ", typeof(ConcatStringish).GetConstructors()[0]"
		}
	}
	string_ordinal +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(TaskMaster).GetMethod(\"OrdinalName\", new System.Type[] { typeof(long) })"
		}
	}
	verify_symbol +: {
		opcode : "Call"
		gen_gen +: {
			extra_load :
				"\(sum_indent)\(generator).LoadTaskMaster();" &
				"\(sum_indent)\(parameters.source_reference.storage_name).Load(\(builder));"
			extra_emit : ", typeof(TaskMaster).GetMethod(\"VerifySymbol\", new System.Type[] { typeof(SourceReference), typeof(Stringish) })"
		}
	}
	frame_new +: {
		extra_indent : context.extra_indent & container.extra_indent
		gen_gen +: {
			sum_indent : indent & extra_indent
			base_code :
				"\(sum_indent)var \(storage_name) = \(generator).MakeField(\"\(rule_name)_new_frame\", typeof(MutableFrame));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);" &
				"\(sum_indent)\(generator).LoadTaskMaster();" &
				"\(sum_indent)\(generator).AmendSourceReference(this, \"\(creation_method)\", \(parameters.source_reference.storage_name), \(If source Is Null Then "null" Else source.storage_name));" &
				"\(sum_indent)\(context.storage_name).Load(\(generator));" &
				"\(sum_indent)\(container.storage_name).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newobj, typeof(MutableFrame).GetConstructors()[0]);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stfld, \(storage_name).Field);" &
				code
			value : context.gen_gen(indent : indent, code : container.gen_gen(indent : indent & context.extra_indent, code : base_code))
		}
	}
	frame_new_through +: {
		extra_indent : container.extra_indent & context.extra_indent & start.extra_indent & end.extra_indent
		gen_gen +: {
			sum_indent : indent & extra_indent
			base_code :
				"\(sum_indent)var \(storage_name) = \(generator).MakeField(\"\(rule_name)_new_frame\", typeof(Frame));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);" &
				"\(sum_indent)\(generator).LoadTaskMaster();" &
				"\(sum_indent)\(parameters.source_reference.storage_name).Load(\(generator));" &
				"\(sum_indent)\(start.storage_name).Load(\(generator));" &
				"\(sum_indent)\(end.storage_name).Load(\(generator));" &
				"\(sum_indent)\(context.storage_name).Load(\(generator));" &
				"\(sum_indent)\(container.storage_name).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, typeof(Frame).GetMethod(\"Through\", new System.Type[] { typeof(TaskMaster), typeof(SourceReference), typeof(long), typeof(long), typeof(Context), typeof(Frame) }));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stfld, \(storage_name).Field);" &
				code
			value : container.gen_gen(
				indent : indent,
				code : context.gen_gen(
					indent : indent & container.extra_indent,
					code : start.gen_gen(
						indent : indent & container.extra_indent & context.extra_indent,
						code : end.gen_gen(
							indent : indent & container.extra_indent & context.extra_indent & start.extra_indent,
							code : base_code
							)
						)
					)
				)
		}
	}
	frame_null +: {
		extra_indent : ""
		storage_name : "LoadableValue.NULL_FRAME"
	}
	frame_id +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Frame).GetMethod(\"get_Id\")"
		}
	}
	frame_context +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Frame).GetMethod(\"get_Context\")"
		}
	}
	frame_container +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Frame).GetMethod(\"get_Container\")"
		}
	}
	frame_has +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Frame).GetMethod(\"Has\", new System.Type[] { typeof(Stringish) })"
		}
	}
	frame_trace +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Frame).GetMethod(\"RenderTrace\", new System.Type[] { typeof(Stringish) })"
		}
	}
	list_null +: {
		extra_indent : ""
		storage_name : "LoadableValue.NULL_LIST"
	}
	list_prepend +: {
		cached : True
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Context).GetMethod(\"Prepend\", new System.Type[] { typeof(Frame), typeof(Context) })"
		}
	}
	list_append +: {
		cached : True
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Context).GetMethod(\"Append\", new System.Type[] { typeof(Context), typeof(Context) })"
		}
	}
	lookup_tmpl +: {
		extra_indent : source.extra_indent & name_indent
		name_indent : ""
		gen_gen +: {
			sum_indent : indent & source.extra_indent & name_indent
			load_names : Required
			base_code :
				source.gen_gen(
					indent : indent & name_indent,
					code :
						"\(sum_indent)\(generator).StartInterlock(1);" &
						"\(sum_indent)\(generator).LoadTaskMaster();" &
						"\(sum_indent)\(parameters.source_reference.storage_name).Load(\(generator));" &
						load_names &
						"\(sum_indent)\(source.storage_name).Load(\(generator));" &
						"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newobj, typeof(Lookup).GetConstructors()[0]);" &
						"\(sum_indent)var \(storage_name) = \(generator).MakeField(\"lookup\", typeof(object));" &
						"\(sum_indent)\(generator).GenerateConsumeResult(\(storage_name), true);" &
						"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, typeof(Lookup).GetMethod(\"Notify\", new System.Type[] { typeof(ConsumeResult) }));" &
						"\(sum_indent)\(generator).StopInterlock();" &
						code
					)
			value : base_code
		}
	}
	lookup_literal +: {
		gen_gen +: {
			names_length : For n : name Reduce acc + 1 With acc : 0
			load_names :
				For n : name, index : Ordinal
					Reduce
						acc &
						"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Dup);" &
						"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(index - 1));" &
						"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldstr, \"\(n)\");" &
						"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stelem, typeof(string));"
					With acc :
						"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(names_length));" &
						"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newarr, typeof(string));"
		}
	}
	lookup_field +: {
		gen_gen +: {
			load_names :
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(field).Count);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newarr, typeof(string));" &
				"\(sum_indent)for (var \(Id)_iter = 0; \(Id)_iter < \(field).Count; \(Id)_iter++) {" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Dup);" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(Id)_iter);" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldstr, \(field)[\(Id)_iter].ToString());" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stelem, typeof(string));" &
				"\(sum_indent)}"
		}
	}
	lookup_prefixed +: {
		gen_gen +: {
			load_names :
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(prefix_field).Count + 1);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newarr, typeof(string));" &
				"\(sum_indent)for (var \(Id)_iter = 0; \(Id)_iter < \(prefix_field).Count; \(Id)_iter++) {" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Dup);" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(Id)_iter);" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldstr, \(prefix_field)[\(Id)_iter].ToString());" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stelem, typeof(string));" &
				"\(sum_indent)}" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Dup);" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(prefix_field).Count);" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldstr, \"\(suffix_name)\");" &
				"\(sum_indent)\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stelem, typeof(string));"
		}
	}
	lookup_dynamic +: {
		name_indent : name.extra_indent
		gen_gen +: {
			load_names :
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4_1);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newarr, typeof(string));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Dup);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4_0);" &
				"\(sum_indent)\(name.storage_name).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Callvirt, typeof(Stringish).GetMethod(\"ToString\"));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stelem, typeof(string));"
			value : name.gen_gen(indent : indent, code : base_code)
		}
	}
	apply_override +: {
		opcode : "Call"
		gen_gen +: {
			extra_load :
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ldstr, FileName);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ldc_I4, StartRow);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ldc_I4, StartColumn);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ldc_I4, EndRow);" &
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Ldc_I4, EndColumn);"
			extra_emit : ", typeof(Computation).GetMethod(\"PerformOverride\", new System.Type[] { typeof(string), typeof(int), typeof(int), typeof(int), typeof(int), typeof(ComputeOverride), typeof(ComputeValue) })"
		}
	}
	create_function_tmpl +: {
		extra_indent : ""
		parameter_names : Required
		method : Required
		delegate_type : Required
		parent_generator : Lookup generator In Container
		generator : Id & "_generator"
		lookup_cache : "null"
		generation_flavour : codegen.flavour_aware
		argument_list :
			For parameter : parameters
			Reduce acc & ", " & parameter.storage_name
			With acc : ""
		parameters :
			For parameter_name : parameter_names
			Select parameter_name : codegen.gen_tmpl {
				extra_indent : ""
				storage_name : Id & "_" & parameter_name
			}
		gen_gen +: {
			return_indent : indent & "\t" & returns.extra_indent
			return_code :
				"\(return_indent)\(generator).Return(\(returns.storage_name));"

			value :
				"\(indent)var \(storage_name) = new DelegateValue(\(parent_generator).\(method)(this, \"\(Id)\", (\(generator)\(argument_list)) => {"	&
				"\(indent)\t\(generator).DebugPosition(this);" &
				returns.gen_gen(indent : indent & "\t", code : return_code) &
				"\(indent)}), typeof(\(delegate_type)));" &
				code
		}
	}
	create_function +: {
		method : "CreateFunction"
		parameter_names : [ $source_reference, $context, $self_frame, $container_frame ]
		delegate_type : "ComputeValue"
	}
	create_override_function +: {
		method : "CreateFunctionOverride"
		parameter_names : [ $source_reference, $context, $self_frame, $container_frame, $original_value ]
		delegate_type : "ComputeOverride"
	}
	set_frame_or_tmpl_tmpl +: {
		string_indent : Required
		extra_indent : into.extra_indent & with.extra_indent & string_indent
		storage_name : returns.storage_name
		gen_gen +: {
			sum_indent : indent & into.extra_indent & with.extra_indent & string_indent
			load_name : Required
			base_code : into.gen_gen(
				indent : indent & string_indent,
				code : with.gen_gen(
					indent : indent & into.extra_indent & string_indent,
					code :
							"\(sum_indent)if (!typeof(Template).IsAssignableFrom(\(into.storage_name).BackingType) && !typeof(MutableFrame).IsAssignableFrom(\(into.storage_name).BackingType)) throw new System.InvalidOperationException(System.String.Format(\"Use of non-mutable collection {0} in iteration.\", Stringish.NameForType(\(into.storage_name).BackingType)));" &
						"\(sum_indent)\(into.storage_name).Load(\(generator));" &
						load_name &
						"\(sum_indent)var \(Id)_is_frame = typeof(MutableFrame).IsAssignableFrom(\(into.storage_name).BackingType);" &
						"\(sum_indent)var \(Id)_boxed_type = \(Id)_is_frame ? typeof(object) : typeof(ComputeValue);" &
						"\(sum_indent)\(generator).LoadReboxed(\(with.storage_name), \(Id)_boxed_type);" &
						"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, \(into.storage_name).BackingType.GetMethod(\(Id)_is_frame ? \"Set\" : \"set_Item\", new System.Type[] { typeof(string), \(Id)_boxed_type }));" &
						code
					)
				)
		}
	}
	set_frame_or_tmpl +: {
		string_indent : name.extra_indent
		gen_gen +: {
			value : name.gen_gen(indent : indent, code : base_code)
			load_name :
				"\(sum_indent)\(name.storage_name).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Callvirt, typeof(Stringish).GetMethod(\"ToString\"));"
		}
	}
	set_frame_or_tmpl_from_field +: {
		string_indent : ""
		gen_gen +: {
			value : base_code
			load_name :
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldstr, Generator.ToString(\(name_field)));"
		}
	}
	tmpl_get +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Template).GetMethod(\"Get\", new System.Type[] { typeof(Stringish) })"
		}
	}
	tmpl_container +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Template).GetMethod(\"get_Container\")"
		}
	}
	tmpl_context +: {
		opcode : "Call"
		gen_gen +: {
			extra_emit : ", typeof(Template).GetMethod(\"get_Context\")"
		}
	}
	tmpl_get_from_field +: {
		opcode : "Ldstr"
		gen_gen +: {
			extra_emit : ", Generator.ToString(\(field))"
			extra_post:
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Call, typeof(Template).GetMethod(\"get_Item\", new System.Type[] { typeof(string) }));"
		}
	}
	tmpl_new +: {
		extra_indent : container.extra_indent & context.extra_indent & source_extra_indent
		source_extra_indent : If source Is Null Then "" Else source.extra_indent
		gen_gen +: {
			sum_indent : indent & extra_indent
			base_code :
				container.gen_gen(
					indent : indent & source_extra_indent,
					code : context.gen_gen(
						indent : indent & source_extra_indent & container.extra_indent,
						code : inner_code
					)
				)
			inner_code :
				"\(sum_indent)var \(storage_name) = \(generator).MakeField(\"new_template\", typeof(Template));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);" &
				"\(sum_indent)\(generator).AmendSourceReference(this, \"amend template\", \(parameters.source_reference.storage_name), \(If source Is Null Then "null" Else source.storage_name));" &
				"\(sum_indent)\(context.storage_name).Load(\(generator));" &
				"\(sum_indent)\(container.storage_name).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newobj, typeof(Template).GetConstructors()[0]);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stfld, \(storage_name).Field);" &
				code
			value : If source Is Null Then base_code Else source.gen_gen(indent : indent, code : base_code)
		}
	}

	cast_to_string +: {
		extra_indent : source.extra_indent
		gen_gen +: {
			sum_indent : indent & source.extra_indent
			value : source.gen_gen(
				indent : indent,
				code :
					"\(sum_indent)var \(storage_name) = \(generator).ToStringish(\(source.storage_name), \(parameters.source_reference.storage_name));" &
					code
				)
		}
	}
	string_constant_tmpl +: {
		extra_indent : ""
		source : Required
		gen_gen +: {
			value : "\(indent)var \(storage_name) = new StringishValue(\(source));" & code
		}
	}
	string_constant +: {
		source : "\"" & str & "\""
	}
	string_constant_from_field +: {
		source : "Generator.ToString(" & field & ")"
	}
	string_length +: {
		opcode : "Callvirt"
		gen_gen +: {
			extra_emit : ", typeof(Stringish).GetMethod(\"get_Length\")"
		}
	}
	binary_length +: {
		opcode : "Ldlen"
		gen_gen +: {
			extra_post :
				"\(sum_indent)\(builder).Emit(System.Reflection.Emit.OpCodes.Conv_I8);"
		}
	}
	numeric_constant +: {
		extra_indent : ""
		max : type.max
		min : type.min
		gen_gen +: {
			value : "\(indent)var \(storage_name) = new \(type.constant_creator)(\(number));" & code
		}
	}
	numeric_constant_units +: {
		number : "\(field) * \(unit)"
	}
	null_constant +: {
		extra_indent : ""
		gen_gen +: {
			value : "\(indent)var \(storage_name) = UnitConstant.NULL;" & code
		}
	}
	nan_constant +: {
		extra_indent : ""
		gen_gen +: {
			value : "\(indent)var \(storage_name) = FloatConstant.NAN;" & code
		}
	}
	infinity_constant +: {
		extra_indent : ""
		gen_gen +: {
			value : "\(indent)var \(storage_name) = FloatConstant.INFINITY;" & code
		}
	}
	external_tmpl +: {
		uri_str : Required
		extra_indent : ""
		gen_gen +: {
				value : "\(indent)var \(storage_name) = \(generator).ResolveUri(\(uri_str));" & code
		}
	}
	external_literal +: {
		uri_str : "\"\(uri)\""
	}
	external_from_field +: {
		uri_str : "Generator.ToString(\(field))"
	}
	compare +: {
		extra_indent : left.extra_indent & right.extra_indent & "\t"
		gen_gen +: {
			sum_indent : indent & extra_indent
			base_code :
				"\(sum_indent)\tvar \(storage_name) = \(generator).Compare(\(left.storage_name), \(right.storage_name), \(parameters.source_reference.storage_name));" &
				"\(sum_indent)if (\(storage_name) != null) {" &
				code &
				"\(sum_indent)}"

			value : left.gen_gen(
				indent : indent,
				code : right.gen_gen(
					indent : indent & left.extra_indent,
					code : base_code
					)
				)
		}
	}
	conditional +: {
		extra_indent : "\t"
		callback : Id & "_code"

		gen_gen +: {
			value :
				"\(indent)\(generator).ConditionalFlow(\(condition_lambda), \(true_lambda), \(false_lambda), (\(storage_name)) => {\(code)\(indent)});"

			condition_lambda :
				"(\(Id)_cond) => {" &
				condition.gen_gen(
					indent : indent & "\t",
					code : "\(indent)\(condition.extra_indent)\(Id)_cond(\(condition.storage_name));"
				) &
				"\(indent)}"

			true_lambda :
				"(\(Id)_true) => {" &
				true_action.gen_gen(
					indent : indent & "\t",
					code : "\(indent)\(true_action.extra_indent)\(Id)_true(\(true_action.storage_name));"
				) &
				"\(indent)}"

			false_lambda :
				"(\(Id)_false) => {" &
				false_action.gen_gen(
					indent : indent & "\t",
					code : "\(indent)\(false_action.extra_indent)\(Id)_false(\(false_action.storage_name));"
				) &
				"\(indent)}"
		}
	}
	dynamic_type_dispatch_tmpl +: {
		extra_indent : of.extra_indent & "\t"
		type_list : Required

		gen_gen +: {
			sum_indent : indent & of.extra_indent
			value :
				of.gen_gen(indent : indent, code :
					"\(sum_indent)\(generator).DynamicTypeDispatch(\(of.storage_name), \(parameters.source_reference.storage_name), \(type_list), (\(storage_name)) => {" &
					"\(sum_indent)\t\(generator).DebugPosition(this);" &
					code &
					"\(sum_indent)});")
		}
	}
	dynamic_type_dispatch +: {
		type_list :
			"new System.Type[] { " &
			(For type : allow_types, pos : Ordinal
				Reduce If pos > 1 Then "typeof(\(type.real_type)), \(acc)" Else "typeof(\(type.real_type))"
				With acc : "") &
			"}"
	}
	dynamic_type_dispatch_from_intrinsic +: {
		type_list : "\(environment ?? "Environment").GetIntrinsicRealTypes(this)"
	}
	dynamic_type_dispatch_from_stored_mask +: {
		type_list : "\(type_storage).MustUnbox ? AstTypeableNode.ClrTypeFromType(\(type_storage).RestrictedType) : null"
	}
	dynamic_type_check_tmpl +: {
		reference_type : Required
		extra_indent : source.extra_indent
		gen_gen +: {
			value : source.gen_gen(
				indent : indent,
				code :
					"\(indent)\(source.extra_indent)var \(storage_name) = new TypeCheckValue(\(reference_type), \(source.storage_name));" &
					code
				)
		}
	}
	dynamic_type_check +: {
		reference_type : "typeof(\(type.real_type))"
	}
	dynamic_type_check_parsed +: {
		reference_type : "\(field).TypeId"
	}
	iterator_tmpl +: {
		iterator_type : Required
		extra_indent : ""

		parent_source_reference : Lookup parameters.source_reference In Container
		parameters : {
			source_reference :
				If modify_source_reference
					Then codegen.gen_tmpl { extra_indent : "" }
					Else parent_source_reference
		}

		iterator_instance : Id & "_iterator"
		iterator_key : Id & "_key"
		iterator_ordinal : Id & "_ordinal"
		iterator_start_block : Id & "_start_block"
		gen_gen +: {
			sum_indent : indent & extra_indent
			value :
				input.gen_gen(indent : indent) &
				"\(sum_indent)var \(storage_name) = \(generator).MakeField(\"\(rule_name)_iterator_accumulator\", typeof(\(accumulator_type.real_type)));" &
				create_initial &
				custom_setup &
				code

			create_initial :
				"\(sum_indent)var \(iterator_start_block) = \(generator).DefineState();" &
				(If modify_source_reference
					Then "\(indent)LoadableValue \(parameters.source_reference.storage_name) = \(parent_source_reference.storage_name);"
					Else "") &
				initial.gen_gen(
					indent : indent,
					code :
						"\(indent)\(initial.extra_indent)\(generator).CopyField(\(initial.storage_name), \(storage_name));" &
						"\(indent)\(initial.extra_indent)\(generator).JumpToState(\(iterator_start_block));"
					) &
				"\(sum_indent)\(generator).MarkState(\(iterator_start_block));"

			create_fields :
				"\(sum_indent)var \(iterator_instance) = \(generator).MakeField(\"\(rule_name)_iterator\", \(iterator_type));" &
				"\(sum_indent)#pragma warning disable 219" &
				"\(sum_indent)var \(iterator_key) = new MethodValue(\(iterator_instance), \(iterator_type).GetMethod(\"get_Currentish\"));" &
				"\(sum_indent)var \(iterator_ordinal) = new MethodValue(\(iterator_instance), \(iterator_type).GetMethod(\"get_Position\"));" &
				"\(sum_indent)#pragma warning restore 219"
		}
		input_tmpl +: {
			array : Id
			gen_gen : Template {
				indent : Required
				value : Required

				sum_indent : indent & extra_indent
				base_code :
					"\(sum_indent)var \(array) = \(generator).MakeField(\"\(rule_name)_iterator_inputs\", typeof(IAttributeNames[]));" &
					"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);" &
					"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(num_inputs));" &
					"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newarr, typeof(IAttributeNames));" &
					"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stfld, \(array).Field);"
			}
		}
		input_list +: {
			num_inputs : For item : items Reduce len + 1 With len : 0

			gen_gen +: {
				value :
					For item : items, index : Ordinal
						Reduce
							acc &
							"\(indent)\(Id)_next = \(generator).DefineState();" &
							item.gen_gen(
								indent : indent,
								code :
									"\(indent)\(item.extra_indent)\(array).Load(\(generator));" &
									"\(indent)\(item.extra_indent)if (!typeof(IAttributeNames).IsAssignableFrom(\(item.storage_name).BackingType)) throw new System.InvalidOperationException(System.String.Format(\"Use of non-collection {0} in iteration.\", Stringish.NameForType(\(item.storage_name).BackingType)));" &
									"\(indent)\(item.extra_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(index - 1));" &
									"\(indent)\(item.extra_indent)\(item.storage_name).Load(\(generator));" &
									"\(indent)\(item.extra_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stelem, typeof(IAttributeNames));" &
									"\(indent)\(item.extra_indent)\(generator).JumpToState(\(Id)_next);"
								) &
							"\(indent)\(generator).MarkState(\(Id)_next);"
						With acc : base_code & "\(indent)int \(Id)_next;"
			}
		}
		input_merge +: {
			matched_frames : Id & "_matched_frames"
			call_arguments : codegen.flavour_aware.call_site {}
			argument_list : "\(generator), " &
				(If codegen.flavour_aware.has_cache Then lookup_cache & ", " Else "") &
				call_arguments.value

			make_merge_frame : codegen.gen_tmpl {
				extra_indent : ""
				gen_gen +: {
					value :
						"\(indent)var \(storage_name) = \(generator).MakeField(\"\(rule_name)_merge_frame\", typeof(MutableFrame));" &
						"\(indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);" &
						"\(indent)\(generator).LoadTaskMaster();" &
						"\(indent)\(parameters.source_reference.storage_name).Load(\(generator));" &
						"\(indent)\(parameters.context.storage_name).Load(\(generator));" &
						"\(indent)\(parameters.self_frame.storage_name).Load(\(generator));" &
						"\(indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newobj, typeof(MutableFrame).GetConstructors()[0]);" &
						"\(indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stfld, \(storage_name).Field);" &
						"\(indent)foreach(var \(Id) in \(field)) {" &
						"\(indent)\t\(Id).PrepareValue(\(argument_list)\(matched_frames).ContainsKey(\(Id)) ? new MatchedFrameValue(\(matched_frames)[\(Id)], \(array)) : null, \(current_ordinal.storage_name), \(current_name.storage_name), \(storage_name));" &
						"\(indent)}" &
						code
					}
			}

			gen_gen +: {
				num_inputs : "\(field).Where(x => x.NeedsGeneration).Count()"

				value :
					base_code &
					"\(sum_indent)var \(Id)_pos = 0;" &
					"\(sum_indent)var \(matched_frames) = new System.Collections.Generic.Dictionary<AstNode, int>();" &
					"\(sum_indent)foreach(var \(Id) in \(field).Where(x => x.NeedsGeneration)) {" &
					"\(sum_indent)\t\(matched_frames)[\(Id)] = \(Id)_pos;" &
					"\(sum_indent)\tvar \(Id)_next = \(generator).DefineState();" &
					"\(sum_indent)\t\(Id).Generate(\(argument_list)(\(Id)_result) => {" &
					"\(sum_indent)\t\t\(array).Load(\(generator));" &
					"\(sum_indent)\t\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(Id)_pos);" &
					"\(sum_indent)\t\t\(Id)_result.Load(\(generator));" &
					"\(sum_indent)\t\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stelem, typeof(IAttributeNames));" &
					"\(sum_indent)\t\t\(generator).JumpToState(\(Id)_next);" &
					"\(sum_indent)\t});" &
					"\(sum_indent)\t\(generator).MarkState(\(Id)_next);" &
					"\(sum_indent)\t\(Id)_pos++;" &
					"\(sum_indent)}"
			}
		}

		current_name : codegen.gen_tmpl {
			extra_indent : ""
			storage_name : iterator_key
		}
		current_ordinal : codegen.gen_tmpl {
			extra_indent : ""
			storage_name : iterator_ordinal
		}
		current_accumulator : codegen.gen_tmpl {
			extra_indent : ""
			storage_name : Lookup storage_name In Container
		}
	}
	iterator +: {
		iterator_type : "typeof(MergeIterator)"
		iterator_dispatchers : Id & "_dispatchers"
		iterator_next : Id & "_next"
		position : Id & "_position"

		gen_gen +: {
			custom_setup :
				define_dispatcher_states &
				create_iterator &
				iterator_trampoline &
				# Create a block for the default dispatcher.
				"\(sum_indent)\(generator).MarkState(\(iterator_dispatchers)[1]);" &
				dispatch_code &
				case_dispatchers &
				"\(sum_indent)\(generator).MarkState(\(iterator_dispatchers)[0]);"
			create_iterator :
				# Create new fields for all the bits of stuff we need.
				create_fields &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);" &
				"\(sum_indent)\(input.array).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(iterator_dispatchers)[1]);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(iterator_dispatchers)[0]);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newobj, typeof(MergeIterator).GetConstructors()[0]);" &
				# Load all the special dispatchers.
				add_cases &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stfld, \(iterator_instance).Field);"

			iterator_trampoline :
				# Create a re-entry point for the end of input (i.e., the iterator returning).
				"\(sum_indent)var \(iterator_next) = \(generator).DefineState();" &
				"\(sum_indent)\(generator).JumpToState(\(iterator_next));" &
				"\(sum_indent)\(generator).MarkState(\(iterator_next));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);" &
				"\(sum_indent)\(iterator_instance).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, typeof(MergeIterator).GetMethod(\"Next\"));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stfld, \(generator).StateField);" &
				(If modify_source_reference
					Then "\(sum_indent)\(parameters.source_reference.storage_name) = \(generator).PushIteratorSourceReference(this, \(iterator_instance), \(parent_source_reference.storage_name));"
					Else "") &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Tailcall);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Callvirt, typeof(Computation).GetMethod(\"Run\", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ret);"

			dispatch_code : default_case.gen_gen(
				indent : sum_indent,
				code :
					"\(sum_indent)\(default_case.extra_indent)\(generator).CopyField(\(default_case.storage_name), \(storage_name));" &
					"\(sum_indent)\(default_case.extra_indent)\(generator).JumpToState(\(iterator_next));"
					)

			num_cases :
				For case : cases
					Where !(case Is Null)
					Reduce acc & case.count
					With acc : "2"

			define_dispatcher_states :
				"\(sum_indent)var \(iterator_dispatchers) = new int[ \(num_cases) ];" &
				"\(sum_indent)for(var \(Id)_it = 0; \(Id)_it < \(iterator_dispatchers).Length; \(Id)_it++) { \(iterator_dispatchers)[\(Id)_it] = \(generator).DefineState(); }"

			add_cases :
				For case : cases
					Where !(case Is Null)
					Reduce
						acc & case.add(indent : sum_indent)
					With acc :
						"\(sum_indent)#pragma warning disable 219" &
						"\(sum_indent)var \(position) = 2;" &
						"\(sum_indent)#pragma warning restore 219"

			case_dispatchers :
				For case : cases
					Where !(case Is Null)
					Reduce
						acc &
						case.gen_gen(indent : sum_indent)
					With acc : "\(sum_indent)\(position) = 2;"
		}

		base_case_tmpl +: {
			name_str : Required
			count : " + 1"
			loop_tab : ""
			add : Template {
				indent : Required
				value :
					"\(indent)\(loop_tab)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Dup);" &
					"\(indent)\(loop_tab)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldstr, \(name_str));" &
					"\(indent)\(loop_tab)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4, \(iterator_dispatchers)[\(position)++]);" &
					"\(indent)\(loop_tab)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, typeof(MergeIterator).GetMethod(\"AddDispatcher\", new System.Type[] { typeof(string), typeof(int) }));"
			}
			gen_gen : Template {
				indent : Required
				sum_indent : indent & action.extra_indent & loop_tab
				base_code :
					"\(sum_indent)\(generator).CopyField(\(action.storage_name), \(storage_name));" &
					"\(sum_indent)\(generator).JumpToState(\(iterator_next));"
				value :
					"\(indent)\(loop_tab)\(generator).MarkState(\(iterator_dispatchers)[\(position)++]);" &
					action.gen_gen(indent : indent & loop_tab, code : base_code)
			}
		}
		literal_case +: {
			name_str : "\"\(name)\""
		}
		field_case +: {
			name_str : "Generator.ToString(\(field))"
		}
		list_case +: {
			name_str : "Generator.ToString(\(current_element).\(name_field))"
			current_element : Id
			loop_tab : "\t"
			count : " + \(field).Count"
			add +: {
				value +original:
					"\(indent)foreach (var \(current_element) in \(field)) {" &
					original &
					"\(indent)}"
			}
			gen_gen +: {
				value +original:
					"\(indent)foreach (var \(current_element) in \(field)) {" &
					original &
					"\(indent)}"
			}
		}
	}
	ordered_iterator +: {
		iterator_type : "\(Id)_type"
		order_type : "Environment.GetIntrinsicRealTypes(this)"
		gen_gen +: {
			custom_setup :
				"\(sum_indent)var \(iterator_type) = typeof(OrderByIterator<>).MakeGenericType(\(order_type));" &
				"\(sum_indent)var \(Id)_setup = \(generator).DefineState();" &
				"\(sum_indent)var \(Id)_process = \(generator).DefineState();" &
				"\(sum_indent)var \(Id)_end = \(generator).DefineState();" &
				create_iterator &
				"\(sum_indent)\(generator).JumpToState(\(Id)_setup);" &
				"\(sum_indent)\(generator).MarkState(\(Id)_setup);" &
				"\(sum_indent)\(iterator_instance).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, \(iterator_type).GetMethod(\"SetupNext\"));" &
				"\(sum_indent)var \(Id)_build_label = \(generator).Builder.DefineLabel();" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Brtrue, \(Id)_build_label);" &
				"\(sum_indent)\(generator).JumpToState(\(Id)_process);" &
				"\(sum_indent)\(generator).Builder.MarkLabel(\(Id)_build_label);" &
				build_action.gen_gen(
					indent : sum_indent,
					code :
						"\(sum_indent)\(build_action.extra_indent)\(iterator_instance).Load(\(generator));" &
						"\(sum_indent)\(build_action.extra_indent)\(build_action.storage_name).Load(\(generator));" &
						"\(sum_indent)\(build_action.extra_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, \(iterator_type).GetMethod(\"SetupReturn\", \(order_type)));" &
						"\(sum_indent)\(build_action.extra_indent)\(generator).JumpToState(\(Id)_setup);"
				) &
				iterator_trampoline &
				"\(sum_indent)\(generator).MarkState(\(Id)_end);"


			create_iterator :
				# Create new fields for all the bits of stuff we need.
				create_fields &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);" &
				"\(sum_indent)\(input.array).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newobj, \(iterator_type).GetConstructors()[0]);" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Stfld, \(iterator_instance).Field);"

			iterator_trampoline :
				# Create a re-entry point for the end of input (i.e., the iterator returning).
				"\(sum_indent)\(generator).MarkState(\(Id)_process);" &
				"\(sum_indent)\(iterator_instance).Load(\(generator));" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, \(iterator_type).GetMethod(\"Next\"));" &
				"\(sum_indent)var \(Id)_cont = \(generator).Builder.DefineLabel();" &
				"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Brtrue, \(Id)_cont);" &
				"\(sum_indent)\(generator).JumpToState(\(Id)_end);" &
				"\(sum_indent)\(generator).Builder.MarkLabel(\(Id)_cont);" &
				(If modify_source_reference
					Then "\(sum_indent)\(parameters.source_reference.storage_name) = \(generator).PushIteratorSourceReference(this, \(iterator_instance), \(parent_source_reference.storage_name));"
					Else "") &
				process_action.gen_gen(
					indent : indent,
					code :
						"\(indent)\(process_action.extra_indent)\(generator).CopyField(\(process_action.storage_name), \(storage_name));" &
						"\(indent)\(process_action.extra_indent)\(generator).JumpToState(\(Id)_process);"
				)
		}
	}
	set_current +: {
		extra_indent : to.extra_indent
		storage_name : "(new BoolConstant(true))"
		gen_gen +: {
			sum_indent : indent & extra_indent
			value : to.gen_gen(
				indent : indent,
				code :
					"\(sum_indent)\(parameters.update_current.storage_name).Load(\(generator));" &
					"\(sum_indent)\(generator).LoadReboxed(\(to.storage_name), typeof(object));" &
					"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Callvirt, typeof(ConsumeResult).GetMethod(\"Invoke\", new [] { typeof(object) }));" &
					code
			)
		}
	}
	print +: {
		extra_indent : item.extra_indent
		storage_name : "(new BoolConstant(true))"
		output_callback : If escape Then parameters.escape_value Else parameters.print_value
		gen_gen +: {
			sum_indent : indent & extra_indent
			value : item.gen_gen(
				indent : indent,
				code :
					"\(sum_indent)\(output_callback.storage_name).Load(\(generator));" &
					"\(sum_indent)\(generator).SlotIfFrame(\(item.storage_name));" &
					"\(sum_indent)\(generator).LoadReboxed(\(item.storage_name), typeof(object));" &
					"\(sum_indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Callvirt, typeof(ConsumeResult).GetMethod(\"Invoke\", new [] { typeof(object) }));" &
					code
			)
		}
	}
}
# Generate hideously complicated flows in the compiler's code generation routines.
codegen : compiler_lib.codegen_tmpl {
	# This is the base template for all of the code generation. The `gen_gen`
	# system is described in the compiler design manual.
	gen_tmpl +: {
		# Keeping tabbing correct in the code generator, but the OCD makes the
		# final result intelligible. This attribute should be the tabbing that
		# should be applied to `code` in addition to `indent` to make it appear at
		# the correct indentation. It can be thought of as the indentation
		# difference between the starting indentation and the indentation of the
		# callback.
		extra_indent : Required
		storage_name : Id
		gen_gen : Template {
			# The indentation of the code.
			indent : Required
			# The code to execute when this operation is completed and its value is
			# stored in a variable with the name of the value in `storage_name`.
			code : Required
			value : code
		}
	}
	bind +: {
		storage_name : (returns ?? jail.exp_in).storage_name

		extra_indent : total_def_indent & jail.exp_in.extra_indent
		total_def_indent : For def : define Reduce def.extra_indent & acc With acc : ""
		def_indents : For def_name : Name, def : define, def_pos : Ordinal
			Select def_name :
				(For prev_def : define, prev_def_pos : Ordinal
				Where prev_def_pos < def_pos
				Reduce acc & prev_def.extra_indent
				With acc : "")
		jail : {
			exp_in : in {}
			parameters : new_parameters
		}
		new_parameters : For def_name : Name, def : define
			Select def_name : codegen.gen_tmpl {
				extra_indent : ""
				storage_name : def.storage_name
			}

		gen_gen +: {
			value :
				For def : define, def_indent : def_indents
					Reverse
					Reduce def.gen_gen(code : acc, indent : indent & def_indent)
					With acc : jail.exp_in.gen_gen(indent : indent & total_def_indent, code : code)
		}
	}
	collapse_others +: {
		extra_indent : ""
		call_arguments : target_flavour.accumulate_flavour.call_site {}
		argument_list : "\(generator), " &
			(If target_flavour.accumulate_flavour.has_cache Then lookup_cache & ", " Else "") &
			call_arguments.value

		gen_gen +: {
			value :
				"\(indent)var \(storage_name) = \(generator).MakeField(\"collapse_result\", typeof(\(type.real_type)));" &
				"\(indent)var \(Id)_label = \(generator).DefineState();" &
				initial.gen_gen(
					indent : indent,
					code :
						"\(indent)\(initial.extra_indent)\(generator).CopyField(\(initial.storage_name), \(storage_name));" &
						"\(indent)\(initial.extra_indent)\(generator).JumpToState(\(Id)_label);"
					) &
				"\(indent)foreach (var \(Id)_item in \(field)) {" &
				"\(indent)\t\(generator).MarkState(\(Id)_label);" &
				"\(indent)\t\(Id)_label = \(generator).DefineState();" &
				"\(indent)\t\(Id)_item.Generate(\(argument_list)(\(Id)_result) => {" &
				"\(indent)\t\t\(generator).CopyField(\(Id)_result, \(storage_name));" &
				"\(indent)\t\t\(generator).JumpToState(\(Id)_label);" &
				"\(indent)\t});" &
				"\(indent)}" &
				"\(indent)\(generator).MarkState(\(Id)_label);" &
				code
		}
		parameters : {
			accumulator : codegen.gen_tmpl {
				extra_indent : ""
				storage_name : Lookup storage_name In Container
			}
		}
	}
	die +: {
		extra_indent : ""
		gen_gen +: {
			value :
				"\(indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I4_0);" &
				"\(indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ret);"
		}
	}
	empty_parameter +: {
		extra_indent : ""
		storage_name : in.storage_name
		gen_gen : in.gen_gen
		emptiness : gen_tmpl {
			extra_indent : ""
			storage_name : "null"
		}
	}
	# This nasty customer does a fold over a list of syntax elements. It
	# accomplishes this using the painfully obtuse `Generator.Fold` function.
	fold_others +: {
		extra_indent : initial.extra_indent & "\t"
		fold_name : "\(Id)_left"
		call_arguments : target_flavour.accumulate_flavour.call_site {}
		argument_list : "\(generator), " &
			(If target_flavour.accumulate_flavour.has_cache Then lookup_cache & ", " Else "") &
			call_arguments.value

		gen_gen +: {
			sum_indent : indent & initial.extra_indent
			expand : "\(Id)_block"
			value :
				initial.gen_gen(
					indent : indent,
					code :
						"\(sum_indent)\(generator).Fold((LoadableValue) \(initial.storage_name), \(field), (\(Id)_index, \(Id)_item, \(fold_name), \(Id)_block) => \(Id)_item.Generate(\(argument_list)\(expand)), (\(storage_name)) => {\(code)\(sum_indent)});"
						)
		}
		parameters : {
			accumulator : codegen.gen_tmpl {
				extra_indent : ""
				storage_name : fold_name
			}
		}
	}
	mash_into_frame +: {
		extra_indent : ""
		call_arguments : target_flavour.non_accumulate_flavour.call_site {}
		argument_list : "\(generator), " &
			(If target_flavour.non_accumulate_flavour.has_cache Then lookup_cache & ", " Else "") &
			(target_flavour.non_accumulate_flavour.call_site {}).value
		storage_name : initial.storage_name
		gen_gen +: {
			value :
				"\(indent)var \(Id)_label = \(generator).DefineState();" &
				initial.gen_gen(
					indent : indent,
					code :
						"\(indent)\(initial.extra_indent)\(generator).JumpToState(\(Id)_label);"
					) &
				"\(indent)for (var \(Id)_index = 0; \(Id)_index < \(field).Count; \(Id)_index++) {" &
				"\(indent)\t\(generator).MarkState(\(Id)_label);" &
				"\(indent)\t\(Id)_label = \(generator).DefineState();" &
				"\(indent)\t\(field)[\(Id)_index].Generate(\(argument_list)(\(Id)_result) => {" &
				"\(indent)\t\t\(storage_name).Load(\(generator));" &
				"\(indent)\t\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Ldc_I8, (long) \(Id)_index + 1);" &
				"\(indent)\t\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, typeof(TaskMaster).GetMethod(\"OrdinalNameStr\", new System.Type[] { typeof(long) }));" &
				"\(indent)\t\t\(generator).LoadReboxed(\(Id)_result, typeof(object));" &
				"\(indent)\t\t\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, typeof(MutableFrame).GetMethod(\"Set\", new System.Type[] { typeof(string), typeof(object) }));" &
				"\(indent)\t\t\(generator).JumpToState(\(Id)_label);" &
				"\(indent)\t});" &
				"\(indent)}" &
				"\(indent)\(generator).MarkState(\(Id)_label);" &
				code
		}
	}
	lookup_cached +: {
		extra_indent : ""
		gen_gen +: {
			value :
				"\(indent)bool \(Id)_junk = true;" &
				"\(indent)var \(storage_name) = \(lookup_cache)[\(generation_environment).Lookup(null, \(field).Select((s) => s.ToString()), ref \(Id)_junk)];" &
				code
		}
	}
	# This changes the value of parameters by renaming them, then restoring the names.
	mask_parameters +: {
		storage_name : action.storage_name
		extra_indent : For parameter : parameters Reduce parameter.extra_indent & acc With acc : action.extra_indent
		parameter_indents : For parameter_name : Name, parameter : parameters, parameter_pos : Ordinal
			Select parameter_name :
				(For prev_parameter : parameters, prev_parameter_pos : Ordinal
				Where prev_parameter_pos < parameter_pos
				Reduce acc & prev_parameter.extra_indent
				With acc : "")

		gen_gen +: {
			sum_indent : indent & extra_indent
			base_code : For parameter_name : Name, parameter : parameters
				Reduce
					"\(sum_indent)var \(Id)_\(parameter_name) = \(parameter_name);" &
					"\(sum_indent)\(parameter_name) = \(parameters.storage_name);" &
					acc &
					"\(sum_indent)\(parameter_name) = \(Id)_\(parameter_name);"
					With acc : action.gen_gen(code : code, indent : sum_indent)

			value :
				For parameter : parameters, parameter_indent : parameter_indents
				Reduce parameter.gen_gen(code : acc, indent : indent & action.extra_indent & parameter_indent)
				With acc : base_code
		}
	}
	not_implemented +: {
		extra_indent : ""
		storage_name : "null"
		gen_gen +: {
			value : "\(indent)throw new System.NotImplementedException(System.String.Format(\"{0}:{1}:{2}-{3}:{4}: \(pretty_name) not implemented\", FileName, StartRow, StartColumn, EndRow, EndColumn));"
		}
	}
	other_code +: {
		extra_indent : "\t"
		argument_list : "\(generator), " &
			(If target_flavour.non_accumulate_flavour.has_cache Then lookup_cache & ", " Else "") &
			(target_flavour.non_accumulate_flavour.call_site {}).value

		gen_gen +: {
			value :
				"\(indent)\(field).Generate(\(argument_list)(\(storage_name)) => {\(indent)\t\(generator).DebugPosition(this);\(code)\(indent)});"
		}
	}
	prepare_lookup_cache +: {
		extra_indent : in.extra_indent
		storage_name : in.storage_name
		parent_context : Lookup parameters.context In Container
		parent_lookup_cache : If inherit Then Lookup lookup_cache In Container Else "null"
		parameters : {
			context : codegen.gen_tmpl {
				extra_indent : ""
				storage_name : new_context
			}
		}
		lookup_cache : Id & "_cache"
		new_context : Id & "_context"
		gen_gen +: {
			value :
				"\(indent)\(name ?? "Environment").GenerateLookupCache(\(generator), \(specials.raw_material(indent : indent)), \(parent_lookup_cache), \(parameters.source_reference.storage_name), \(parent_context.storage_name), \(parameters.self_frame.storage_name), (\(new_context), \(lookup_cache)) => {" &
					"\(indent)\t\(generator).DebugPosition(this);" &
					in.gen_gen(indent : indent & "\t", code : code) &
					"\(indent)});"
		}
		lookup_special_tmpl +: {
			raw_material : Template {
				indent : Required
				value : Required
			}

			# This is here so that our call to the generate of the named elements
			# uses the original lookup context.
			parameters : { context : parent_context }
			# Restore the lookup cache for the child definitions
			lookup_cache : parent_lookup_cache
		}
		no_specials +: {
			raw_material +: {
				value : "null"
			}
		}
		specials_from_definitions +: {
			argument_list : "\(generator), " &
				(If target_flavour.non_accumulate_flavour.has_cache Then lookup_cache & ", " Else "") &
				(target_flavour.non_accumulate_flavour.call_site {}).value

			raw_material +: {
				value :
					"\(field).Select(\(Id)_item => new System.Tuple<RestrictableType, Generator.ParameterisedBlock<Generator.ParameterisedBlock<LoadableValue>>>(\(Id)_item.BoundInfo, \(Id)_block => \(Id)_item.Generate(\(argument_list)(\(Id)_block))))"
			}
		}
		special_from_expression +: {
			raw_material +: {
				value :
					"new[] { new System.Tuple<RestrictableType, Generator.ParameterisedBlock<Generator.ParameterisedBlock<LoadableValue>>>(\(type_storage), \(Id)_block => {" &
					is.gen_gen(indent : indent & "\t", code : "\(indent)\t\(Id)_block(\(is.storage_name));") &
					"})}"
			}
		}
	}
	push_source_reference +: {
		storage_name : in.storage_name
		extra_indent : in.extra_indent
		parent_source_reference :
			If inherit
				Then Lookup parameters.source_reference.storage_name In Container
				Else "null"
		new_source_reference : Id
		parameters : {
			source_reference : codegen.gen_tmpl {
				extra_indent : ""
				storage_name : new_source_reference
			}
		}
		gen_gen +: {
			value :
				"\(indent)var \(new_source_reference) = \(generator).PushSourceReference(\(syntax ?? "this"), \(parent_source_reference));" &
				in.gen_gen(indent : indent, code : code)
		}
	}
	return_intrinsic_dispatch +: {
		extra_indent : of.extra_indent & "\t"
		gen_gen +: {
		value : of.gen_gen(
			indent : indent,
			code :
				"\(indent)\(of.extra_indent)Environment.IntrinsicDispatch(\(generator), this, \(of.storage_name), \(parameters.source_reference.storage_name), (\(storage_name)) => {\(code)\(indent)\(of.extra_indent)});"
			)
		}
	}
	type_dispatch_tmpl +: {
		callback : Id & "_code"
		reference_type : Required
		choice_tmpl +: {
			target_type : Required
		}

		gen_gen +: {
			sum_indent : Required

			choice_block :
				For choice : choices
					Reduce
						"if (\(reference_type) == \(choice.target_type)) {" &
						choice.action.gen_gen(
							indent : sum_indent & "\t",
							code : "\(sum_indent)\(choice.action.extra_indent)\t\(callback)(\(choice.action.storage_name));"
						) & "\(sum_indent)} else " & acc
					With acc :
						"{" &
						default_action.gen_gen(
							indent : sum_indent & "\t",
							code : "\(sum_indent)\(default_action.extra_indent)\t\(callback)(\(default_action.storage_name));"
							) & sum_indent & "}"
			lift_code :
				"\(sum_indent)Generator.ParameterisedBlock<LoadableValue> \(callback) = (\(storage_name)) => {\(code)\(sum_indent)};"
		}
	}
	type_dispatch +: {
		extra_indent : "\t" & of.extra_indent
		reference_type : of.storage_name & ".BackingType"
		choice_tmpl +: {
			target_type : "typeof(\(type.real_type))"
		}
		converted_result : codegen.gen_tmpl {
			extra_indent : ""
			storage_name : of.storage_name
		}

		gen_gen +: {
			sum_indent : indent & of.extra_indent
			value : of.gen_gen(
				indent : indent,
				code : lift_code & sum_indent & choice_block
			)
		}
	}
	type_dispatch_parsed +: {
		extra_indent : "\t"
		reference_type : "\(field).TypeId"
		choice_tmpl +: {
			target_type : type.union_type
		}

		gen_gen +: {
			sum_indent : indent
			value : lift_code & sum_indent & choice_block
		}
	}

	flavour_complex_tmpl : Template {
		parameter_names : Required
		parameter_str :
			For parameter_name : parameter_names
				Reduce "\(acc)LoadableValue _\(parameter_name), "
				With acc :
					"Generator _generator, " &
					(If has_cache Then "LookupCache _cache, " Else "")
		parameter_definitions :
			For parameter_name : parameter_names
			Select parameter_name : gen_tmpl {
				extra_indent : ""
				storage_name : "_" & parameter_name
			}
		call_site : Template {
			parameter_lookups : Required
			value :
				For x : parameter_lookups
					Reduce acc & x.storage_name & ", "
					With acc : ""
		}
	}
	flavour_aware : flavour_complex_tmpl {
		has_cache : True
		parameter_names : [ $source_reference, $context, $self_frame, $container_frame ]
		call_site +: {
			parameter_lookups : [ parameters.source_reference, parameters.context, parameters.self_frame, parameters.container_frame ]
		}
		accumulate_flavour : flavour_aware_accumulate
		non_accumulate_flavour : flavour_aware
	}
	flavour_aware_accumulate : flavour_complex_tmpl {
		has_cache : True
		parameter_names : [ $source_reference, $context, $self_frame, $container_frame, $accumulator ]
		call_site +: {
			parameter_lookups : [ parameters.source_reference, parameters.context, parameters.self_frame, parameters.container_frame, parameters.accumulator ]
		}
		accumulate_flavour : flavour_aware_accumulate
		non_accumulate_flavour : flavour_aware
	}
	flavour_empty : flavour_complex_tmpl {
		has_cache : False
		parameter_names : []
		call_site +: {
			parameter_lookups : []
		}
		accumulate_flavour : flavour_accumulate
		non_accumulate_flavour : flavour_empty
	}
	flavour_accumulate : flavour_complex_tmpl {
		has_cache : False
		parameter_names : [ $source_reference, $accumulator ]
		call_site +: {
			parameter_lookups : [ parameters.source_reference, parameters.accumulator ]
		}
		accumulate_flavour : flavour_accumulate
		non_accumulate_flavour : flavour_empty
	}
	flavour_attribute : flavour_complex_tmpl {
		has_cache : False
		parameter_names : [ $source_reference, $context, $self_frame, $container_frame, $source_template, $target ]
		call_site +: {
			parameter_lookups : [ parameters.source_reference, parameters.context, parameters.self_frame, parameters.container_frame, parameters.source_template, parameters.target ]
		}
		accumulate_flavour : flavour_attribute_accumulate
		non_accumulate_flavour : flavour_attribute
	}
	flavour_attribute_accumulate : flavour_complex_tmpl {
		has_cache : False
		parameter_names : [ $source_reference, $context, $self_frame, $container_frame, $source_template, $target ]
		call_site +: {
			parameter_lookups : [ parameters.source_reference, parameters.context, parameters.self_frame, parameters.container_frame, parameters.source_template, parameters.accumulator ]
		}
		accumulate_flavour : flavour_attribute_accumulate
		non_accumulate_flavour : flavour_attribute
	}
	flavour_repl : flavour_complex_tmpl {
		has_cache : False
		parameter_names : [ $root, $current, $update_current, $escape_value, $print_value ]
		call_site +: {
			parameter_lookups : [ parameters.root, parameters.current, parameters.update_current, parameters.escape_value, parameters.print_value ]
		}
		accumulate_flavour : Null
		non_accumulate_flavour : flavour_repl
	}
}

apigen : compiler_lib.apigen_tmpl {
	add_name +: {
		value :
			(For s : suffixes
				Reduce acc & ", \"\(s)\""
				With acc : "\t\t\(current_api).RegisterUse(\(field).Select(\(Id) => \(Id).ToString())") & ");\n"
	}
	add_reference +: {
		value : "\t\t\(current_api).RegisterRef(Generator.ToString(\(field)));\n"
	}
	create_node +: {
		name_field : Required
		actions : Required
		parent_api : Lookup current_api In Container
		current_api : Id & "_api"
		inferred_type :
			If is_typeable Then "this.InferredType"
			Else If informative || main_field Is Null Then "0"
			Else main_field & ".InferredType"
		value :
			For action : actions
				Reduce acc & action.value
				With acc :
					"\t\tvar \(current_api) = _collect_names ? \(parent_api).CreateChild(Generator.ToString(\(name_field)), this, \(inferred_type), \(If informative Then "true" Else "false")) : \(parent_api);\n\t\tforeach(var \(Id) in \(description_field)) \(Id).GenerateApi(\(current_api), true);\n"
	}
	description_text +: {
		value : "\t\t\(current_api).AppendDescriptionText(Generator.ToString(\(contents_field)));\n"
	}
	description_tag_tmpl +: {
		value :
			(For a : attr, n : Name
				Reduce acc & "\t\t\(Id).SetAttribute(\"\(n)\", Generator.ToString(\(a)));\n"
				With acc :
					"\t\t#pragma warning disable 219\n" &
					"\t\tvar \(Id)_contents = \(contents);\n" &
					(If require_prefix Is Null
						Then ""
						Else "\t\tif (\(Id)_contents.StartsWith(\"\(require_prefix)\")) {\n\t\t\(Id)_contents = \(Id)_contents.Substring(\(Length require_prefix));\n") &
					"\t\tvar \(Id) = \(current_api).AppendDescriptionTag(\"\(xmlns)\", \"\(tag)\", \(Id)_contents);\n\t\t#pragma warning restore 219\n") &
					(If require_prefix Is Null
						Then ""
						Else "\t\t}\n")
	}
	description_tag +: {
		contents : "Generator.ToString(" & contents_field & ")"
	}
	description_tag_collapse +: {
		contents : "System.String.Join(\"\(delimiter)\", \(field).Select(\(Id)_item => \(Id)_item.ToString()))"
	}
	many +: {
		value :
			For action : actions
				Reduce acc & action.value
				With acc : ""
	}
	other +: {
		value :
			For field : fields
				Reduce acc & "\t\t\(field).GenerateApi(\(current_api), \(If collect_names Then "_collect_names" Else "false"));\n"
				With acc : ""
	}
	other_list : Template {
		value : "\t\tforeach(var \(Id) in \(field)) \t\t\t\(Id).GenerateApi(\(current_api), \(If collect_names Then "_collect_names" Else "false"));\n"
	}
}

# The compiler!
compiler : compiler_lib.language_with_repl_tmpl {
	# Since each syntax element corresponds to a class, it should know how to
	# generate a class with all the appropriate methods.
	syntax_element +: {
		class_extra : ""
		indent : "\n\t\t"
		class_name : group_name & "_" & rule_name
		parser_gen :
			"\tinternal static bool ParseRule_\(rule_name)(ref ParserPosition _position, out \(group_name) _result) {\n" &
			"\t\tif(_position.CheckCache<\(class_name), \(group_name)>(out _result)) return _result != null;\n" &
			"\t\tint _start_index = _position.Index;\n" &
			"\t\tvar _obj = new \(class_name)();\n" &
			"\t\t_obj.FileName = _position.Parser.FileName;\n" &
			"\t\t_obj.StartRow = _position.Row;\n" &
			"\t\t_obj.StartColumn = _position.Column;\n" &
			"\t\t_position.TraceEnter(\"\(group_name):\(rule_name)\");\n" &
			pattern.parser_gen & "\n\t}\n"

		current_environment : "_environment"
		environment_method :
			If environment_enabled
				Then
					"\tinternal override Environment PropagateEnvironment(ErrorCollector _collector, System.Collections.Generic.List<AstTypeableNode> _queue, Environment _environment, ref bool _success) {\n" &
					"\t\tEnvironment = _environment;\n" &
					"\t\tEnvironment _return = null;\n" &
					(If environment_enabled Then "\t\t_queue.Add(this);\n" Else "") &
					(For application : apply_environment_to
						Where !(application Is Null)
						Reduce acc & application.value
						With acc : "")
					& "\t\treturn _return;\n"
					& "\t}\n" &
					(For application : apply_environment_to
						Where !(application Is Null)
						Reduce acc & application.class_gen
						With acc : "")
				Else ""

		current_type : "_type"
		current_unbox : "_needs_unbox"
		type_assurance : If is_typeable
			Then "\tpublic override Type EnsureType(ErrorCollector _collector, Type _type, ref bool _success, bool _needs_unbox) {\n\(ensure_type_is.value)\n\t\tInferredType = \(ensure_type_is.result);\t\treturn \(ensure_type_is.result);\n\t}\n"
			Else ""
		type_demands : If environment_enabled
			Then "\tinternal override void MakeTypeDemands(ErrorCollector _collector, ref bool _success) {\n" &
				"\t\t#pragma warning disable 219\n" &
				"\t\tvar _type = NameInfo.AnyType;\n" &
				"\t\tvar _needs_unbox = false;\n" &
				"\t\t#pragma warning restore 219\n" &
				type_demand.value &
				"\n\t}\n"
			Else ""
		current_api : "_api_gen"
		api_gen :
			"\tpublic override void GenerateApi(ApiGenerator _api_gen, bool _collect_names) {\n" &
			(If is_typeable Then "\t\t_api_gen.CollectEnvironment(Environment);\n" Else "") &
			api_value.value &
			"\t}\n"

		generator : "_generator"
		generation_environment : "Environment"
		lookup_cache : If !(generation_flavour Is Null) && generation_flavour.has_cache Then "_cache" Else "null"
		parameters : If generation_flavour Is Null Then Null Else generation_flavour.parameter_definitions
		code_gen: If generation_flavour Is Null
			Then ""
			Else
				("\tpublic override void Generate(" &
					generation_flavour.parameter_str &
					"Generator.ParameterisedBlock<LoadableValue> _final_block) {\n" &
					"\t\t\(generator).DebugPosition(this);" &
					code_value.gen_gen(indent : default_indent, code : "\(indent)\(code_value.extra_indent)_final_block(\(code_value.storage_name));") &
					"\n\t}\n")

		class_gen :
			"internal class \(class_name) : \(group_name) {\n" &
			"\tpublic override string PrettyName { get { return \"\(pretty_name)\"; } }\n" &
			pattern.class_gen &
			environment_method &
			type_assurance &
			type_demands &
			code_gen &
			api_gen &
			class_extra &
			"\tinternal \(class_name) Clone() {\n" &
			"\t\tvar _obj = new \(class_name)();\n" &
			common_field_copy_instance & pattern.copy_instance &
			"\t\treturn _obj;\n\t}\n}\n"

		parse_complete : Template {
			ok : Required
			value :
				"\(indent)_position.Cache<\(class_name)>(_start_index, \(If ok Then "_obj" Else "null"));" &
				"\(indent)_position.TraceExit(\"\(group_name):\(rule_name)\", \(If ok Then "true" Else "false"));" &
				(If ok
					Then "\(indent)_obj.EndRow = _position.Row;\(indent)_obj.EndColumn = _position.Column;\(indent)_result = (\(group_name))_obj;\(indent)return true;"
					Else "\(indent)_result = null;\(indent)return false;")
		}
	}
	# Generates the super class for a syntax group and all the appropriate method stubs.
	syntax_group +: {
		super_class_extra : ""
		common_field_class_gen : For field : expanded_common Reduce acc & field.class_gen With acc : ""
		common_field_copy_instance : For field : expanded_common Reduce acc & field.copy_instance With acc : static_copy_instance

		parser_gen :
			For rule : expanded_rules
			Where rule.is_real_element
			Reduce acc & rule.parser_gen
			With acc : ""
		parse_base : If include_base_parser Then
			"\tinternal static bool ParseRule_Base(ref ParserPosition position, out \(group_name) result) {\n" &
			"\t\tposition.TraceEnter(\"\(group_name)\");\n" &
			"\t\tif(position.CheckCache<\(group_name)>(\"\(group_name)\", out result)) return result != null;\n" &
			"\t\tParserPosition slave_position;\n" &
			"\t\tvar start_index = position.Index;\n" &
			"\t\tposition.Update(\"any \(group_name)\", \"\(group_name)\");" &
			(For rule : expanded_rules, rule_name : Name
				Where rule.is_real_element
				Reduce acc &
					"\t\tslave_position = position.Clone();\n" &
					"\t\tif (ParseRule_\(rule_name)(ref slave_position, out result)) {\n" &
					"\t\t\tposition = slave_position;\n" &
					"\t\t\tposition.TraceExit(\"\(group_name)\", true);\n" &
					"\t\t\tposition.Cache<\(group_name)>(\"\(group_name)\", start_index, result);\n" &
					"\t\t\treturn true;\n\t\t}\n"
				With acc : "") &
			"\t\tresult = null;\n" &
			"\t\tposition.TraceExit(\"\(group_name)\", false);\n" &
			"\t\tposition.Cache<\(group_name)>(\"\(group_name)\", start_index, null);\n" &
			"\t\treturn false;\n\t}\n"
			Else ""

		parse_rule_initiator : Template {
			alternate_name : Required
			value :
				For rule_name : Name, rule : expanded_rules
					Select rule_name :
						"\t\tslave_position = position.Clone();\n" &
						"\t\tif (ParseRule_" &
						(If rule.is_real_element Then rule_name Else rule.alternate_name) &
						"(ref slave_position, out result)) {\n" &
						"\t\t\tposition = slave_position;\n" &
						"\t\t\tposition.TraceExit(\"\(group_name):\(alternate_name)\", true);\n" &
						"\t\t\tposition.Cache<\(group_name)>(\"\(group_name).\(alternate_name)\", start_index, result);\n" &
						"\t\t\treturn true;\n\t\t}\n"
		}

		parse_alternates : For alternate_rules : alternatives, alternate_name : Name
			Reduce
				outer_acc &
				"\tinternal static bool ParseRule_\(alternate_name)(ref ParserPosition position, out \(group_name) result) {\n" &
				"\t\tposition.TraceEnter(\"\(alternate_name)\");\n" &
				"\t\tif(position.CheckCache<\(group_name)>(\"\(group_name).\(alternate_name)\", out result)) return result != null;\n" &
				"\t\tParserPosition slave_position;\n" &
				"\t\tvar start_index = position.Index;\n" &
				"\t\tposition.Update(\"\(alternate_name)\", \"\(group_name)\");\n" &
				(For rule_name : Name, initiator : parse_rule_initiator(alternate_name : alternate_name), rule : expanded_rules
					Where (For rule_alts : rule.alternatives, rule_alt_name : Name Where rule_alt_name == alternate_name Reduce True With junk_acc : False)
					Reduce acc & initiator
					With acc : "") &
				"\t\tresult = null;\n" &
				"\t\tposition.TraceExit(\"\(group_name):\(alternate_name)\", false);\n" &
				"\t\tposition.Cache<\(group_name)>(\"\(group_name).\(alternate_name)\", start_index, null);\n" &
				"\t\treturn false;\n\t}\n"
			With outer_acc : ""

		code_gen: If generation_flavour Is Null
			Then ""
			Else
				"\tpublic abstract void Generate(\(generation_flavour.parameter_str)Generator.ParameterisedBlock<LoadableValue> _block);\n"

		value : For rule : expanded_rules
			Where rule.is_real_element
			Reduce acc & rule.class_gen
			With acc : "internal abstract class \(group_name) : \(If environment_enabled Then "AstTypeableNode" Else "AstNode")\(If is_typeable Then ", ITypeableElement" Else "") {\n" &
				(If is_typeable Then "\tpublic abstract Type EnsureType(ErrorCollector _collector, Type _type, ref bool _success, bool needs_unbox);\n" Else "") &
				common_field_class_gen &
				super_class_extra &
				parse_base &
				parse_alternates &
				parser_gen &
				code_gen &
				"}\n"
	}
	# Defines a parser for a CLI-compliant name.
	cli_identifier : Template parser.sequence {
		of : [
			parser.char_class {
				classes : [
					letter_lower,
					letter_modifier,
					letter_other,
					letter_title,
					letter_upper,
					number_letter
				]
			},
			parser.many {
				of : parser.char_class {
					classes : [
						letter_lower,
						letter_modifier,
						letter_other,
						letter_title,
						letter_upper,
						mark_combining,
						mark_nonspace,
						number_decimal,
						number_letter,
						other_format,
						punctuation_connector
					]
				}
			}
		]
	}

	# For rule groups, some require special handling not inferable from the
	# compiler, so the `super_class_extra` and `class_extra` attributes provide
	# that content.
	rule_groups +: {
		attribute +: {
			super_class_extra :
				"\tinternal void AddMask(ErrorCollector collector, Environment environment) { environment.AddMask(Generator.ToString(name), this); }\n"
		}
		fricassee_merge_input +: {
			prepare_operations : {
				name : codegen.gen_tmpl {
					extra_indent : ""
					storage_name : "_name"
				}
				target_frame : codegen.gen_tmpl {
					extra_indent : ""
					storage_name : "_target_frame"
				}
				ordinal : codegen.gen_tmpl {
					extra_indent : ""
					storage_name : "_ordinal"
				}
				matched_frame : codegen.gen_tmpl {
					extra_indent : ""
					storage_name : "_matched_frame"
				}
			}
			super_class_extra :
				"\tinternal void AddMask(ErrorCollector collector, Environment environment) { environment.AddMask(Generator.ToString(name), this); }\n" &
				"\tinternal abstract void PrepareValue(" &
					generation_flavour.parameter_str &
					"LoadableValue _matched_frame, LoadableValue _ordinal, LoadableValue _name, LoadableValue _target_frame);\n" &
					"\tinternal abstract bool NeedsGeneration { get; }\n"

				merge_input_tmpl +: {
					class_extra :
						"\tinternal override void PrepareValue(" &
							generation_flavour.parameter_str &
							"LoadableValue _matched_frame, LoadableValue _ordinal, LoadableValue _name, LoadableValue _target_frame) {\n" &
							"\t\t\(generator).DebugPosition(this);" &
							"\t\tvar _state = \(generator).DefineState();" &
							prepare_value.gen_gen(
								indent : default_indent,
								code :
									"\(default_indent)\(prepare_value.extra_indent)\(generator).JumpToState(_state);"
								) &
							"\n\t\t\(generator).MarkState(_state);\n" &
							"\t}\n" &
							"\tinternal override bool NeedsGeneration { get { return \(If needs_generation Then "true" Else "false"); } }\n"

				}
		}
		named_definition +: {
			super_class_extra : "\tinternal void AddMask(ErrorCollector collector, Environment environment) { BoundInfo = environment.AddMask(Generator.ToString(name), this); }\n\tinternal RestrictableType BoundInfo;\n"
		}
		identifier +: {
			rules +: {
				literal_identifier +: {
					class_extra : "\tpublic override string ToString() { return Generator.ToString(name); }\n"
				}
			}
		}
		type_name +: {
			super_class_extra : "\tinternal abstract Type TypeId { get; }\n\tinternal abstract Type CastableFrom { get; }\n\tinternal abstract bool Unbox { get; }\n"
			type_element +: {
				castable_from_type_bits : For t : castable_from Reduce acc & " | " & t.union_type With acc : type.union_type
				class_extra : "\tinternal override Type TypeId { get { return \(type.union_type); } }\n\tinternal override Type CastableFrom { get { return \(castable_from_type_bits); }}\n\tinternal override bool Unbox { get { return \(If type.unbox Then "true" Else "false"); }}\n"
			}
		}
		expression +: {
			rules +: {
					xcomputation : Template expression_tmpl {
					level : 19
					pretty_name : "invoke CLI Flabbergast.Computation class"
					class_extra : "\t\tSystem.Reflection.ConstructorInfo constructor;"
					pattern : parser.sequence {
						of : [
							parser.allow_extensions {},
							parser.exact { word : "XComputation" },
							space { mandatory : True },
							parser.accumulate_string {
								field : "type_name"
								in : parser.many {
									nonempty : True
									accumulate : True
									separator : parser.single { char : ".," }
									of : cli_identifier { }
								}
							}
						]
					}
					apply_environment_to : []
					ensure_type_is : ensure_type.multiple {
						actions : [
							ensure_type.intrinsic {},
							{
								result : current_type
								value :
									"\(indent)System.Type type = System.Type.GetType(Generator.ToString(type_name), false);" &
									"\(indent)if (type == null) {" &
									"\(indent)\t_success = false;" &
									"\(indent)\t_collector.ReportRawError(this, \"No such type \" + type_name + \".\");" &
									"\(indent)} else {" &
									"\(indent)\tconstructor = type.GetConstructor(new[] { typeof(TaskMaster), typeof(SourceReference), typeof(Context), typeof(Frame), typeof(Frame) });" &
									"\(indent)\tif (!typeof(Computation).IsAssignableFrom(type)) {" &
									"\(indent)\t\t_success = false;" &
									"\(indent)\t\t_collector.ReportRawError(this, \"Type \" + type_name + \" does not extend Flabbergast.Computation.\");" &
									"\(indent)\t}" &
									"\(indent)\tif (constructor == null) {" &
									"\(indent)\t\t_success = false;" &
									"\(indent)\t\t_collector.ReportRawError(this, \"No valid constructor in type \" + type_name + \" found.\");" &
									"\(indent)\t}" &
									"\(indent)}"
							}
						]
					}
					api_value : apigen.nop {}
					code_value : codegen.return_intrinsic_dispatch {
						of : codegen.gen_tmpl {
							extra_indent : ""
							gen_gen +: {
									value :
										"\(indent)\(generator).StartInterlock(1);" &
										"\(indent)\(generator).LoadTaskMaster();" &
										"\(indent)\(parameters.source_reference.storage_name).Load(\(generator));" &
										"\(indent)\(parameters.context.storage_name).Load(\(generator));" &
										"\(indent)\(parameters.self_frame.storage_name).Load(\(generator));" &
										"\(indent)\(parameters.container_frame.storage_name).Load(\(generator));" &
										"\(indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Newobj, constructor);" &
										"\(indent)var \(storage_name) = \(generator).MakeField(\"xcomputation\", typeof(object));" &
										"\(indent)\(generator).GenerateConsumeResult(\(storage_name), true);" &
										"\(indent)\(generator).Builder.Emit(System.Reflection.Emit.OpCodes.Call, typeof(Computation).GetMethod(\"Notify\", new[] { typeof(ConsumeResult) }));" &
										"\(indent)\(generator).StopInterlock();" &
										code
							}
						}
					}
				}
				# This is a special expression to call methods in the CLI libraries.
				xinvoke : Template expression_tmpl {
					level : 19
					pretty_name : "invoke CLI method"
					pattern : parser.sequence {
						of : [
							parser.allow_extensions {},
							parser.exact { word : "XInvoke" },
							space { mandatory : True },
							parser.accumulate_string {
								field : "type_name"
								in : parser.many {
									nonempty : True
									accumulate : True
									separator : parser.single { char : ".," }
									of : cli_identifier { }
								}
							},
							space { mandatory : True },
							parser.accumulate_string {
								field : "method_name"
								accumulate: True
								in : cli_identifier { }
							},
							space { },
							parser.exact { word : "(" },
							parser.accumulate_list {
								type : "expression"
								field : "arguments"
								in : parser.many_word {
									separator_word : ","
									of : parser.sequence {
										of : [
											space { preferred : True },
											parser.other {
												type : "expression"
												alternate : "expression0"
												field : Null
											},
											space { }
										]
									}
								}
							},
							parser.exact { word : ")" }
						]
					}
					class_extra : "\tprivate System.Collections.Generic.List<System.Reflection.MethodInfo> Methods = new System.Collections.Generic.List<System.Reflection.MethodInfo>();\n"
					apply_environment_to : [
						environment.list_of { field : "arguments" },
						environment.application_action {
							class_gen : ""
							value :
								"\t\tReflectMethod(_collector, this, Generator.ToString(type_name), Generator.ToString(method_name), arguments.Count, Methods, ref _success);\n"
						}
					]
					ensure_type_is : {
						value : "\(indent)var \(Id) = CheckReflectedMethod(_collector, this, Methods, arguments, \(current_type), ref _success);"
						result : Id
					}
					api_value : apigen.other_list { field : $arguments }
					code_value : codegen.gen_tmpl {
						extra_indent : "\t\t"
						argument_list : "\(generator), " &
							(If generation_flavour.non_accumulate_flavour.has_cache Then lookup_cache & ", " Else "") &
							(generation_flavour.non_accumulate_flavour.call_site {}).value

						gen_gen +: {
							value :
								"\(indent)\(generator).Fold((RevCons<LoadableValue>) null, arguments, (\(Id)_index, \(Id)_item, \(Id)_tail, \(Id)_block) => \(Id)_item.Generate(\(argument_list)(\(Id)_result) => \(Id)_block(new RevCons<LoadableValue>(\(Id)_result, \(Id)_tail))), (\(Id)_args) => {" &
								"\(indent)\t\(generator).DebugPosition(this);" &
								"\(indent)\tvar \(storage_name) = \(generator).InvokeNative(\(parameters.source_reference.storage_name), Methods, \(Id)_args == null ? new LoadableValue[0] : \(Id)_args.ToArray());" &
								"\(indent)\tif (\(storage_name) != null) {" &
								code &
								"\(indent)\t}" &
								"\(indent)});"
						}
					}
				}
				xfield : Template expression_tmpl {
					level : 19
					pretty_name : "access CLI field"
					pattern : parser.sequence {
						of : [
							parser.allow_extensions {},
							parser.exact { word : "XField" },
							space { mandatory : True },
							parser.accumulate_string {
								field : "type_name"
								in : parser.many {
									nonempty : True
									accumulate : True
									separator : parser.single { char : ".," }
									of : cli_identifier { }
								}
							},
							space { mandatory : True },
							parser.accumulate_string {
								field : "field_name"
								accumulate: True
								in : cli_identifier { }
							}
						]
					}
					class_extra : "\tprivate System.Reflection.FieldInfo Field;\n"
					apply_environment_to : [
						environment.application_action {
							class_gen : ""
							value :
								"\t\tField = ReflectField(_collector, this, Generator.ToString(type_name), Generator.ToString(field_name), ref _success);\n"
						}
					]
					ensure_type_is : ensure_type.filter {
						types : Drop
						type_bits : "(Field == null ? 0 : AstTypeableNode.TypeFromClrType(Field.FieldType))"
					}
					api_value : apigen.nop {}
					code_value : codegen.gen_tmpl {
						extra_indent : "\t\t"

						gen_gen +: {
							value :
								"\(indent)var \(storage_name) = new StaticFieldValue(Field);" &
								code
						}
					}
				}
			}
		}
	}
	value : "using System.Linq;\nnamespace Flabbergast {\n" & (For group : expanded_groups Reduce acc & group.value With acc : "") & "}"
}
value : compiler.value
