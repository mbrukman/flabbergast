'\" t
.\" Authors: Andre Masella
.TH flabbergast 7 "Jan 2015" "1.0" "MISCELLANEOUS"
.SH NAME
flabbergast_language \- The definition of the Flabbergast language
.ds < \v'0.4m'\x'\\n(0x=0*0.2m'\s-3
.ds > \s0\v'-0.4m'
.SH SYNOPSIS
Flabbergast is a language for creating configuration structures that can be rendered to a final configuration. Each expression is side-effect free. It has unusual look-up semantics, explained below.

This document is the formal specification for the language. Fundamentally, there are three important types of values in the language: frames, key-value pairs; templates, key-template pairs; and scalar values. There is an import mechanism that functions are the foreign function interface of the language. Each frame and template has an associated lookup environment, which is an ordered list of frames.

There are several important features of the language:
.IP \[bu]
contextual lookup creates dynamic scoping
.IP \[bu]
values have scope, expressions do not. This an effect of contextual lookup.
.IP \[bu]
inheritance can be changed. That is, a frame can extend another frame, but this cannot be known at compile-time. This an effect of contextual lookup.

.SH GENERAL NOTES ON SYNTAX
In the language, language-defined names, a.k.a. keywords, are of the format [\fBA\fR-\fBZ\fR][\fBA\fR-\fBZa\fR-\fBz\fR]*. All user-defined names, a.k.a. identifiers, are of the form [\fBa\fR-\fBz\fR][\fBA\fR-\fBZa\fR-\fBz0\fR-\fB9_\fR]*. There are other symbols in the language, all of them ASCII. Strings and comments may contain Unicode data.

No keyword defined in this specification will ever begin with X. Implementation-specific keywords for debugging are permissible if they begin with X.

Future versions may extend the keyword system to Unicode.

.SH TYPES IN THE LANGUAGE
.TP
Bin
a byte string
.TP
Bool
a Boolean value. Maybe either \fBTrue\fR or \fBFalse\fR.
.TP
Float
IEEE floating point number
.TP
Frame
a mapping from identifiers to values, which are of the types mentioned in this section. No duplicate identifiers are permitted (i.e., the identifier space is a set).
.TP
Int
platform-specific integral number
.TP
Str
a Unicode text string
.TP
Template
a mapping from from identifiers to expressions. No duplicate identifiers are permitted (i.e., the identifier space is a set).
.TP
Unit
the type of the \fBNull\fR value.

.SH GRAMMAR AND SEMANTICS
Line-terminated comments may start with \fB#\fR. The grammar is a PEG, so assume that low precedence rules are shown first.

For convenience of writing, expression are broken into groups, based on precedence. It can be assumed that the PEG expression for group \fIx\fR, with expressions \fIA\fR, \fIB\fR, ... is

.RS
E\*<\fIx\fR\*> = \fIA\fR / \fIB\fR / E\*<\fIx+1\fR\*>
.RE

If unspecified, assume E\*<\fIx\fR\*>. The rule E\*<\fI+\fR\*> is short-hand for E\*<\fIx+1\fR\*>.

Literal values that must be matched exactly, including keywords, are written in \fBthis type-face\fR. Any space can be a combination of any Unicode space or comments. Other rules are referenced with a preceding name for the result (e.g., a:E parses and expression E and it is referred to in the accompanying text and semantics as a).

For the semantics, they are written as a Horn clause of the form:

.de SEM
.HP
.B Definition:
\\$* :-
.br
.in +0.5i
..
.de SEME
.in
..
.RS
(\fIT\fR\*<0\*>*, \fIT\fR\*<1\*>, ...) ⊢ \fIexpr\fR ↓ value :: type :- ...
.RE

where \fIT\fR is a frames used for lookup. Some frames are marked with an * to change lookup semantics. If the lookup environment is unused, it is elided. If the type is implied, it is elided.

Since frames and templates are manipulated by the language, their values have special representation. A frame is written < u; Γ; k\*<a\*> → v\*<a\*>, k\*<b\*> → v\*<b\*>, ... >. It is implied that there are no two values of \fIk\fR that exist in the same frame. A template is written < Γ; k\*<a\*> → e\*<a\*>, k\*<b\*> → e\*<b\*>, ... >. Again, it is implied that there are no duplicate \fIk\fR. Since both frames and templates have a key space that is a set, it is reasonable to allow all normal set operations over them. Since the contents of a frame or template indicate what it it is, the type can be elided. Both have context information, Γ, which is a list of frames for resolution. Frames also contain a unique identifier, \fIu\fR, which is a string containing valid Flabbergast identifier such that no two frames in the program have the same identifier.

.SS FILE FRAME (START)
The top-level entity is a file frame.

.SEM a:(A*) ↓ x
() ⊢  \fB{\fR a \fB}\fR ↓ x
.SEME

.SS EXPRESSION SYNTAX (E) – NAME BINDING
.TP
Bind a new name

.SEM (t, ...) ⊢ \fBLet\fR name:I \fB:\fR nameexpr:E\*<0\*> (\fB,\fR name:I \fB:\fR nameexpr:E\*<0\*> )* \fBIn\fR expr:E ↓ v
∀ nameexpr : Γ ⊢ nameexpr ↓ v\*<nameexpr\*>,

(< u; (t, ...); ∀ name, nameexpr : nname → v\*<nameexpr\*> >*, t, ...) ⊢ expr ↓ v
.SEME

.SS EXPRESSION SYNTAX (E) – FRICASSÉE
.TP
Fricassée a frame (a.k.a. \fBFor\fR expressions)

.SEM Γ ⊢ \fBFor\fR s:FS r:FR ↓ v
Γ ⊢ s ↓ W = ( < u\*<1\*>; Γ\*<1\*>; k\*<x\*> → v\*<x1\*>, k\*<y\*> → v\*<y1\*>, ... >, < u\*<2\*>; Γ\*<2\*>; k\*<x\*> → v\*<x2\*>, k\*<y\*> → v\*<y2\*>, ... >, ... ),

Γ; W ⊢ r ↓ v
.SEME
.SEM Γ ⊢ \fBFor\fR s:FS \fBWhere\fR expr:E\*<0\*> r:FR ↓ v
Γ ⊢ s ↓ W,

∀ w\*<i\*> ∈ W : (w\*<i\*>*, t, ...) ⊢ expr ↓ v\*<i\*> :: Bool,

X = { w\*<i\*> ∈ W | v\*<i\*> = True }

Γ; X ⊢ r ↓ v
.SEME

This operator allows iterating over the values in a frame to produce some new result. The syntax is handled in two pieces: a selection component (FS) that creates a list of frames, each being an environment in which the relevant values from the input are defined (i.e., it is a list of whitnesses), a results component that evaluates expressions using the witnesses and produces a result. Optionally, a filter expression can be provided to exclude certain witnesses.

.SS EXPRESSION SYNTAX (E) – CONDITITONAL
.TP
Conditional

.SEM Γ ⊢ \fBIf\fR cond:E\*<0\*> \fBThen\fR true:E\*<0\*> \fBElse\fR false:E ↓ x
Γ ⊢ cond ↓ True,

Γ ⊢ true ↓ x
.SEME

.SEM Γ ⊢ \fBIf\fR cond:E\*<0\*> \fBThen\fR true:E\*<0\*> \fBElse\fR false:E ↓ x
Γ ⊢ cond ↓ False,

Γ ⊢ false ↓ x
.SEME

Computes the \fIcond\fR and, if boolean, returns \fItrue\fR or \fIfalse\fR depending on the value. Otherwise, an error. The expression which is not selected is not evaluated.

.SS EXPRESSION SYNTAX (E) – CONCATENATION
.TP
Concatenate two strings
.SEM Γ ⊢ a:E\*<+\*> \fB&\fR b:E ↓ \(dqxy\(dq
Γ ⊢ a \fBTo Str\fR ↓ \(dqx\(dq :: Str,

Γ ⊢ b \fBTo Str\fR ↓ \(dqy\(dq :: Str
.SEME

.TP
Concatenate two frames
.SEM (s, ...) ⊢ a:E\*<+\*> \fBAppend\fR b:E ↓ t = < u; (t, s, ...); ORD(x) → av\*<x\*>, ORD(|at| + y) → bv\*<y\*> >
(s, ...) ⊢ a ↓ at = < ac; ae; ak\*<x\*> → av\*<x\*> >,

(s, ...) ⊢ b ↓ < bc; be; bk\*<y\*> → bv\*<y\*> >,

(s, ...) ⊢ \fBThis\fR ↓ u

.SEME

.SS EXPRESSION SYNTAX (E) – DISJUNCTION
.TP
Logical disjunction (short circuiting)

.SEM Γ ⊢ a:E\*<+\*> \fB||\fR b:E ↓ True
Γ ⊢ a ↓ True
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB||\fR b:E ↓ v
Γ ⊢ a ↓ False,

Γ ⊢ b ↓ v :: Bool
.SEME

.SS EXPRESSION SYNTAX (E) – CONJUNCTION
.TP
Logical intersection (short circuiting)
expr \fB&&\fR expr

.SEM Γ ⊢ a:E\*<+\*> \fB&&\fR b:E ↓ False
Γ ⊢ a ↓ False
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB&&\fR b:E ↓ v
Γ ⊢ a ↓ True,

Γ ⊢ b ↓ v :: Bool
.SEME

.SS EXPRESSION SYNTAX (E) – COMPARISON

.TP
Equality check
.SEM Γ ⊢ a:E\*<+\*> \fB==\fR b:E\*<+\*> ↓ True
Γ ⊢ a \fB<=>\fR b ↓ 0 :: Int
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB==\fR b:E\*<+\*> ↓ False
Γ ⊢ a \fB<=>\fR b ↓ x :: Int,
x ≠ 0
.SEME

.TP
Inequality check
.SEM Γ ⊢ a:E\*<+\*> \fB!=\fR b:E\*<+\*> ↓ False
Γ ⊢ a \fB<=>\fR b ↓ 0 :: Int
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB!=\fR b:E\*<+\*> ↓ True
Γ ⊢ a \fB<=>\fR b ↓ x :: Int,

x ≠ 0
.SEME

.TP
Greater than check
.SEM Γ ⊢ a:E\*<+\*> \fB>\fR b:E\*<+\*> ↓ True
Γ ⊢ a \fB<=>\fR b ↓ 1 :: Int
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB>\fR b:E\*<+\*> ↓ False
Γ ⊢ a \fB<=>\fR b ↓ x :: Int,

x ≠ 1
.SEME

.TP
Greater than or equal to check

.SEM Γ ⊢ a:E\*<+\*> \fB>=\fR b:E\*<+\*> ↓ False
Γ ⊢ a \fB<=>\fR b ↓ -1 :: Int
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB>=\fR b:E\*<+\*> ↓ True
Γ ⊢ a \fB<=>\fR b ↓ x :: Int,

x ≠ -1
.SEME

.TP
Less than check
.SEM Γ ⊢ a:E\*<+\*> \fB<\fR b:E\*<+\*> ↓ True
Γ ⊢ a \fB<=>\fR b ↓ -1 :: Int
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB<\fR b:E\*<+\*> ↓ False
Γ ⊢ a \fB<=>\fR b ↓ x :: Int,

x ≠ -1
.SEME

.TP
Less than or equal to check

.SEM Γ ⊢ a:E\*<+\*> \fB<=\fR b:E\*<+\*> ↓ False
Γ ⊢ a \fB<=>\fR b ↓ 1 :: Int
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB<=\fR b:E\*<+\*> ↓ True
Γ ⊢ a \fB<=>\fR b ↓ x :: Int,

x ≠ 1
.SEME

.SS EXPRESSION SYNTAX (E) – ORDERING
.TP
Ordering operator
.SEM Γ ⊢ a:E\*<+\*> \fB<=>\fR b:E\*<+\*> ↓ z :: Int
Γ ⊢ a ↓ x :: Int ∨ Γ ⊢ a ↓ x :: Float,

Γ ⊢ b ↓ y :: Int ∨ Γ ⊢ b ↓ x :: Float,

z = sgnum(x - y)
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB<=>\fR b:E\*<+\*> ↓ 0 :: Int
Γ ⊢ a ↓ True,

Γ ⊢ b ↓ True
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB<=>\fR b:E\*<+\*> ↓ 0 :: Int
Γ ⊢ a ↓ False,

Γ ⊢ b ↓ False
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB<=>\fR b:E\*<+\*> ↓ -1 :: Int
Γ ⊢ a ↓ False,

Γ ⊢ b ↓ True
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB<=>\fR b:E\*<+\*> ↓ 1 :: Int
Γ ⊢ a ↓ True,

Γ ⊢ b ↓ False
.SEME

.SEM Γ ⊢ a:E\*<+\*> \fB<=>\fR b:E\*<+\*> ↓ UTS10(x, y) :: Int
Γ ⊢ a ↓ x :: Str,

Γ ⊢ b ↓ y :: Str
.SEME

Compares operands for ordering. It returns the integer -1 (left is before right), 0 (both equivalent), or 1 (right is before right) based on the operands. All combinations not listed are errors (this includes all comparisons with \fBNull\fR).

.TS
tab(;);
al;e.
\fBOperand Types;Behaviour\fR
Both str;T{
Collated the strings using Unicode Technical Standard 10.
T}
Both bool;T{
Compare where \fBFalse\fR < \fBTrue\fR.
T}
Both float;T{
Compare numerically. If either value is NaN, raise an error.
T}
Both int;T{
Compare numerically.
T}
One int, one float;T{
Upgrade the integer to a float and compare as floats.
T}
.TE

Note that string comparison is locale-dependent.

.SS EXPRESSION SYNTAX (E) – BIT-WISE DISJUNCTION
.TP
Bit-wise disjunction

.SEM Γ ⊢ a:E\*<+\*> \fB||\fR b:E ↓ BITWISE_OR(v, w) :: Int
Γ ⊢ a ↓ v :: Int,

Γ ⊢ b ↓ w :: Int
.SEME

.SS EXPRESSION SYNTAX (E) – BIT-WISE SYMMETRIC DIFFERENCE
.TP
Bit-wise symmetric difference (exclusive or)

.SEM Γ ⊢ a:E\*<+\*> \fB||\fR b:E ↓ BITWISE_XOR(v, w) :: Int
Γ ⊢ a ↓ v :: Int,

Γ ⊢ b ↓ w :: Int
.SEME

.SS EXPRESSION SYNTAX (E) – BIT-WISE CONJUNCTION
.TP
Bit-wise conjunction

.SEM Γ ⊢ a:E\*<+\*> \fB||\fR b:E ↓ BITWISE_AND(v, w) :: Int
Γ ⊢ a ↓ v :: Int,

Γ ⊢ b ↓ w :: Int
.SEME

.SS EXPRESSION SYNTAX (E) – ARITHMETIC DISJUNCTION
.TP
Addition and Subtraction

.SEM Γ ⊢ a:E\*<+\*> o:(\fB+\fR / \fB-\fR) b:E\*<+\*> r:((\fB+\fR / \fB-\fR) E\*<+\*>)* ↓ z :: Int
Γ ⊢ a ↓ x :: Int,

Γ ⊢ b ↓ y :: Int,

w = O(x, y),

Γ ⊢ w r ↓ z
.SEME

.SEM Γ ⊢ a:E\*<+\*> o:(\fB+\fR / \fB-\fR) b:E\*<+\*> r:((\fB+\fR / \fB-\fR) E\*<+\*>)* ↓ z :: Float
Γ ⊢ a ↓ x :: Int ∨ Γ ⊢ a ↓ x :: Float,

Γ ⊢ b ↓ y :: Int ∨ Γ ⊢ b ↓ y :: Float,

w = O(x, y),

Γ ⊢ w r ↓ z
.SEME

.SS EXPRESSION SYNTAX (E) – ARITHMETIC CONJUNCTION
.TP
Multiplication, Division and Modulus

.SEM Γ ⊢ a:E\*<+\*> o:(\fB*\fR / \fB/\fR) b:E\*<+\*> r:((\fB*\fR / \fB/\fR) E\*<+\*>)+ ↓ z :: Int
Γ ⊢ a ↓ x :: Int,

Γ ⊢ b ↓ y :: Int,

w = O(x, y),

Γ ⊢ w r ↓ z
.SEME

.SEM Γ ⊢ a:E\*<+\*> o:(\fB*\fR / \fB/\fR / \fB%\fR) b:E\*<+\*> r:((\fB*\fR / \fB/\fR / \fB%\fR) E\*<+\*>)+ ↓ z :: Float
Γ ⊢ a ↓ x :: Int ∨ Γ ⊢ a ↓ x :: Float,

Γ ⊢ b ↓ y :: Int ∨ Γ ⊢ b ↓ y :: Float,
w = O(x, y),

Γ ⊢ w r ↓ z
.SEME

Where the \fIO\fR is multiplication for \fB*\fR, division for \fB/\fR, and modulus for \fB%\fR. In the integer case, these operations are carried out per C semantics. For the floating point case, these are carried out using IEEE-754, where modulus is equivalent to the C function \fBfmod\fR.

.SS EXPRESSION SYNTAX (E) – RANGE
.TP
Range of integers
.SEM (t, ...) ⊢ start:E\*<+\*> \fBThrough\fR end:E\*<+\*> ↓ r = < u; r, t, ...; ∀ x ≥ s ∧ x ≤ e : ORD(x) → x :: Int >
(t, ...) ⊢ start ↓ s :: Int,

(t, ...) ⊢ end ↓ e :: Int
.SEME

Produce a list of integers that counts from the value of \fIstart\fR up to and including \fIend\fR, both of which must be integers. If \fIend\fR is less than \fIstart\fR an empty list is produced.

.SS EXPRESSION SYNTAX (E) – TYPE MANIPULATION

.TP
Coerce a value to the same type
.SEM Γ ⊢ expr:E\*<+\*> \fBTo\fR t ↓ v :: t
Γ ⊢ expr ↓ v :: t
.SEME

.TP
Coerce a value to a float
.SEM Γ ⊢ expr:E\*<+\*> \fBTo\fR \fBFloat\fR ↓ v :: Float
Γ ⊢ expr ↓ v :: Int
.SEME

.TP
Coerce a value to an integer
.SEM Γ ⊢ expr:E\*<+\*> \fBTo\fR \fBInt\fR ↓ ROUND_TOWARD_ZERO(v) :: Int
Γ ⊢ expr ↓ v :: Float
.SEME

See IEEE 754 for semantics of ROUND_TOWARD_ZERO (a.k.a., truncation).

.TP
Coerce a value to an string
.SEM Γ ⊢ expr:E\*<+\*> \fBTo\fR \fBStr\fR ↓ PRINTF(\(dq%d\(dq, v) :: Str
Γ ⊢ expr ↓ v :: Int
.SEME
.SEM Γ ⊢ expr:E\*<+\*> \fBTo\fR \fBStr\fR ↓ PRINTF(\(dq%f\(dq, v) :: Str
Γ ⊢ expr ↓ v :: Float
.SEME
.SEM Γ ⊢ expr:E\*<+\*> \fBTo\fR \fBStr\fR ↓ \(dqTrue\(dq :: Str
Γ ⊢ expr ↓ True
.SEME
.SEM Γ ⊢ expr:E\*<+\*> \fBTo\fR \fBStr\fR ↓ \(dqFalse\(dq :: Str
Γ ⊢ expr ↓ False
.SEME

PRINTF conforms to
.BR printf (3)
defined in C89.

.TP
Type enforcement.
.SEM Γ ⊢ expr:E\*<+\*> \fBEnforce\fR type:T ↓ v
Γ ⊢ expr ↓ v :: T
.SEME

Checks if a value has a particular type and returns the value. If it does not, an error occurs.

.TP
Type check
.SEM Γ ⊢ expr:E\*<+\*> \fBIs\fR type:T ↓ True
Γ ⊢ expr ↓ v :: type
.SEME

.SEM Γ ⊢ expr:E\*<+\*> \fBIs\fR type:T ↓ False
Γ ⊢ expr ↓ v :: t,

t ≠ type
.SEME

Returns \fBTrue\fR if the value has the correct type, \fBFalse\fR otherwise. Always returns \fBFalse\fR for \fBNull\fR values.

.TP
Checks if a number is finite
.SEM Γ ⊢ expr:E\*<+\*> \fBIs Finite\fR ↓ True
Γ ⊢ expr ↓ v :: Int
.SEME
.SEM Γ ⊢ expr:E\*<+\*> \fBIs Finite\fR ↓ ISFINITE(v) :: Bool
Γ ⊢ expr ↓ v :: Float
.SEME

If the value is a float, returns \fBFalse\fR if the value is infinite or not-a-number, \fBTrue\fR otherwise. If the value is an integer, returns \fBTrue\fR. See IEEE 754.

.TP
Check if a number is not-a-number.
.SEM Γ ⊢ expr:E\*<+\*> \fBIs NaN\fR ↓ False
Γ ⊢ expr ↓ v :: Int
.SEME
.SEM Γ ⊢ expr:E\*<+\*> \fBIs NaN\fR ↓ ISNAN(v) :: Bool
Γ ⊢ expr ↓ v :: Float
.SEME

If the value is a float, returns \fBTrue\fR if the value is not a number, \fBFalse\fR otherwise. If the value is an integer, returns \fBFalse\fR.

.TP
Checks if a value is \fBNull\fR.
.SEM Γ ⊢ expr:E\*<+\*> \fBIs Null\fR ↓ True
Γ ⊢ expr ↓ ∅
.SEME

.SEM Γ ⊢ expr:E\*<+\*> \fBIs Null\fR ↓ False
Γ ⊢ expr ↓ v :: t,

t ≠ Unit
.SEME

Returns \fBTrue\fR if the value is \fBNull\fR, \fBFalse\fR for all other values.

.SS EXPRESSION SYNTAX (E) – ERROR AND LENGTH
.TP
Raise an error
.SEM Γ ⊢ \fBError\fR expr:E\*<+\*>
Γ ⊢ expr \fBTo Str\fR ↓ m
.SEME

Returns the Unicode character count of the provided string.
.TP
String character length
.SEM Γ ⊢ \fBLength\fR expr:E\*<+\*> ↓ n :: Int
Γ ⊢ expr \fBTo Str\fR ↓ "c\*<1\*>c\*<2\*>...c\*<n\*>" :: Str
.SEME

Returns the number of bytes of the provided binary data.
.TP
Binary data length
.SEM Γ ⊢ \fBLength\fR expr:E\*<+\*> ↓ n :: Int
Γ ⊢ expr ↓ [[x\*<1\*>x\*<2\*>...x\*<n\*>]] :: Bin
.SEME

.SS EXPRESSION SYNTAX (E) – REMOTE LOOKUP
.TP
Remote contextual lookup.
.SEM Γ ⊢ \fBLookup\fR name:I name:(\fB.\fRI)* \fBIn\fR expr:E ↓ v
Γ ⊢ expr ↓ < u; Δ; ... >,

Δ ⊢ name ↓ v
.SEME

.SS EXPRESSION SYNTAX (E) – INSTANTIATION
.TP
Instantiate a template

.SEM Γ ⊢ source:E\*<+\*> \fB{\fR a:(A / O / E)+ \fB}\fR ↓ v
Γ ⊢ \fB(Template\fR source \fB{\fR a \fB}) { }\fR ↓ v
.SEME

.SEM (t, ...) ⊢ source:E\*<+\*> \fB{ }\fR ↓ r = < u; r, t, ..., s, ...; ∀ x : k\*<x\*> → v\*<x\*> >
(t, ...) ⊢ source ↓ S = < (s, ...); k\*<s\*> → e\*<s\*>, ... >,

∀ k\*<x\*> → e\*<x\*> ∈ S : (r, t, ..., s, ...) ⊢ e\*<x\*> ↓ v\*<x\*>
.SEME

Creates a new frame, based on a template, grounded in the current scope. If source is a template, instantiate that template setting the provided attributes and inheriting any others. If source is not a template, an error occurs. If any attribute is external but not overridden, it will cause an error.

.SS EXPRESSION SYNTAX (E) – COALESCENCE
.TP
Null coalescence
.SEM Γ ⊢ value:E\*<+\*> \fB??\fR default:E\*<+\*> ↓ v
Γ ⊢ value ↓ v
.SEME

.SEM Γ ⊢ value:E\*<+\*> \fB??\fR default:E\*<+\*> ↓ v
Γ ⊢ value ↓ ∅,

Γ ⊢ default ↓ v
.SEME

.SS EXPRESSION SYNTAX (E) – FRAME CREATION, NULLABLE LOOKUP, AND UNARY OPERATORS
.TP
Literal frame
.SEM (t, ...) ⊢ \fB{\fR (a:A)* \fB}\fR ↓ r = < u; r, t, ...;  ∀ x ∈ a : k\*<x\*> → v\*<x\*> >

∀ x ∈ a : (t, ...); (r, t, ...) ⊢ x ↓ k\*<x\*> → v\*<x\*>,

¬∃ k\*<y\*> = k\*<x\*>,

(s, ...) ⊢ \fBThis\fR ↓ u
.SEME
Construct a new literal frame.

.TP
Create a new template
.SEM Γ ⊢ \fBTemplate {\fR a:(A / G / X)* \fB}\fR ↓ < Γ; k\*<x\*> → e\*<x\*> >

∀ x ∈ a : Γ ⊢ x ↓ k\*<x\*> → e\*<x\*>,

¬∃ k\*<y\*> = k\*<x\*>
.SEME

Create a new template, not based on any current template.

.TP
Extend a template
.SEM (t, ...) ⊢ \fBTemplate\fR source:E\*<+\*> \fB{\fR a:(A / G / O / X)* \fB}\fR ↓ < (t, ..., s, ...); ∀ m : k\*<m\*> → e\*<m\*> >

(t, ...) ⊢ source ↓ S = < (s, ...); k\*<s\*> → e\*<s\*>, ... >,

∀ x ∈ a, (∃ k\*<s\*> : k\*<x\*> = k\*<s\*>) : (t, ...); e\*<s\*> ⊢ x ↓ k\*<m\*> → e\*<m\*>,

∀ x ∈ a, (¬∃ k\*<s\*> : k\*<x\*> = k\*<s\*>) : (t, ...) ⊢ x ↓ k\*<m\*> → e\*<m\*>,

∀ k\*<s\*> → e\*<s\*> : ¬∃ k\*<s\*> : k\*<x\*> = k\*<s\*> : k\*<m\*> → e\*<m\*> = k\*<s\*> → e\*<s\*>
.SEME

Create a template that inherits from an existing template. It contains all the attributes of the existing template unless amended by the specified attributes. The specified attributes can add, replace, amend, or remove attributes from the existing template. Any unmentioned attributes are inherited directly. The new template has the lookup context of the context where the modification was performed followed by the context of the existing template.

.TP
Create a new function-like template
.SEM Γ ⊢ \fBFunction (\fR( a:(A / F / G) (\fB,\fR a:(A / F / G))*)? \fB)\fR body:E\*<0\*> ↓ < Γ; k\*<x\*> → e\*<x\*> \fBvalue\fR → body >

∀ x ∈ a : Γ ⊢ x ↓ k\*<x\*> → e\*<x\*>,

¬∃ k\*<y\*> = k\*<x\*>

¬∃ k\*<y\*> = \fBvalue\fR
.SEME

Create a new template, not based on any current template.

.TP
Nullable lookup
.SEM Γ ⊢ expr:E\*<+\*> \fB?\fR names:(\fB.\fR I)+ ↓ v
Γ ⊢ \fBIf\fR expr \fBIs Null Then Else Null\fR (\fRexpr\fB)\fRnames ↓ v
.SEME

.TP
Bit-wise negation
.SEM Γ ⊢ \fB-\fR expr:E\*<+\*> ↓ BITWISE_COMP(v) :: Int
Γ ⊢ expr ↓ v :: Int
.SEME

.TP
Logical negation
.SEM Γ ⊢ \fB!\fR expr:E\*<+\*> ↓ False
Γ ⊢ expr ↓ True
.SEME

.SEM Γ ⊢ \fB!\fR expr:E\*<+\*> ↓ True
Γ ⊢ expr ↓ False
.SEME

.TP
Numeric negation
.SEM Γ ⊢ \fB-\fR expr:E\*<+\*> ↓ -v :: Int
Γ ⊢ expr ↓ v :: Int
.SEME

.SEM Γ ⊢ \fB-\fR expr:E\*<+\*> ↓ -v :: Float
Γ ⊢ expr ↓ v :: Float
.SEME

.TP
Unique identifier generation
.SEM Γ ⊢ \fBGenerateId\fR expr:E\*<+\*> ↓ i :: Str
Γ ⊢ expr ↓ < i; Δ; ... >
.SEME

Extracts the unique identifier from a frame. The implementation makes no guarantees about the format of these identifiers, other than they are valid Flabbergast identifiers.

This expression is meant to have a similar function to LISP's \fIgensym\fR or XPath's \fIgenerate-id\fR. It is intended to allow generating unique, though unhelpfully opaque, identifiers in generated code. For instance, to generate temporary variable names when generating the compiler. The \fBId\fR function is similar Clojure's auto-\fIgensym\fR syntax; with the scope of a frame, the same identifier is available.

.TP
Perform type-directed lookup

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> ↓ t
Γ ⊢ expr ↓ v :: Bin,

Γ ⊢ \fBbin\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> ↓ t
Γ ⊢ expr ↓ v :: Bool,

Γ ⊢ \fBbool\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> ↓ t
Γ ⊢ expr ↓ v :: Float,

Γ ⊢ \fBfloat\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> ↓ t
Γ ⊢ expr ↓ v :: Frame,

Γ ⊢ \fBframe\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> ↓ t
Γ ⊢ expr ↓ v :: Int,

Γ ⊢ \fBint\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> ↓ t
Γ ⊢ expr ↓ v :: Unit,

Γ ⊢ \fBnull\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> ↓ t
Γ ⊢ expr ↓ v :: Template,

Γ ⊢ \fBtemplate\fR ↓ t
.SEME

.TP
Perform type-directed lookup with a prefix

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> \fBWith\fR name:I name:(\fB.\fRI)* ↓ t
Γ ⊢ expr ↓ v :: Bin,

Γ ⊢  (name\fB.\fR)+ \fBbin\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> \fBWith\fR name:I name:(\fB.\fRI)* ↓ t
Γ ⊢ expr ↓ v :: Bool,

Γ ⊢ (name\fB.\fR)+ \fBbool\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> \fBWith\fR name:I name:(\fB.\fRI)* ↓ t
Γ ⊢ expr ↓ v :: Float,

Γ ⊢ (name\fB.\fR)+ \fBfloat\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> \fBWith\fR name:I name:(\fB.\fRI)* ↓ t
Γ ⊢ expr ↓ v :: Frame,

Γ ⊢ (name\fB.\fR)+ \fBframe\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> \fBWith\fR name:I name:(\fB.\fRI)* ↓ t
Γ ⊢ expr ↓ v :: Int,

Γ ⊢ (name\fB.\fR)+ \fBint\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> \fBWith\fR name:I name:(\fB.\fRI)* ↓ t
Γ ⊢ expr ↓ v :: Unit,

Γ ⊢ (name\fB.\fR)+ \fBnull\fR ↓ t
.SEME

.SEM Γ ⊢ \fBTypeOf\fR expr:E\*<+\*> \fBWith\fR name:I name:(\fB.\fRI)* ↓ t
Γ ⊢ expr ↓ v :: Template,

Γ ⊢ (name\fB.\fR)+ \fBtemplate\fR ↓ t
.SEME

.SS EXPRESSION SYNTAX (E) – FUNCTION-LIKE TEMPLATE INSTANTIATION

.TP
Call template with arguments
.SEM Γ ⊢ fn:E\*<+\*> \fB( )\fR ↓ t
Γ ⊢ \fB(\fR fn \fB{ args : [] }).value\fR ↓ t
.SEME

.SEM Γ ⊢ fn:E\*<+\*> \fB(\fRarg:E\*<+\*> (\fB,\fR arg:E\*<+\*>)*(\fB,\fR name:I \fB:\fR nameexpr:E\*<0\*>  )*\fB)\fR ↓ t
∀ arg : Γ ⊢ arg ↓ v\*<arg\*>,

∀ nameexpr : Γ ⊢ nameexpr ↓ v\*<nameexpr\*>,

Γ ⊢ \fB(\fR fn \fB{ args : [\fR v\*<arg\*>, ... \fB ] \fR name \fB:\fR v\*<nameexpr\*>, ... \fB}).value\fR ↓ t
.SEME

.SEM Γ ⊢ fn:E\*<+\*> \fB(name:I \fB:\fR nameexpr:E\*<0\*> (\fB,\fR name:I \fB:\fR nameexpr:E\*<0\*> )*\fB)\fR

∀ nameexpr : Γ ⊢ nameexpr ↓ v\*<nameexpr\*>,

Γ ⊢ \fB(\fR fn \fB{ args : [] \fR name \fB:\fR v\*<nameexpr\*>, ... \fB}).value\fR ↓ t
.SEME

Unlike normal template evaluation, all expressions are captured in the current context, instead of the context of the instantiation.

.SS EXPRESSION SYNTAX (E) – LOOKUP
.TP
Access external data

.HP
.B Definition:
\fBFrom\fR ([\fBA\fR-\fBZa\fR-\fBz0\fR-\fB9.+-\fR]+\fB:\fR[\fBA\fR-\fBZa\fR-\fBz0\fR-\fB9~!*'();@&=+$,/?%#[].+:-\fR]+)

This expression returns data external to the program, described by the URI provided. This expression access as library access, input of user data, and a foreign data interface. The exact semantics of the command are implementation-defined, however, the same URI must yield the same data during the execution of the program and the current context must be irrelevant to the import mechanism (i.e., the return value must not depend lookup expressions, however, it can return a template which does).

Evaluate an expression, which must be a frame, then begin lookup of the names provided from that context.

The interpreter may process all \fBFrom\fR expressions first, outside of normal program flow. That is, \fBFalse && From foo:\fR may evaluate the \fBFrom\fR expression.

.TP
Contextual lookup
.SEM (t, s, ...) ⊢ names:N names:(\fB.\fR N)* ↓ v
names ⊢ t ↓ v
.SEME
.SEM (t, s, ...) ⊢ names:N names:(\fB.\fR N)* ↓ v
(s, ...) ⊢ names ↓ v
.SEME
.SEM (n) ⊢ t :: Frame ↓ v
< n → v > ∈ t
.SEME
.SEM (n, m, ...) ⊢ t :: Frame ↓ v
< n → s > ∈ t
(m, ...) ⊢ s ↓ v
.SEME

This does a dynamically-scoped lookup. It searches all the existing frame contexts for a matching name. If the value in any frame is not a frame, this is not an error. Any frame that does not match the complete path of names is simply ignored. It is an error if there are no more contexts in which to search and there are still unsatisfied names.

It is not an error if any value is not defined so long as it is not the first item in an Γ\*<n\*>. See EVALUATION SEMANTICS for more details.

.TP
Perform direct lookup
.SEM Γ ⊢ expr:E\*<+\*> \fB.\fR name:I other:(\fB.\fR I)* ↓ u
Γ ⊢ expr ↓ < u; Δ; name → v, ... >,

Γ ⊢ v other:I ↓ u
.SEME
Get values from inside of a frame. Do not perform contextual lookup.

.SS EXPRESSION SYNTAX (E) – TERMINAL
.TP
Subexpression
.SEM Γ ⊢ \fB(\fR expr:E\*<0\*> \fB)\fR ↓ v
Γ ⊢ expr ↓ v
.SEME

.TP
Literal list
.SEM (s, ...) ⊢ \fB[\fR (arg:E\*<0\*> (\fB,\fR arg:E\*<0\*>)*)? \fB]\fR ↓ t = < u; (t, s, ...); ∀ x ∈ arg : ORD(x) → v\*<x\*> >
∀ x ∈ arg : (s, ...) ⊢ x ↓ v\*<x\*>,

(s, ...) ⊢ \fBThis\fR ↓ u
.SEME

This creates a list-like frame. Names are selected by the ORD function such that the frame will have the same order of items as the original list when collated. Indexing is 1-based.

.TP
Identifier-like string
.SEM \fB$\fR name:I ↓ \(dqname\(dq :: String
.SEME

Produce a string that is parsed as an identifier, so it is necessarily a valid identifier.

.TP
Access containing frame
.SEM (a, ...) ⊢ \fBContainer\fR ↓ v
(...) ⊢ \fBThis\fR ↓ v
.SEME

.SEM (a*, ...) ⊢ \fBContainer\fR ↓ v
(...) ⊢ \fBContainer\fR ↓ v
.SEME

Return the frame containing current frame. This is the second frame in the environment not marked with a *.

.TP
Boolean false literal
.SEM \fBFalse\fR ↓ False :: Bool
.SEME

The Boolean falsehood value. Alternatively, thought of as boolshit.

.TP
Largest floating literal
.SEM \fBFloatMax\fR ↓ x :: Float
.SEME

The value of \fIx\fR is the implementation-defined largest value representable as a floating point number.

.TP
Smallest floating literal
.SEM \fBFloatMin\fR ↓ x :: Float
.SEME

The value of \fIx\fR is the implementation-defined smallest value representable as a floating point number.

.TP
Create unique identifier for the current frame
.SEM Γ ⊢ \fBId\fR ↓ v
Γ ⊢ \fBGenerateId This\fR ↓ v
.SEME

This is syntactic sugar for generating an identifier for the current frame. See \fBGenerateId\fR for details.

.TP
Infinity literal
.SEM \fBInfinity\fR ↓ ∞ :: Float
.SEME

A floating point value representing positive infinity.

.TP
Largest integer literal
.SEM \fBIntMax\fR ↓ x :: Int
.SEME

The value of \fIx\fR is the implementation-defined largest value representable as an integer. It should be strictly greater than zero.

.TP
Smallest integer literal
.SEM \fBIntMin\fR ↓ x :: Int
.SEME

The value of \fIx\fR is the implementation-defined smallest value representable as an integer. It should be strictly smaller than zero.

.TP
Not-a-number literal
.SEM \fBNaN\fR ↓ NaN :: Float
.SEME

This is the IEEE not-a-number value.

.TP
Null literal
.SEM \fBNull\fR ↓ ∅
.SEME

.TP
Access current frame
.SEM (a, ...) ⊢ \fBThis\fR ↓ a
.SEME

.SEM (a*, ...) ⊢ \fBThis\fR ↓ v
(...) ⊢ \fBThis\fR ↓ v
.SEME

Return the current frame. This is the first frame in the environment not marked with a *.

.TP
Boolean true literal
.SEM \fBTrue\fR ↓ True :: Bool
.SEME

The Boolean truthiness value.

.TP
Floating point literal
.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fB.\fR[\fB0\fR-\fB9\fR]*((\fBe\fR/\fBE\fR)(\fB0\fR/(\fB-\fR)?[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)? ↓ v :: Float
.SEME

IEEE 754 floating point number.

.TP
Integer literal
.SEM \fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*/\fB0x\fR?[\fB0\fR-\fB9\fR\fBA\fR-\fBF\fR\fBa\fR-\fBf\fR]+ ↓ v :: Int
.SEME

Decimal or hexadecimal integers.

.TP
Integer literal with units
.SEM t:T\*<0\*> ↓ v :: Int
.SEME
.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fBk\fR ↓ v * 1000 :: Int
.SEME
.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fBM\fR ↓ v * 1000² :: Int
.SEME
.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fBG\fR ↓ v * 1000³ :: Int
.SEME

.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fBki\fR ↓ v * 1024 :: Int
.SEME
.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fBMi\fR ↓ v * 1024² :: Int
.SEME
.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fBGi\fR ↓ v * 1024³ :: Int
.SEME

Integers with units.

.TP
String expression

.SEM Γ ⊢ \fB\(dq\fRa:S*\fB\(dq\fR ↓ \(dqv\*<0\*>v\*<1\*>...v\*<n\*>\(dq :: Str
Γ ⊢ a\*<n\*> ↓ v\*<n\*>
.SEME

.SS STRING PARTS (S)

UNICODE converts a number to its Unicode code-point.

.TP
Characters other than quote or backslash
.SEM x:[^\fB\(dq\\\\\fR]+ ↓ x
.SEME

.TP
Audible bell
.SEM \fB\\\\a\fR ↓ UNICODE(7)
.SEME

.TP
Backspace
.SEM \fB\\\\b\fR ↓ UNICODE(8)
.SEME

.TP
Form feed
.SEM \fB\\\\f\fR ↓ UNICODE(12)
.SEME

.TP
New line
.SEM \fB\\\\n\fR ↓ UNICODE(10)
.SEME

.TP
Carriage return
.SEM \fB\\\\r\fR ↓ UNICODE(13)
.SEME

.TP
Horizontal tab
.SEM \fB\\\\t\fR ↓ UNICODE(9)
.SEME

.TP
Vertical tab
.SEM \fB\\\\v\fR ↓ UNICODE(11)
.SEME

.TP
Quotation mark
.SEM \fB\\\\\(dq\fR ↓ UNICODE(34)
.SEME

.TP
Octal escape
.SEM \fB\\\\\fRa:[\fB0\fR-\fB7\fR]b:[\fB0\fR-\fB7\fR]c:[\fB0\fR-\fB7\fR] ↓ UNICODE(a * 64 + b * 8 + c)
.SEME

.TP
ASCII hex escape
.SEM \fB\\\\x\fRa:[\fB0\fR-\fB9a\fR-\fBfA\fR-\fBF\fR]b:[\fB0\fR-\fB9a\fR-\fBfA-\fBF\fR] ↓ UNICODE(a * 16 + b)
.SEME

.TP
Unicode hex escape
.SEM \fB\\\\u\fRa:[\fB0\fR-\fB9a\fR-\fBfA\fR-\fBF\fR]b:[\fB0\fR-\fB9a\fR-\fBfA\fR-\fBF\fR]c:[\fB0\fR-\fB9a\fR-\fBfA\fR-\fBF\fR]d:[\fB0\fR-\fB9a\fR-\fBfA\fR-\fBF\fR] ↓ UNICODE(a * 4096 + b * 256 + c * 16 + d)
.SEME

.TP
Embedded expression
.SEM Γ ⊢ \fB\\\\(\fR expr:E\*<0\*> \fB)\fR ↓ v
Γ ⊢ expr \fBTo Str\fR ↓ v
.SEME

.SH OTHER SYNTAX
.SH IDENTIFIERS (I)
.SEM [\fBa\fR-\fBz\fR][\fBa\fR-\fBzA\fR-\fBZ0\fR-\fB9_\fR]*
.SEME

.SH FRAME PARTS
.TP
Frame attribute definition (A)
.SEM Γ ⊢ name:I \fB:\fR expr:E ↓ name → expr
.SEME
.SEM Γ; R ⊢ name:I \fB:\fR expr:E ↓ name → expr
.SEME
Define a new attribute in a frame, equal to some expression.

.TP
In a template, define an attribute that must be overridden. (X)
.SEM Γ ⊢ name:I \fB: Required\fR ↓ name → \fBError \(dqAttribute \fRname\fB must be overridden.\(dq\fR
.SEME
.SEM Γ; R ⊢ name:I \fB: Required\fR ↓ name → \fBError \(dqAttribute \fRname\fB must be overridden.\(dq\fR
.SEME

Create an attribute whose value is an error requiring an override.

.TP
In a function-like template, define an attribute that must be overridden. (F)
.SEM Γ ⊢ name:I ↓ name → \fBError \(dqAttribute \fRname\fB must be overridden.\(dq\fR
.SEME

Create an attribute whose value is an error requiring an override.

.TP
In a template, define an attribute that is expected to be found via lookup. (X)
.SEM Γ ⊢ name:I \fB: Used\fR ↓
.SEME
.SEM Γ; R ⊢ name:I \fB: Used\fR ↓ name → R
.SEME

This does not do anything. It is intended to convey that an attribute should be available for inside out lookup. This is inteded as a place to collect documentation.

.TP
Override sub-template definition. (O)
.SEM Γ; R ⊢ name:I \fB+:\fR \fB{\fR a:(A / O / X)+ \fB}\fR ↓ name → \fBTemplate \fR R \fB{\fR a \fB}\fR
.SEME

The name \fIoriginal\fR must be selected to be entirely unique in the program scope.

.TP
Redefine an attribute. (O)
.SEM Γ; R ⊢ name:I \fB+\fR original:I \fB:\fR expr:E ↓ name → \fBLet\fR original \fB:\fR R \fBIn\fR expr
.SEME

.TP
Remove definition for an attribute. (O)
.SEM Γ; R ⊢ name \fB: Drop\fR ↓
.SEME

The name must be present in the existing frame or an error occurs.

.TP
Define an attribute that is eagerly evaluated instead of lazily evaluated. (G)
.SEM Γ ⊢ name:I \fB: Now\fR expr:E ↓ name → C
Γ ⊢ expr ↓ v,

∀ Δ : Δ ⊢ C ↓ v
.SEME
.SEM Γ; R ⊢ name:I \fB: Now\fR expr:E ↓ name → C
Γ ⊢ expr ↓ v,

∀ Δ : Δ ⊢ C ↓ v
.SEME


.SH TYPE DEFINITIONS (T)
.SEM \fBBool\fR ↓ Bool
.SEME
.SEM \fBFloat\fR ↓ Float
.SEME
.SEM \fBInt\fR ↓ Int
.SEME
.SEM \fBStr\fR ↓ Str
.SEME
.SEM \fBTemplate\fR ↓ Template
.SEME
.SEM \fBFrame\fR ↓ Frame
.SEME


.SH FRICASSÉE SELECTORS (FS) – ACCUMULATING

.TP
Binding selector
.SEM Γ ⊢ base:FS\*<+\*> \fBAccumulate\fR expr:E\*<0\*> \fBWith\fR name:I \fB:\fR initial:E\*<0\*> ↓ < c; Γ; k\*<i\*> →  w\*<i\*> >
(t, ...) = Γ,

Γ ⊢ base ↓ < u; Δ; k\*<i\*> →  v\*<i\*> >,

Γ ⊢ initial ↓ wv\*<-1,name\*>,

v\*<i\*> = < u\*<i\*>; Δ\*<i\*>; vk\*<ij\*> → vv\*<ij\*> >,

w\*<i\*> = < u\*<i\*>; Δ\*<i\*>; wk\*<ij\*> → wv\*<ij\*> >,

∀ i : wk\*<i\*> = name ∪ vk\*<i\*>,

∀ i, j = name : (< c; Γ; wv\*<i-1,j\*> >, v\*<i\*>, t, ...) ⊢  expr ↓ wv\*<ij\*>,

∀ i, j ≠ name : wv\*<ij\*> = vv\*<ij\*>,

Γ ⊢ \fBThis\fR ↓ c
.SEME

Bind a new value in each frame that is carried accross all frames in the iteration order.

.SH FRICASSÉE SELECTORS (FS) – BINDING

.TP
Binding selector
.SEM Γ ⊢ base:FS\*<+\*> \fBLet\fR name:I \fB:\fR nameexpr:E\*<0\*> (\fB,\fR name:I \fB:\fR nameexpr:E\*<0\*> )* ↓ < c; Γ; k\*<i\*> →  w\*<i\*> >
(t, ...) = Γ,

Γ ⊢ base ↓ < u; Δ; k\*<i\*> →  v\*<i\*> >,

v\*<i\*> = < u\*<i\*>; Δ\*<i\*>; vk\*<ij\*> → vv\*<ij\*> >,

w\*<i\*> = < u\*<i\*>; Δ\*<i\*>; wk\*<ij\*> → wv\*<ij\*> >,

∀ i : wk\*<i\*> = name ∪ vk\*<i\*>,

∀ i, j ∈ name : (v\*<i\*>, t, ...) ⊢  nameexpr ↓ wv\*<ij\*>,

∀ i, j ∉  name : wv\*<ij\*> = vv\*<ij\*>,

Γ ⊢ \fBThis\fR ↓ c
.SEME

Modify a list of witnesses, provided as a frame of frames, to include new entires or replace existing ones.

.SH FRICASSÉE SELECTORS (FS) – TERMINAL

.TP
Pass-through selector
.SEM Γ ⊢ \fBEach\fR input:E\*<0\*> ↓ { ∀ i :  v\*<i\*> }
Γ ⊢ input ↓ < u; Δ; k\*<i\*> → v\*<i\*> :: Frame >
.SEME

Passes-though a list of witnesses provided as a frame of frames.

.TP
Merged attribute selector
.SEM (t, ...) ⊢ value:I \fB:\fR input:(\fBName\fR / \fBOrdinal\fR /E\*<0\*>) (\fB,\fR value:I \fB:\fR input:(\fBName\fR / \fBOrdinal\fR /E\*<0\*>))* ↓ W
∀ i ∈ input:E : (t, ...) ⊢ i ↓ < u\*<i\*>; Δ\*<i\*>; kk\*<ij\*> → vv\*<ij\*> >,

V(j) = ∀ i ∈ input : value\*<i\*> → vv\*<ij\*>

A(j) = ∀ i ∈ input:\fBName\fR : value\*<i\*> → j,

K = ∀ i ∈ input:E : ∪ k\*<ij\*>,

O(j) = ∀ i ∈ input:\fBOrdinal\fR : value\*<i\*> → |{ k ∈ K : k\*<j\*> < j }| :: Int

W = { ∀ j : w\*<j\*> = < u; (w\*<j\*>, t, ...); V(j) ∪ A(j) ∪ O(j) > }
.SEME

Produce a list of witnesses where each \fIvalue\fR identifier matches the value of the current attribute in each of the frame inputs, or null, if not in the matching frame. The special input \fBName\fR is the name of the current attribute and the special input \fBOrdinal\fR is the position of the current attribute.

.SH FRICASSÉE RESULTS (FR)

.TP
Reducer (fold)
.SEM Γ; W ⊢ order:FO \fBReduce\fR expr:E\*<0\*> \fBWith\fR name:I \fB:\fR initial:E\*<+\*> ↓ v
Γ; W ⊢ order ↓ X,

Γ; X ⊢ \fBReduce\fR expr \fBWith\fR name \fB:\fR initial ↓ v
.SEME

.SEM Γ; ( ) ⊢ \fBReduce\fR expr:E\*<0\*> \fBWith\fR name:I \fB:\fR initial:E\*<+\*> ↓ v
Γ ⊢ initial ↓ v
.SEME
.SEM (t, ...); ( < u; Δ; k\*<x\*> → v\*<x1\*>, k\*<y\*> → v\*<y1\*>, ... >, w\*<1\*>, ... ) ⊢ \fBReduce\fR expr:E\*<0\*> \fBWith\fR name:I \fB:\fR initial:E\*<+\*> ↓ v\*<f\*>
(t, ...) ⊢ initial ↓ v\*<i\*>,

(< u; Δ; name → v\*<i\*>, k\*<x\*> → v\*<x1\*>, k\*<y\*> → v\*<y1\*>, ... >*, t, ...) ⊢ expr ↓ v

(t, ...); ( w\*<1\*>, ... ) ⊢ \fBReduce\fR expr \fBWith\fR name \fB:\fR v ↓ v\*<f\*>
.SEME

This reduces an expression to a single value.

.TP
Anonymous value generator
.SEM Γ; W ⊢ order:FO \fBSelect\fR expr:E\*<+\*> ↓ v
Γ; W ⊢ order ↓ X,

Γ; X ⊢ \fBSelect\fR expr ↓ v,
.SEME

.SEM (t, ...); ( w\*<0\*>, w\*<1\*>, ... ) ⊢ \fBSelect\fR expr:E\*<+\*> ↓ r = < u; r, t, ...; ∀ x : ORD(x) → v\*<x\*> >

∀ w\*<x\*> : (w\*<x\*>*, t, ...) ⊢ expr ↓ v\*<x\*>
.SEME

This produces a list-like frame by evaluating the supplied expression on each frame of witnesses.

.TP
Named attribute frame generator
.SEM (t, ...); ( w\*<0\*>, w\*<1\*>, ... ) ⊢ \fBSelect\fR attr:E\*<0\*> \fB:\fR expr:E\*<+\*> ↓ r = < u; r, t, ...; k\*<x\*> → v\*<x\*> >

(w\*<x\*>*, t, ...) ⊢ attr ↓ k\*<x\*> :: Str ∨ (w\*<x\*>*, t, ...) ⊢ attr ↓ v :: Int ∧ k\*<x\*> = ORD(v),

(w\*<x\*>*, t, ...) ⊢ expr ↓ v\*<x\*>
.SEME

This produces a frame with named attributes from strings or integers. Since frames cannot have duplicate keys, any duplicate keys produce an error. Similarly, since not all strings are valid keys, any string which is not a valid key is an error.

.SH FRICASSÉE ORDERING (FO)

.TP
Value ordered
.SEM (t, ...); (w\*<0\*>, ...) ⊢ \fBOrder\fR \fBBy\fR expr:E\*<0\*> ↓ (x\*<0\*>, x\*<1\*>, ..., x\*<n\*>)
V = { ∀ w\*<i\*> : (w\*<i\*>*, t, ...) ⊢ e ↓ v\*<i\*> :: t\*<i\*> },

t\*<0\*> = t\*<1\*> = ... = t\*<n\*>,

x\*<i\*> = w\*<j\*> ∧ u\*<i\*> = v\*<j\*> : v\*<j\*> ≥ u\*<i-1\*>
.SEME

Order the values based on an expression. The ordering implied by ≥ is the same as in the \fB<=>\fR expression. For this to be possible, the types of the returned expression must be the same and comparable. If two items have the same value, the order is implementation-defined.

.TP
Reverse ordered
.SEM Γ; (w\*<0\*>, ..., w\*<n\*>) ⊢ \fBReverse\fR ↓ (w\*<n\*>, ...w\*<0\*>)
.SEME

Reverses the order of the witnesses.

.SS TIME PARTS (T)
.TP
Days (T\*<0\*>)
.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fBd\fRt:T\*<1\*> ↓ v * 86400 + u :: Int
t ↓ u :: Int
.SEME

.TP
Days (T\*<1\*>)
.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fBh\fRt:T\*<2\*> ↓ v * 3600 + u :: Int
t ↓ u :: Int
.SEME

.TP
Hours (T\*<2\*>)
.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fBm\fRt:T\*<3\*> ↓ v * 60 + u :: Int
t ↓ u :: Int
.SEME

.TP
Seconds (T\*<3\*>)
.SEM (\fB0\fR/[\fB1\fR-\fB9\fR][\fB0\fR-\fB9\fR]*)\fBs\fR ↓ v :: Int
t ↓ u :: Int
.SEME

.SH EVALUATION SEMANTICS
In the semantics defined above, it is possible for a value to depend on its own value. Such situation are errors with one notable exception: the contextual lookup operator.

During contextual lookup, a list of candidate frames is whittled down to a list of frames containing a matching name. Since only the first name is selected, the values of the other frames are immaterial. It is therefore possible for one of these values to be circular, or an error, and the result still be correct.

.SH URI NAME-SPACES AND THE STANDARD LIBRARY
The URIs understood by the importer is implementation defined with one exception: the \fBlib:\fR schema holds the standard (installed) library. An implementation is free to fail to include this schema, but it may not be used with other semantics.

On UNIX, it is recommended that importing \fBlib:foo\fR will search for \fBfoo.o_0\fR in:
Any user-specified paths specified via the API or the command-line, as appropriate.
The directories specified in the \fBFLABBERGAST_PATH\fR environment variable.
The directories matching {$PREFIX,/usr,/usr/local}/share/flabbergast/lib where $PREFIX is the installation prefix.

.SH COLLATED NAMES FROM NUMBERS
Frame keys are always strings, but some instances use integers as inputs. The ORD function is an implementation-defined method to convert numbers to names such that total ordering of the numbers is preserved as total collation of the names.

Since collation is locale-dependent, this function may also be locale-dependent.

.SH SEE ALSO
.BR flabbergast_sql (7),
.BR flabbergast_uri (7).
